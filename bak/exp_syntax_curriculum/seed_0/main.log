CUDA is available?: True
using cuda?: True
train: 11170 val: 4900 test: 48910
Add 4200 samples for class 0, acc 0.90.
Add 3818 samples for class 1, acc 0.87.
Add 3145 samples for class 2, acc 0.92.
Add 6081 samples for class 3, acc 0.96.
Add 4537 samples for class 4, acc 0.70.
Add 4312 samples for class 5, acc 0.97.
Add 5997 samples for class 6, acc 0.99.
Add 3607 samples for class 7, acc 0.86.
Add 5694 samples for class 8, acc 0.95.
Add 3959 samples for class 9, acc 0.98.
Add 3883 samples for class 10, acc 0.90.
Add 17552 samples for class 11, acc 0.82.
Add 12698 samples for class 12, acc 1.00.
Add 12003 samples for class 13, acc 0.94.
Add 18163 samples for class 14, acc 0.87.
Add 3162 samples for class 15, acc 0.89.
Namespace(curriculum=True, epochs=100, epochs_eval=10, excludes='!', fewshot=-1, output_dir='./outputs/exp_syntax_curriculum/seed_0/', perception=False, perception_pretrain='data/perception-pretrain/model.pth.tar_78.2_match', resume=None, seed=0, semantics=False, syntax=True)
ClusteringModel(
  (backbone): ResNet(
    (conv1): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  )
  (cluster_head): ModuleList(
    (0): Linear(in_features=512, out_features=16, bias=True)
  )
)
use ground-truth syntax.
Symbol-00: None 0.00
Symbol-01: None 0.00
Symbol-02: None 0.00
Symbol-03: None 0.00
Symbol-04: None 0.00
Symbol-05: None 0.00
Symbol-06: None 0.00
Symbol-07: None 0.00
Symbol-08: None 0.00
Symbol-09: None 0.00
Symbol-10: None 0.00
Symbol-11: None 0.00
Symbol-12: None 0.00
Symbol-13: None 0.00
Symbol-14: None 0.00
Symbol-15: None 0.00
Curriculum: [(0, 1), (1, 3), (20, 7), (40, 11), (60, 15), (80, inf)]
Percentage of None result: 100.00
              precision    recall  f1-score   support

           0       0.94      0.90      0.92      4016
           1       0.72      0.53      0.61      5142
           2       0.88      0.66      0.75      5321
           3       0.86      0.96      0.91      5241
           4       0.71      0.73      0.72      5279
           5       0.96      0.94      0.95      5383
           6       0.94      0.98      0.96      5427
           7       0.56      0.73      0.64      5462
           8       0.93      0.86      0.89      5453
           9       0.92      0.73      0.81      5476
           +       0.93      0.53      0.68     13199
           -       0.70      1.00      0.82     10734
           *       1.00      1.00      1.00     13491
           /       0.89      1.00      0.94      9876
           (       0.73      0.95      0.83     21081
           )       0.85      0.67      0.75     21081

    accuracy                           0.83    141662
   macro avg       0.85      0.82      0.82    141662
weighted avg       0.84      0.83      0.82    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (    )
0  255    0    0    0    3    0    0    0   25    0    0    0    0    0     0    0
1    0  192    1    0    1    0    0    3    0    0    0    3    0    0    32  129
2    1   16  247    2    1    2    1    1    0   18    0    1    3   77     1    0
3    0    0    3  354    3    3    0    0    0    5    0    0    0    0     0    0
4    0    0    0    0  272    0    0   58    0    0   22   18    0    0     0    0
5   15    0    7    0    0  357    0    0    0    0    0    0    0    0     0    0
6    0    0    0    0    0    9  373    0    0    0    0    0    0    0     0    0
7    0   41   20    0    0    0    0  281    0    0   10   20    0   10     0    0
8    0    0    0   53    0    0    0    0  331    0    0    0    0    0     0    0
9    0   10    0    0   94    0    0    0    0  282    0    0    0    0     0    0
+    0    0    0    0    0    0    0  153    0    0  493  280    0    0     0    3
-    0    0    0    0    0    0    0    0    0    0    2  755    0    0     0    0
*    0    0    0    0    0    0    0    0    0    0    0    0  952    0     0    0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  697     0    0
(    0    7    0    0    7    0   14    0    0    0    0    0    0    0  1420   37
)    0    0    0    0    0    0    7    0    0    0    0    0    0    0   488  992
result accuracy by length:
1 ( 2%)  0.00
3 ( 2%)  0.00
5 ( 2%)  0.00
7 ( 4%)  0.00
9 ( 4%)  0.00
11 ( 3%)  0.00
13 ( 4%)  0.00
15 ( 4%)  0.00
17 ( 4%)  0.00
19 ( 4%)  0.00
21 ( 4%)  0.00
23 ( 4%)  0.00
25 ( 4%)  0.00
27 ( 4%)  0.00
29 ( 3%)  0.00
31 ( 3%)  0.00
33 ( 2%)  0.00
35 ( 2%)  0.00
37 ( 2%)  0.00
39 ( 3%)  0.00
41 ( 3%)  0.00
43 ( 2%)  0.00
45 ( 2%)  0.00
47 ( 2%)  0.00
49 ( 2%)  0.00
51 ( 2%)  0.00
53 ( 2%)  0.00
55 ( 2%)  0.00
57 ( 2%)  0.00
59 ( 2%)  0.00
61 ( 1%)  0.00
63 ( 0%)  0.00
65 ( 0%)  0.00
67 ( 0%)  0.00
result accuracy by symbol:
( (91%)  0.00
) (91%)  0.00
* (87%)  0.00
+ (84%)  0.00
- (77%)  0.00
/ (76%)  0.00
0 (52%)  0.00
1 (60%)  0.00
2 (61%)  0.00
3 (62%)  0.00
4 (61%)  0.00
5 (62%)  0.00
6 (62%)  0.00
7 (63%)  0.00
8 (64%)  0.00
9 (63%)  0.00
result accuracy by digit:
0 ( 0%)  0.00
1 ( 0%)  0.00
2 ( 0%)  0.00
3 ( 0%)  0.00
4 ( 0%)  0.00
5 ( 0%)  0.00
6 ( 0%)  0.00
7 ( 0%)  0.00
8 ( 0%)  0.00
9 ( 0%)  0.00
result accuracy by result:
0 (21%)  0.00
1 (10%)  0.00
2 ( 4%)  0.00
3 ( 2%)  0.00
4 ( 2%)  0.00
5 ( 2%)  0.00
6 ( 2%)  0.00
7 ( 2%)  0.00
8 ( 2%)  0.00
9 ( 1%)  0.00
result accuracy by generalization:
1 (22.45%)  0.00
2 (22.96%)  0.00
3 (22.53%)  0.00
4 (15.82%)  0.00
5 (16.24%)  0.00
error cases:
7 7 [-1] [-1] 7 None
7 7 [-1] [-1] 7 None
7 7 [-1] [-1] 7 None
7 7 [-1] [-1] 7 None
7 1 [-1] [-1] 7 None
7 1 [-1] [-1] 7 None
7 2 [-1] [-1] 7 None
7 7 [-1] [-1] 7 None
7 7 [-1] [-1] 7 None
7 7 [-1] [-1] 7 None
1 ) [-1] [-1] 1 None
1 ( [-1] [-1] 1 None
1 ) [-1] [-1] 1 None
1 1 [-1] [-1] 1 None
1 ( [-1] [-1] 1 None
1 1 [-1] [-1] 1 None
1 1 [-1] [-1] 1 None
1 1 [-1] [-1] 1 None
1 1 [-1] [-1] 1 None
1 ( [-1] [-1] 1 None
val (Perception Acc=82.59, Head Acc=100.00, Result Acc=0.00)
------------------------------
Epoch 0/99 (max_len=1, data=1000)
Train acc: 0.00 (abduce 100.00)
Hit samples:  1000  Ave length:  1.0
Symbols:  16 [(0, 81), (1, 76), (2, 81), (3, 107), (4, 90), (5, 89), (6, 101), (7, 89), (8, 106), (9, 74), (10, 18), (11, 13), (12, 1), (13, 32), (14, 7), (15, 35)]
Head:  [((-1,), 1000)]
Semantics: 16/0/14 (total/solved/learn).
Symbol-00 (int), Samples:  81,  [(((), 0), 76), (((), 5), 2), (((), 7), 1), (((), 3), 1), (((), 2), 1)]
Symbol-01 (int), Samples:  76,  [(((), 1), 59), (((), 7), 12), (((), 9), 2), (((), 4), 1), (((), 3), 1), (((), 2), 1)]
Symbol-02 (int), Samples:  81,  [(((), 2), 65), (((), 5), 5), (((), 7), 3), (((), 3), 3), (((), 8), 2), (((), 1), 1), (((), 0), 1), (((), 6), 1)]
Symbol-03 (int), Samples: 100,  [(((), 3), 87), (((), 5), 7), (((), 8), 6)]
Symbol-04 (int), Samples:  90,  [(((), 4), 60), (((), 9), 28), (((), 0), 1), (((), 6), 1)]
Symbol-05 (int), Samples:  89,  [(((), 5), 81), (((), 0), 3), (((), 7), 1), (((), 3), 1), (((), 9), 1), (((), 2), 1), (((), 8), 1)]
Symbol-06 (int), Samples: 100,  [(((), 6), 96), (((), 0), 1), (((), 3), 1), (((), 2), 1), (((), 7), 1)]
Symbol-07 (int), Samples:  89,  [(((), 7), 66), (((), 4), 23)]
Symbol-08 (int), Samples: 100,  [(((), 8), 86), (((), 0), 14)]
Symbol-09 (int), Samples:  74,  [(((), 9), 69), (((), 2), 5)]
Symbol-10 (int), Samples:  18,  [(((), 4), 14), (((), 7), 4)]
Symbol-11 (int), Samples:  13,  [(((), 7), 9), (((), 4), 2), (((), 0), 1), (((), 2), 1)]
Symbol-13 (int), Samples:  32,  [(((), 2), 25), (((), 5), 5), (((), 7), 1), (((), 3), 1)]
Symbol-15 (int), Samples:  35,  [(((), 1), 34), (((), 7), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
Symbol-00: 0 0 0.94
Symbol-01: 1 (incr 0) 0.78
Symbol-02: 2 (incr (incr 0)) 0.80
Symbol-03: 3 (incr (incr (incr 0))) 0.86
Symbol-04: 4 (incr (incr (incr (incr 0)))) 0.67
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 0.91
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 0.96
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 0.74
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 0.84
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 0.93
Symbol-10: None 0.00
Symbol-11: None 0.00
Symbol-12: None 0.00
Symbol-13: None 0.00
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 75.98 (abduce 100.00)
Hit samples:  1000  Ave length:  1.0
Symbols:  10 [(0, 100), (1, 100), (2, 100), (3, 100), (4, 100), (5, 100), (6, 100), (7, 100), (8, 100), (9, 100)]
Head:  [((-1,), 1000)]
Learn perception with 1000 samples for 100 iterations, 1.0, 0.9375, 3200, 16 epochs, take 28 sec.
Epoch time: 0m 51s
------------------------------
Epoch 1/99 (max_len=3, data=2170)
Train acc: 45.68 (abduce 97.60)
Hit samples:  2118  Ave length:  2.06
Symbols:  15 [(0, 300), (1, 346), (2, 312), (3, 341), (4, 341), (5, 338), (6, 327), (7, 325), (8, 335), (9, 305), (10, 206), (11, 351), (12, 289), (13, 231), (15, 7)]
Head:  [((-1,), 1000), ((1, -1, 1), 1118)]
Semantics: 16/10/4 (total/solved/learn).
Symbol-10 (int -> int -> int), Samples: 100,  [(((8, 7), 15), 3), (((6, 6), 12), 3), (((1, 8), 9), 3), (((4, 8), 12), 2), (((8, 1), 9), 2), (((5, 8), 13), 2), (((4, 4), 13), 2), (((6, 7), 13), 2), (((2, 6), 8), 2), (((3, 2), 5), 2)]
Symbol-11 (int -> int -> int), Samples: 100,  [(((0, 3), 0), 3), (((4, 0), 4), 3), (((6, 4), 2), 3), (((9, 7), 2), 2), (((3, 0), 3), 2), (((5, 5), 0), 2), (((5, 9), 0), 2), (((1, 4), 0), 2), (((6, 2), 4), 2), (((5, 6), 0), 2)]
Symbol-12 (int -> int -> int), Samples: 100,  [(((0, 7), 0), 3), (((6, 0), 0), 3), (((1, 9), 9), 2), (((3, 9), 27), 2), (((0, 3), 0), 2), (((5, 2), 10), 2), (((8, 6), 48), 2), (((8, 5), 40), 2), (((9, 3), 27), 2), (((9, 9), 81), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((8, 7), 2), 3), (((1, 8), 1), 3), (((7, 1), 7), 3), (((5, 2), 3), 3), (((4, 3), 2), 3), (((9, 5), 2), 2), (((8, 1), 8), 2), (((8, 6), 2), 2), (((3, 8), 1), 2), (((2, 4), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
Rescoring 14 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.90
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.79
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.28
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (incr (if0 $0 $1 (decr0 ($2 (decr0 $1) (decr0 $0))))))))))) 0.64
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 77.60 (abduce 90.46)
Hit samples:  1963  Ave length:  1.98
Symbols:  14 [(0, 298), (1, 331), (2, 275), (3, 284), (4, 285), (5, 306), (6, 297), (7, 284), (8, 292), (9, 274), (10, 273), (11, 347), (12, 96), (13, 247)]
Head:  [((-1,), 1000), ((1, -1, 1), 963)]
Learn perception with 1963 samples for 100 iterations, 0.9521727950629982, 0.9465058046892784, 4393, 12 epochs, take 26 sec.
Epoch time: 10m 40s
------------------------------
Epoch 2/99 (max_len=3, data=2170)
Train acc: 88.68 (abduce 99.68)
Hit samples:  2163  Ave length:  2.08
Symbols:  15 [(0, 302), (1, 336), (2, 313), (3, 333), (4, 334), (5, 354), (6, 349), (7, 342), (8, 339), (9, 325), (10, 284), (11, 323), (12, 282), (13, 272), (15, 1)]
Head:  [((-1,), 1000), ((1, -1, 1), 1163)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((7, 7), 49), 3), (((3, 4), 12), 3), (((4, 7), 28), 3), (((6, 6), 36), 3), (((6, 2), 12), 3), (((6, 7), 42), 2), (((2, 7), 14), 2), (((9, 9), 81), 2), (((5, 7), 35), 2), (((3, 5), 15), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((0, 7), 0), 4), (((8, 7), 2), 3), (((6, 1), 6), 3), (((2, 3), 1), 3), (((0, 1), 0), 3), (((0, 9), 0), 3), (((4, 3), 2), 3), (((0, 4), 0), 3), (((5, 1), 5), 2), (((6, 3), 3), 2)]
Update grammar with invented programs and set frontiers to none.
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.99
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.98
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.34
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.90
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 89.25 (abduce 91.61)
Hit samples:  1988  Ave length:  1.99
Symbols:  14 [(0, 299), (1, 336), (2, 286), (3, 287), (4, 293), (5, 298), (6, 297), (7, 292), (8, 299), (9, 289), (10, 287), (11, 324), (12, 98), (13, 279)]
Head:  [((-1,), 1000), ((1, -1, 1), 988)]
Learn perception with 1988 samples for 100 iterations, 0.9629162462159435, 0.9543215405284371, 4466, 12 epochs, take 26 sec.
Epoch time: 10m 43s
------------------------------
Epoch 3/99 (max_len=3, data=2170)
Train acc: 90.95 (abduce 99.91)
Hit samples:  2168  Ave length:  2.08
Symbols:  15 [(0, 299), (1, 338), (2, 318), (3, 331), (4, 340), (5, 347), (6, 344), (7, 339), (8, 347), (9, 333), (10, 286), (11, 323), (12, 287), (13, 271), (15, 1)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 5), 40), 3), (((6, 9), 54), 3), (((9, 9), 81), 3), (((4, 9), 36), 3), (((4, 7), 28), 3), (((4, 4), 16), 3), (((5, 6), 30), 3), (((8, 2), 16), 3), (((4, 8), 32), 2), (((3, 6), 18), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.99
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.34
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 1.00
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 90.95 (abduce 91.66)
Hit samples:  1989  Ave length:  1.99
Symbols:  14 [(0, 299), (1, 337), (2, 286), (3, 287), (4, 293), (5, 298), (6, 297), (7, 292), (8, 300), (9, 289), (10, 287), (11, 322), (12, 98), (13, 282)]
Head:  [((-1,), 1000), ((1, -1, 1), 989)]
Learn perception with 1989 samples for 100 iterations, 0.9631963700529367, 0.9556947863056612, 4469, 12 epochs, take 26 sec.
Epoch time: 5m 45s
------------------------------
Epoch 4/99 (max_len=3, data=2170)
Train acc: 91.36 (abduce 99.91)
Hit samples:  2168  Ave length:  2.08
Symbols:  14 [(0, 298), (1, 337), (2, 319), (3, 331), (4, 339), (5, 348), (6, 344), (7, 339), (8, 348), (9, 333), (10, 286), (11, 322), (12, 282), (13, 278)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 6), 36), 3), (((5, 5), 25), 3), (((4, 8), 32), 3), (((3, 6), 18), 3), (((7, 7), 49), 3), (((8, 3), 24), 3), (((5, 7), 35), 3), (((7, 9), 63), 3), (((3, 2), 6), 3), (((9, 8), 72), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.99
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.35
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 1.00
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 91.36 (abduce 91.66)
Hit samples:  1989  Ave length:  1.99
Symbols:  14 [(0, 299), (1, 337), (2, 286), (3, 287), (4, 293), (5, 298), (6, 297), (7, 292), (8, 300), (9, 289), (10, 287), (11, 321), (12, 98), (13, 283)]
Head:  [((-1,), 1000), ((1, -1, 1), 989)]
Learn perception with 1989 samples for 100 iterations, 0.9634484497101083, 0.9554710226001343, 4469, 12 epochs, take 26 sec.
Epoch time: 5m 45s
------------------------------
Epoch 5/99 (max_len=3, data=2170)
Train acc: 91.41 (abduce 99.91)
Hit samples:  2168  Ave length:  2.08
Symbols:  14 [(0, 299), (1, 339), (2, 318), (3, 331), (4, 338), (5, 348), (6, 344), (7, 339), (8, 347), (9, 333), (10, 287), (11, 319), (12, 280), (13, 282)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 5), 20), 3), (((6, 5), 30), 3), (((9, 6), 54), 3), (((5, 8), 40), 3), (((3, 7), 21), 3), (((4, 8), 32), 3), (((3, 9), 27), 2), (((8, 5), 40), 2), (((4, 4), 16), 2), (((9, 4), 36), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.35
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.99
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 91.41 (abduce 91.66)
Hit samples:  1989  Ave length:  1.99
Symbols:  14 [(0, 299), (1, 337), (2, 286), (3, 287), (4, 293), (5, 298), (6, 297), (7, 292), (8, 300), (9, 289), (10, 287), (11, 321), (12, 98), (13, 283)]
Head:  [((-1,), 1000), ((1, -1, 1), 989)]
Learn perception with 1989 samples for 100 iterations, 0.9634484497101083, 0.9559185500111882, 4469, 12 epochs, take 26 sec.
Epoch time: 5m 45s
------------------------------
Epoch 6/99 (max_len=3, data=2170)
Train acc: 91.41 (abduce 99.86)
Hit samples:  2167  Ave length:  2.08
Symbols:  15 [(0, 299), (1, 337), (2, 317), (3, 331), (4, 337), (5, 348), (6, 344), (7, 339), (8, 347), (9, 334), (10, 287), (11, 319), (12, 279), (13, 282), (15, 1)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 5), 20), 3), (((4, 2), 8), 3), (((9, 9), 81), 3), (((9, 5), 45), 3), (((8, 8), 64), 3), (((8, 3), 24), 3), (((3, 2), 6), 3), (((3, 3), 9), 3), (((8, 6), 48), 2), (((9, 4), 36), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.35
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 1.00
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 91.41 (abduce 91.66)
Hit samples:  1989  Ave length:  1.99
Symbols:  14 [(0, 299), (1, 337), (2, 286), (3, 287), (4, 293), (5, 298), (6, 297), (7, 292), (8, 300), (9, 289), (10, 287), (11, 321), (12, 98), (13, 283)]
Head:  [((-1,), 1000), ((1, -1, 1), 989)]
Learn perception with 1989 samples for 100 iterations, 0.9634484497101083, 0.9599462967106736, 4469, 12 epochs, take 26 sec.
Epoch time: 5m 45s
------------------------------
Epoch 7/99 (max_len=3, data=2170)
Train acc: 91.45 (abduce 99.86)
Hit samples:  2167  Ave length:  2.08
Symbols:  14 [(0, 299), (1, 337), (2, 320), (3, 331), (4, 338), (5, 347), (6, 345), (7, 339), (8, 346), (9, 332), (10, 286), (11, 319), (12, 280), (13, 282)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((5, 7), 35), 3), (((5, 5), 25), 3), (((8, 7), 56), 3), (((6, 7), 42), 3), (((4, 8), 32), 3), (((9, 3), 27), 2), (((7, 7), 49), 2), (((3, 4), 12), 2), (((2, 9), 18), 2), (((6, 2), 12), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.35
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 1.00
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 91.45 (abduce 91.66)
Hit samples:  1989  Ave length:  1.99
Symbols:  14 [(0, 299), (1, 337), (2, 286), (3, 287), (4, 293), (5, 298), (6, 297), (7, 292), (8, 300), (9, 289), (10, 287), (11, 321), (12, 98), (13, 283)]
Head:  [((-1,), 1000), ((1, -1, 1), 989)]
Learn perception with 1989 samples for 100 iterations, 0.9634484497101083, 0.9545759677780264, 4469, 12 epochs, take 26 sec.
Epoch time: 5m 45s
------------------------------
Epoch 8/99 (max_len=3, data=2170)
Train acc: 91.54 (abduce 99.91)
Hit samples:  2168  Ave length:  2.08
Symbols:  14 [(0, 299), (1, 338), (2, 319), (3, 331), (4, 337), (5, 348), (6, 344), (7, 339), (8, 347), (9, 334), (10, 287), (11, 319), (12, 279), (13, 283)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((3, 6), 18), 3), (((8, 7), 56), 3), (((8, 2), 16), 3), (((4, 8), 32), 3), (((4, 7), 28), 3), (((5, 3), 15), 3), (((6, 6), 36), 3), (((6, 7), 42), 3), (((7, 5), 35), 3), (((2, 6), 12), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.35
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 1.00
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 91.54 (abduce 91.66)
Hit samples:  1989  Ave length:  1.99
Symbols:  14 [(0, 299), (1, 337), (2, 286), (3, 287), (4, 293), (5, 298), (6, 297), (7, 292), (8, 300), (9, 289), (10, 287), (11, 321), (12, 98), (13, 283)]
Head:  [((-1,), 1000), ((1, -1, 1), 989)]
Learn perception with 1989 samples for 100 iterations, 0.9634484497101083, 0.9572611322443499, 4469, 12 epochs, take 26 sec.
Epoch time: 5m 45s
------------------------------
Epoch 9/99 (max_len=3, data=2170)
Train acc: 91.31 (abduce 99.86)
Hit samples:  2167  Ave length:  2.08
Symbols:  15 [(0, 299), (1, 336), (2, 319), (3, 330), (4, 337), (5, 348), (6, 344), (7, 339), (8, 347), (9, 334), (10, 286), (11, 319), (12, 282), (13, 280), (15, 1)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((3, 9), 27), 3), (((5, 3), 15), 3), (((2, 9), 18), 3), (((8, 6), 48), 3), (((6, 5), 30), 3), (((9, 7), 63), 3), (((7, 2), 14), 3), (((9, 4), 36), 2), (((8, 9), 72), 2), (((8, 7), 56), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.35
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 1.00
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 91.31 (abduce 91.66)
Hit samples:  1989  Ave length:  1.99
Symbols:  14 [(0, 299), (1, 337), (2, 286), (3, 287), (4, 293), (5, 298), (6, 297), (7, 292), (8, 300), (9, 289), (10, 287), (11, 321), (12, 98), (13, 283)]
Head:  [((-1,), 1000), ((1, -1, 1), 989)]
Learn perception with 1989 samples for 100 iterations, 0.9634484497101083, 0.9565898411277691, 4469, 12 epochs, take 26 sec.
Percentage of None result: 48.12
              precision    recall  f1-score   support

           0       0.97      0.98      0.98      4016
           1       0.70      0.89      0.78      5142
           2       0.99      0.95      0.97      5321
           3       1.00      0.98      0.99      5241
           4       0.98      0.99      0.98      5279
           5       1.00      0.98      0.99      5383
           6       0.97      1.00      0.99      5427
           7       0.97      1.00      0.98      5462
           8       0.98      1.00      0.99      5453
           9       0.99      1.00      0.99      5476
           +       0.99      0.97      0.98     13199
           -       0.97      1.00      0.98     10734
           *       1.00      1.00      1.00     13491
           /       0.99      1.00      0.99      9876
           (       0.75      0.94      0.83     21081
           )       0.97      0.65      0.78     21081

    accuracy                           0.93    141662
   macro avg       0.95      0.96      0.95    141662
weighted avg       0.94      0.93      0.93    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (    )
0  277    0    0    0    0    0    0    0    6    0    0    0    0    0     0    0
1    0  321    0    1    0    0    0    3    0    0    0    0    0    0     7   28
2    0    6  356    0    1    0    2    1    2    1    0    0    2    0     2    0
3    0    0    3  363    0    0    0    0    0    2    0    0    0    0     0    0
4    0    0    0    0  368    0    0    0    0    0    4    0    0    0     0    0
5    7    0    0    0    0  372    0    0    0    0    0    0    0    0     0    0
6    0    0    0    0    0    0  383    0    0    0    0    0    0    0     0    0
7    0    0    0    0    0    0    0  385    0    0    0    0    0    0     0    0
8    0    0    0    0    0    0    0    0  384    0    0    0    0    0     0    0
9    0    0    0    0    0    0    0    0    0  386    0    0    0    0     0    0
+    0    3    0    0    6    0    0    0    0    0  900   20    0    0     0    0
-    0    0    0    0    0    0    0    0    0    0    2  755    0    0     0    0
*    0    0    0    0    0    0    0    0    0    0    0    0  952    0     0    0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  697     0    0
(    0   74    0    0    0    0    7    0    0    0    0    0    0    7  1398    0
)    0   52    0    0    0    0    0    7    0    0    0    0    0    0   465  962
result accuracy by length:
1 ( 2%) 98.00
3 ( 2%) 75.00
5 ( 2%) 50.39
7 ( 4%) 38.43
9 ( 4%) 34.17
11 ( 3%) 27.27
13 ( 4%) 34.72
15 ( 4%) 26.24
17 ( 4%) 24.76
19 ( 4%) 24.02
21 ( 4%) 20.71
23 ( 4%) 22.93
25 ( 4%) 18.00
27 ( 4%) 20.20
29 ( 3%) 19.37
31 ( 3%) 10.12
33 ( 2%) 12.86
35 ( 2%) 10.27
37 ( 2%) 16.24
39 ( 3%) 10.53
41 ( 3%) 12.75
43 ( 2%) 10.87
45 ( 2%) 10.71
47 ( 2%)  8.33
49 ( 2%)  5.63
51 ( 2%)  9.85
53 ( 2%)  5.22
55 ( 2%)  6.72
57 ( 2%)  7.69
59 ( 2%) 10.28
61 ( 1%)  1.56
63 ( 0%)  5.71
65 ( 0%)  0.00
67 ( 0%)  0.00
result accuracy by symbol:
( (91%) 17.91
) (91%) 17.91
* (87%) 13.76
+ (84%) 17.96
- (77%) 20.13
/ (76%) 19.09
0 (52%) 20.74
1 (60%) 17.17
2 (61%) 16.78
3 (62%) 16.72
4 (61%) 15.79
5 (62%) 16.21
6 (62%) 16.14
7 (63%) 16.21
8 (64%) 15.86
9 (63%) 16.54
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 90.00
2 ( 0%) 100.00
3 ( 0%) 100.00
4 ( 0%) 100.00
5 ( 0%) 90.00
6 ( 0%) 100.00
7 ( 0%) 100.00
8 ( 0%) 100.00
9 ( 0%) 100.00
result accuracy by result:
0 (21%) 43.81
1 (10%) 27.72
2 ( 4%) 37.37
3 ( 2%) 38.52
4 ( 2%) 32.33
5 ( 2%) 42.00
6 ( 2%) 36.52
7 ( 2%) 34.51
8 ( 2%) 33.33
9 ( 1%) 44.19
result accuracy by generalization:
1 (22.45%) 47.09
2 (22.96%) 36.00
3 (22.53%)  1.63
4 (15.82%) 14.71
5 (16.24%)  2.51
error cases:
1 ( [-1] [-1] 1 None
5 0 [-1] [-1] 5 0
5*9 5*9 [1, -1, 1] [1, -1, 1] 45 0
9*1 9*1 [1, -1, 1] [1, -1, 1] 9 0
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 0
6*4 6*4 [1, -1, 1] [1, -1, 1] 24 0
3*5 3*5 [1, -1, 1] [1, -1, 1] 15 0
5*5 5*5 [1, -1, 1] [1, -1, 1] 25 0
2*4 2*4 [1, -1, 1] [1, -1, 1] 8 4
5*3 5*3 [1, -1, 1] [1, -1, 1] 15 0
7*9 7*9 [1, -1, 1] [1, -1, 1] 63 0
8*1 8*1 [1, -1, 1] [1, -1, 1] 8 0
6*1 6*1 [1, -1, 1] [1, -1, 1] 6 0
3*2 3*2 [1, -1, 1] [1, -1, 1] 6 0
3*3 3*3 [1, -1, 1] [1, -1, 1] 9 0
6*3 6*3 [1, -1, 1] [1, -1, 1] 18 0
8*2 8*2 [1, -1, 1] [1, -1, 1] 16 0
2-1 2-) [1, -1, 1] [1, -1, 1] 1 None
7*7 7*7 [1, -1, 1] [1, -1, 1] 49 0
3-2 3-1 [1, -1, 1] [1, -1, 1] 1 2
val (Perception Acc=92.66, Head Acc=100.00, Result Acc=21.94)
Epoch time: 6m 40s
------------------------------
Epoch 10/99 (max_len=3, data=2170)
Train acc: 91.31 (abduce 99.86)
Hit samples:  2167  Ave length:  2.08
Symbols:  15 [(0, 299), (1, 336), (2, 320), (3, 331), (4, 336), (5, 348), (6, 344), (7, 338), (8, 346), (9, 334), (10, 286), (11, 321), (12, 279), (13, 281), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((3, 9), 27), 3), (((3, 8), 24), 3), (((3, 6), 18), 3), (((5, 8), 40), 3), (((8, 2), 16), 3), (((7, 9), 63), 3), (((6, 5), 30), 3), (((5, 2), 10), 3), (((5, 5), 25), 3), (((5, 9), 45), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.35
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 1.00
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 91.31 (abduce 91.66)
Hit samples:  1989  Ave length:  1.99
Symbols:  14 [(0, 299), (1, 337), (2, 286), (3, 287), (4, 293), (5, 298), (6, 297), (7, 292), (8, 300), (9, 289), (10, 287), (11, 321), (12, 98), (13, 283)]
Head:  [((-1,), 1000), ((1, -1, 1), 989)]
Learn perception with 1989 samples for 100 iterations, 0.9634484497101083, 0.9588274781830387, 4469, 12 epochs, take 26 sec.
Epoch time: 5m 45s
------------------------------
Epoch 11/99 (max_len=3, data=2170)
Train acc: 91.36 (abduce 99.86)
Hit samples:  2167  Ave length:  2.08
Symbols:  14 [(0, 299), (1, 339), (2, 319), (3, 331), (4, 337), (5, 348), (6, 344), (7, 338), (8, 346), (9, 333), (10, 287), (11, 319), (12, 281), (13, 280)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((5, 3), 15), 3), (((6, 6), 36), 3), (((8, 4), 32), 3), (((4, 3), 12), 3), (((5, 5), 25), 3), (((3, 3), 9), 3), (((9, 5), 45), 3), (((3, 8), 24), 2), (((2, 9), 18), 2), (((3, 7), 21), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.35
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 1.00
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 91.36 (abduce 91.66)
Hit samples:  1989  Ave length:  1.99
Symbols:  14 [(0, 299), (1, 337), (2, 286), (3, 287), (4, 293), (5, 298), (6, 297), (7, 292), (8, 300), (9, 289), (10, 287), (11, 321), (12, 98), (13, 283)]
Head:  [((-1,), 1000), ((1, -1, 1), 989)]
Learn perception with 1989 samples for 100 iterations, 0.9634484497101083, 0.9588274781830387, 4469, 12 epochs, take 26 sec.
Epoch time: 5m 44s
------------------------------
Epoch 12/99 (max_len=3, data=2170)
Train acc: 91.50 (abduce 99.91)
Hit samples:  2168  Ave length:  2.08
Symbols:  14 [(0, 299), (1, 338), (2, 320), (3, 331), (4, 337), (5, 348), (6, 344), (7, 339), (8, 346), (9, 334), (10, 287), (11, 319), (12, 278), (13, 284)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((7, 4), 28), 3), (((4, 7), 28), 3), (((3, 3), 9), 3), (((5, 9), 45), 3), (((7, 9), 63), 2), (((2, 8), 16), 2), (((5, 7), 35), 2), (((3, 4), 12), 2), (((6, 7), 42), 2), (((9, 3), 27), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.35
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.99
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 91.50 (abduce 91.66)
Hit samples:  1989  Ave length:  1.99
Symbols:  14 [(0, 299), (1, 337), (2, 286), (3, 287), (4, 293), (5, 298), (6, 297), (7, 292), (8, 300), (9, 289), (10, 287), (11, 321), (12, 98), (13, 283)]
Head:  [((-1,), 1000), ((1, -1, 1), 989)]
Learn perception with 1989 samples for 100 iterations, 0.9634484497101083, 0.9563660774222421, 4469, 12 epochs, take 26 sec.
Epoch time: 5m 45s
------------------------------
Epoch 13/99 (max_len=3, data=2170)
Train acc: 91.27 (abduce 99.86)
Hit samples:  2167  Ave length:  2.08
Symbols:  14 [(0, 299), (1, 338), (2, 320), (3, 331), (4, 337), (5, 348), (6, 344), (7, 337), (8, 346), (9, 334), (10, 286), (11, 319), (12, 284), (13, 278)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 5), 30), 3), (((7, 8), 56), 3), (((8, 3), 24), 3), (((6, 9), 54), 3), (((8, 2), 16), 3), (((8, 4), 32), 3), (((5, 9), 45), 3), (((5, 8), 40), 3), (((5, 3), 15), 2), (((7, 9), 63), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.35
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 1.00
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 91.27 (abduce 91.66)
Hit samples:  1989  Ave length:  1.99
Symbols:  14 [(0, 299), (1, 337), (2, 286), (3, 287), (4, 293), (5, 298), (6, 297), (7, 292), (8, 300), (9, 289), (10, 287), (11, 321), (12, 98), (13, 283)]
Head:  [((-1,), 1000), ((1, -1, 1), 989)]
Learn perception with 1989 samples for 100 iterations, 0.9634484497101083, 0.9563660774222421, 4469, 12 epochs, take 26 sec.
Epoch time: 5m 45s
------------------------------
Epoch 14/99 (max_len=3, data=2170)
Train acc: 91.27 (abduce 99.72)
Hit samples:  2164  Ave length:  2.08
Symbols:  15 [(0, 300), (1, 334), (2, 320), (3, 331), (4, 336), (5, 347), (6, 344), (7, 337), (8, 346), (9, 332), (10, 287), (11, 319), (12, 276), (13, 282), (15, 1)]
Head:  [((-1,), 1000), ((1, -1, 1), 1164)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((9, 7), 63), 3), (((5, 5), 25), 3), (((8, 3), 24), 3), (((8, 2), 16), 3), (((3, 6), 18), 2), (((6, 9), 54), 2), (((7, 5), 35), 2), (((7, 6), 42), 2), (((6, 7), 42), 2), (((7, 7), 49), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.34
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.99
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 91.27 (abduce 91.66)
Hit samples:  1989  Ave length:  1.99
Symbols:  14 [(0, 299), (1, 337), (2, 286), (3, 287), (4, 293), (5, 298), (6, 297), (7, 292), (8, 300), (9, 289), (10, 287), (11, 321), (12, 98), (13, 283)]
Head:  [((-1,), 1000), ((1, -1, 1), 989)]
Learn perception with 1989 samples for 100 iterations, 0.9634484497101083, 0.9547997314835533, 4469, 12 epochs, take 26 sec.
Epoch time: 5m 44s
------------------------------
Epoch 15/99 (max_len=3, data=2170)
Train acc: 90.99 (abduce 99.72)
Hit samples:  2164  Ave length:  2.08
Symbols:  16 [(0, 299), (1, 330), (2, 322), (3, 331), (4, 336), (5, 345), (6, 345), (7, 337), (8, 346), (9, 334), (10, 285), (11, 318), (12, 283), (13, 278), (14, 1), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 1164)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 9), 54), 3), (((2, 9), 18), 3), (((4, 7), 28), 3), (((5, 9), 45), 3), (((5, 2), 10), 3), (((6, 5), 30), 3), (((7, 7), 49), 3), (((4, 6), 24), 3), (((5, 5), 25), 2), (((9, 6), 54), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.34
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 1.00
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 90.99 (abduce 91.66)
Hit samples:  1989  Ave length:  1.99
Symbols:  14 [(0, 299), (1, 337), (2, 286), (3, 287), (4, 293), (5, 298), (6, 297), (7, 292), (8, 300), (9, 289), (10, 287), (11, 321), (12, 98), (13, 283)]
Head:  [((-1,), 1000), ((1, -1, 1), 989)]
Learn perception with 1989 samples for 100 iterations, 0.9634484497101083, 0.9561423137167151, 4469, 12 epochs, take 26 sec.
Epoch time: 5m 45s
------------------------------
Epoch 16/99 (max_len=3, data=2170)
Train acc: 91.13 (abduce 99.86)
Hit samples:  2167  Ave length:  2.08
Symbols:  14 [(0, 299), (1, 336), (2, 322), (3, 331), (4, 337), (5, 347), (6, 344), (7, 338), (8, 347), (9, 333), (10, 285), (11, 321), (12, 283), (13, 278)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((9, 9), 81), 3), (((4, 5), 20), 3), (((9, 3), 27), 3), (((2, 9), 18), 3), (((5, 6), 30), 3), (((8, 5), 40), 3), (((9, 4), 36), 3), (((3, 4), 12), 2), (((4, 6), 24), 2), (((3, 3), 9), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.34
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.99
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 91.13 (abduce 91.66)
Hit samples:  1989  Ave length:  1.99
Symbols:  14 [(0, 299), (1, 337), (2, 286), (3, 287), (4, 293), (5, 298), (6, 297), (7, 292), (8, 300), (9, 289), (10, 287), (11, 321), (12, 98), (13, 283)]
Head:  [((-1,), 1000), ((1, -1, 1), 989)]
Learn perception with 1989 samples for 100 iterations, 0.9634484497101083, 0.9550234951890804, 4469, 12 epochs, take 26 sec.
Epoch time: 5m 44s
------------------------------
Epoch 17/99 (max_len=3, data=2170)
Train acc: 91.31 (abduce 99.86)
Hit samples:  2167  Ave length:  2.08
Symbols:  14 [(0, 299), (1, 336), (2, 321), (3, 331), (4, 337), (5, 348), (6, 344), (7, 339), (8, 345), (9, 334), (10, 285), (11, 321), (12, 279), (13, 282)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 7), 42), 3), (((3, 6), 18), 3), (((4, 4), 16), 3), (((3, 3), 9), 3), (((9, 5), 45), 3), (((7, 7), 49), 3), (((9, 4), 36), 2), (((3, 7), 21), 2), (((5, 5), 25), 2), (((8, 8), 64), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.34
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.99
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 91.31 (abduce 91.66)
Hit samples:  1989  Ave length:  1.99
Symbols:  14 [(0, 299), (1, 337), (2, 286), (3, 287), (4, 293), (5, 298), (6, 297), (7, 292), (8, 300), (9, 289), (10, 287), (11, 321), (12, 98), (13, 283)]
Head:  [((-1,), 1000), ((1, -1, 1), 989)]
Learn perception with 1989 samples for 100 iterations, 0.9634484497101083, 0.9590512418885657, 4469, 12 epochs, take 26 sec.
Epoch time: 5m 46s
------------------------------
Epoch 18/99 (max_len=3, data=2170)
Train acc: 91.41 (abduce 99.82)
Hit samples:  2166  Ave length:  2.08
Symbols:  15 [(0, 299), (1, 337), (2, 320), (3, 331), (4, 336), (5, 346), (6, 345), (7, 338), (8, 345), (9, 334), (10, 286), (11, 318), (12, 279), (13, 283), (14, 1)]
Head:  [((-1,), 1000), ((1, -1, 1), 1166)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 6), 48), 3), (((5, 8), 40), 3), (((5, 9), 45), 3), (((6, 7), 42), 3), (((3, 2), 6), 3), (((7, 8), 56), 3), (((6, 9), 54), 3), (((5, 6), 30), 3), (((5, 7), 35), 3), (((4, 3), 12), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.35
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 1.00
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 91.41 (abduce 91.66)
Hit samples:  1989  Ave length:  1.99
Symbols:  14 [(0, 299), (1, 337), (2, 286), (3, 287), (4, 293), (5, 298), (6, 297), (7, 292), (8, 300), (9, 289), (10, 287), (11, 321), (12, 98), (13, 283)]
Head:  [((-1,), 1000), ((1, -1, 1), 989)]
Learn perception with 1989 samples for 100 iterations, 0.9634484497101083, 0.957484895949877, 4469, 12 epochs, take 26 sec.
Epoch time: 5m 45s
------------------------------
Epoch 19/99 (max_len=3, data=2170)
Train acc: 91.41 (abduce 99.91)
Hit samples:  2168  Ave length:  2.08
Symbols:  15 [(0, 299), (1, 338), (2, 320), (3, 331), (4, 337), (5, 347), (6, 345), (7, 338), (8, 346), (9, 334), (10, 286), (11, 321), (12, 279), (13, 282), (15, 1)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((3, 6), 18), 3), (((7, 9), 63), 3), (((4, 5), 20), 3), (((2, 9), 18), 3), (((6, 3), 18), 3), (((4, 2), 8), 3), (((3, 5), 15), 3), (((8, 8), 64), 3), (((6, 7), 42), 3), (((7, 7), 49), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.35
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 1.00
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 91.41 (abduce 91.66)
Hit samples:  1989  Ave length:  1.99
Symbols:  14 [(0, 299), (1, 337), (2, 286), (3, 287), (4, 293), (5, 298), (6, 297), (7, 292), (8, 300), (9, 289), (10, 287), (11, 321), (12, 98), (13, 283)]
Head:  [((-1,), 1000), ((1, -1, 1), 989)]
Learn perception with 1989 samples for 100 iterations, 0.9634484497101083, 0.9559185500111882, 4469, 12 epochs, take 26 sec.
Percentage of None result: 57.86
              precision    recall  f1-score   support

           0       0.97      0.97      0.97      4016
           1       0.56      0.90      0.69      5142
           2       1.00      0.95      0.98      5321
           3       1.00      0.98      0.99      5241
           4       0.97      0.99      0.98      5279
           5       1.00      0.98      0.99      5383
           6       0.97      1.00      0.98      5427
           7       0.97      1.00      0.98      5462
           8       0.97      1.00      0.99      5453
           9       0.99      1.00      0.99      5476
           +       0.99      0.97      0.98     13199
           -       0.98      1.00      0.99     10734
           *       1.00      1.00      1.00     13491
           /       1.00      1.00      1.00      9876
           (       0.75      0.92      0.83     21081
           )       0.98      0.61      0.75     21081

    accuracy                           0.92    141662
   macro avg       0.94      0.95      0.94    141662
weighted avg       0.94      0.92      0.92    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (    )
0  273    0    0    0    0    0    3    0    6    0    0    0    0    0     0    0
1    0  325    0    1    2    0    0    3    0    0    0    0    0    0    10   20
2    0    1  358    0    2    0    2    2    2    1    0    1    2    0     1    0
3    0    0    0  364    0    0    0    0    2    2    0    0    0    0     0    0
4    0    0    0    0  368    0    0    0    0    0    4    0    0    0     0    0
5    7    0    0    0    0  372    0    0    0    0    0    0    0    0     0    0
6    0    0    0    0    0    0  383    0    0    0    0    0    0    0     0    0
7    0    0    0    0    0    0    0  385    0    0    0    0    0    0     0    0
8    0    0    0    0    0    0    0    0  384    0    0    0    0    0     0    0
9    0    0    0    0    0    0    0    0    0  386    0    0    0    0     0    0
+    0    3    0    0    6    0    0    0    0    0  907   13    0    0     0    0
-    0    0    0    0    0    0    0    0    0    0    2  755    0    0     0    0
*    0    0    0    0    0    0    0    0    0    0    0    0  952    0     0    0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  697     0    0
(    0  112    0    0    0    0    7    0    0    0    0    0    0    0  1368    0
)    0  135    0    0    0    0    0    7    0    0    0    0    0    0   435  909
result accuracy by length:
1 ( 2%) 98.00
3 ( 2%) 74.00
5 ( 2%) 48.84
7 ( 4%) 37.12
9 ( 4%) 32.16
11 ( 3%) 25.57
13 ( 4%) 31.02
15 ( 4%) 21.78
17 ( 4%) 21.36
19 ( 4%) 19.12
21 ( 4%) 17.68
23 ( 4%) 18.54
25 ( 4%) 16.00
27 ( 4%) 13.30
29 ( 3%) 10.99
31 ( 3%)  7.14
33 ( 2%)  8.57
35 ( 2%)  8.22
37 ( 2%) 11.97
39 ( 3%)  8.55
41 ( 3%)  6.71
43 ( 2%)  5.07
45 ( 2%)  3.57
47 ( 2%)  3.79
49 ( 2%)  4.93
51 ( 2%)  9.09
53 ( 2%)  3.73
55 ( 2%)  4.20
57 ( 2%)  2.10
59 ( 2%)  4.67
61 ( 1%)  0.00
63 ( 0%)  0.00
65 ( 0%)  0.00
67 ( 0%)  0.00
result accuracy by symbol:
( (91%) 14.07
) (91%) 14.07
* (87%) 10.79
+ (84%) 14.19
- (77%) 16.14
/ (76%) 15.02
0 (52%) 16.25
1 (60%) 13.35
2 (61%) 13.02
3 (62%) 13.25
4 (61%) 12.07
5 (62%) 12.63
6 (62%) 12.77
7 (63%) 12.50
8 (64%) 12.32
9 (63%) 12.84
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 90.00
2 ( 0%) 100.00
3 ( 0%) 100.00
4 ( 0%) 100.00
5 ( 0%) 90.00
6 ( 0%) 100.00
7 ( 0%) 100.00
8 ( 0%) 100.00
9 ( 0%) 100.00
result accuracy by result:
0 (21%) 35.52
1 (10%) 23.78
2 ( 4%) 34.85
3 ( 2%) 36.30
4 ( 2%) 23.31
5 ( 2%) 39.00
6 ( 2%) 32.17
7 ( 2%) 30.97
8 ( 2%) 25.64
9 ( 1%) 36.05
result accuracy by generalization:
1 (22.45%) 43.18
2 (22.96%) 30.13
3 (22.53%)  1.09
4 (15.82%)  8.77
5 (16.24%)  1.01
error cases:
1 ( [-1] [-1] 1 None
5 0 [-1] [-1] 5 0
5*9 5*9 [1, -1, 1] [1, -1, 1] 45 0
9*1 9*1 [1, -1, 1] [1, -1, 1] 9 0
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 0
6*4 6*4 [1, -1, 1] [1, -1, 1] 24 0
3*5 3*5 [1, -1, 1] [1, -1, 1] 15 0
5*5 5*5 [1, -1, 1] [1, -1, 1] 25 0
2*4 2*4 [1, -1, 1] [1, -1, 1] 8 4
5*3 5*3 [1, -1, 1] [1, -1, 1] 15 0
7*9 7*9 [1, -1, 1] [1, -1, 1] 63 0
8*1 8*1 [1, -1, 1] [1, -1, 1] 8 0
1*4 )*4 [1, -1, 1] [1, -1, 1] 4 None
6*1 6*1 [1, -1, 1] [1, -1, 1] 6 0
3*2 3*2 [1, -1, 1] [1, -1, 1] 6 0
3*3 3*3 [1, -1, 1] [1, -1, 1] 9 0
6*3 6*3 [1, -1, 1] [1, -1, 1] 18 0
8*2 8*2 [1, -1, 1] [1, -1, 1] 16 0
2-1 2-) [1, -1, 1] [1, -1, 1] 1 None
7*7 7*7 [1, -1, 1] [1, -1, 1] 49 0
val (Perception Acc=91.93, Head Acc=100.00, Result Acc=18.41)
Epoch time: 6m 31s
------------------------------
Epoch 20/99 (max_len=7, data=3387)
Train acc: 79.73 (abduce 96.31)
Hit samples:  3262  Ave length:  3.45
Symbols:  16 [(0, 569), (1, 669), (2, 666), (3, 706), (4, 715), (5, 698), (6, 694), (7, 721), (8, 709), (9, 676), (10, 914), (11, 965), (12, 857), (13, 817), (14, 585), (15, 285)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 346), ((1, -1, 3, 1, 3), 110), ((1, -1, 4, 4, 1, 4, 4), 313), ((2, 2, 5, 2, 2, -1, 5), 122), ((1, 3, 1, -1, 5, 3, 5), 86), ((1, 3, 1, 5, 3, -1, 5), 81), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 15)]
Semantics: 16/11/3 (total/solved/learn).
Symbol-11 (int -> int -> int), Samples: 100,  [(((2, 0), 0), 6), (((9, 0), 0), 5), (((6, 0), 0), 5), (((8, 0), 0), 5), (((1, 0), 0), 4), (((4, 0), 0), 2), (((0, 0), 8), 2), (((0, 9), 15), 2), (((7, 0), 0), 2), (((3, 0), 0), 2)]
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 4), 32), 4), (((8, 2), 16), 4), (((3, 3), 9), 4), (((4, 3), 12), 3), (((4, 9), 36), 3), (((3, 8), 24), 3), (((4, 6), 24), 3), (((9, 4), 36), 3), (((8, 3), 24), 3), (((9, 1), 9), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((7, 1), 7), 4), (((2, 0), 1), 3), (((8, 7), 2), 3), (((1, 9), 1), 3), (((3, 3), 1), 3), (((9, 4), 3), 2), (((9, 1), 9), 2), (((3, 5), 1), 2), (((0, 9), 4), 2), (((5, 9), 1), 2)]
Update grammar with invented programs and set frontiers to none.
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.91
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.89
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.62
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 79.73 (abduce 86.86)
Hit samples:  2942  Ave length:  3.36
Symbols:  16 [(0, 580), (1, 677), (2, 590), (3, 585), (4, 597), (5, 592), (6, 599), (7, 612), (8, 604), (9, 569), (10, 883), (11, 963), (12, 355), (13, 862), (14, 542), (15, 280)]
Head:  [((-1,), 1000), ((1, -1, 1), 989), ((1, 3, 1, -1, 3), 278), ((1, -1, 3, 1, 3), 96), ((1, -1, 4, 4, 1, 4, 4), 302), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 69), ((1, 5, 3, 1, 3, -1, 5), 15), ((1, -1, 3, 5, 3, 1, 5), 12)]
Learn perception with 2942 samples for 100 iterations, 0.9525783619817998, 6 epochs, take 26 sec.
Epoch time: 11m 3s
------------------------------
Epoch 21/99 (max_len=7, data=3387)
Train acc: 84.22 (abduce 99.11)
Hit samples:  3357  Ave length:  3.54
Symbols:  16 [(0, 607), (1, 721), (2, 688), (3, 722), (4, 738), (5, 721), (6, 735), (7, 758), (8, 724), (9, 702), (10, 995), (11, 1015), (12, 838), (13, 909), (14, 678), (15, 328)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 360), ((1, -1, 3, 1, 3), 112), ((1, -1, 4, 4, 1, 4, 4), 366), ((2, 2, 5, 2, 2, -1, 5), 137), ((1, 3, 1, -1, 5, 3, 5), 91), ((1, 3, 1, 5, 3, -1, 5), 86), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 16)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((7, 5), 35), 4), (((4, 4), 16), 3), (((3, 1), 3), 3), (((5, 8), 40), 3), (((6, 9), 54), 3), (((8, 8), 64), 3), (((6, 3), 18), 3), (((8, 7), 56), 3), (((3, 4), 12), 2), (((0, 1), 0), 2)]
Update grammar with invented programs and set frontiers to none.
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.64
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 84.22 (abduce 87.22)
Hit samples:  2954  Ave length:  3.37
Symbols:  16 [(0, 583), (1, 686), (2, 593), (3, 587), (4, 600), (5, 595), (6, 604), (7, 616), (8, 605), (9, 573), (10, 890), (11, 969), (12, 360), (13, 869), (14, 554), (15, 284)]
Head:  [((-1,), 1000), ((1, -1, 1), 989), ((1, 3, 1, -1, 3), 279), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 310), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 69), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 12)]
Learn perception with 2954 samples for 100 iterations, 0.951645264847512, 6 epochs, take 27 sec.
Epoch time: 11m 3s
------------------------------
Epoch 22/99 (max_len=7, data=3387)
Train acc: 85.64 (abduce 99.56)
Hit samples:  3372  Ave length:  3.55
Symbols:  16 [(0, 612), (1, 737), (2, 692), (3, 725), (4, 741), (5, 727), (6, 738), (7, 752), (8, 732), (9, 707), (10, 1033), (11, 1035), (12, 793), (13, 928), (14, 689), (15, 333)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 91), ((1, 3, 1, 5, 3, -1, 5), 88), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 16)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 2), 16), 5), (((3, 8), 24), 4), (((6, 6), 36), 3), (((8, 9), 72), 3), (((4, 4), 16), 3), (((9, 6), 54), 3), (((6, 9), 54), 2), (((4, 3), 12), 2), (((7, 7), 49), 2), (((8, 4), 32), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.65
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.96
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 85.64 (abduce 87.36)
Hit samples:  2959  Ave length:  3.38
Symbols:  16 [(0, 583), (1, 686), (2, 597), (3, 589), (4, 602), (5, 598), (6, 605), (7, 617), (8, 606), (9, 575), (10, 898), (11, 970), (12, 358), (13, 873), (14, 555), (15, 285)]
Head:  [((-1,), 1000), ((1, -1, 1), 990), ((1, 3, 1, -1, 3), 280), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 311), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 70), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2959 samples for 100 iterations, 0.9502850855256577, 6 epochs, take 27 sec.
Epoch time: 6m 4s
------------------------------
Epoch 23/99 (max_len=7, data=3387)
Train acc: 85.88 (abduce 99.59)
Hit samples:  3373  Ave length:  3.55
Symbols:  16 [(0, 612), (1, 740), (2, 694), (3, 724), (4, 739), (5, 729), (6, 738), (7, 752), (8, 731), (9, 706), (10, 1046), (11, 1029), (12, 775), (13, 942), (14, 689), (15, 335)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 372), ((2, 2, 5, 2, 2, -1, 5), 140), ((1, 3, 1, -1, 5, 3, 5), 91), ((1, 3, 1, 5, 3, -1, 5), 88), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 16)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 4), 16), 4), (((6, 2), 12), 3), (((7, 8), 56), 3), (((8, 7), 56), 3), (((9, 1), 9), 3), (((7, 5), 35), 2), (((3, 9), 27), 2), (((5, 7), 35), 2), (((2, 9), 18), 2), (((9, 9), 81), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.65
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.96
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 85.88 (abduce 87.39)
Hit samples:  2960  Ave length:  3.38
Symbols:  16 [(0, 583), (1, 687), (2, 597), (3, 589), (4, 602), (5, 598), (6, 604), (7, 617), (8, 607), (9, 576), (10, 900), (11, 970), (12, 355), (13, 875), (14, 555), (15, 285)]
Head:  [((-1,), 1000), ((1, -1, 1), 991), ((1, 3, 1, -1, 3), 280), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 311), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 70), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2960 samples for 100 iterations, 0.9498, 6 epochs, take 27 sec.
Epoch time: 6m 6s
------------------------------
Epoch 24/99 (max_len=7, data=3387)
Train acc: 85.97 (abduce 99.50)
Hit samples:  3370  Ave length:  3.55
Symbols:  16 [(0, 612), (1, 738), (2, 697), (3, 722), (4, 737), (5, 728), (6, 735), (7, 748), (8, 730), (9, 709), (10, 1068), (11, 1034), (12, 756), (13, 926), (14, 686), (15, 334)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 372), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 91), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 16)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 7), 56), 3), (((7, 5), 35), 3), (((5, 6), 30), 3), (((4, 7), 28), 3), (((3, 7), 21), 3), (((9, 1), 9), 2), (((9, 4), 36), 2), (((8, 4), 32), 2), (((3, 4), 12), 2), (((5, 5), 25), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.91
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.65
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.96
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 85.97 (abduce 87.45)
Hit samples:  2962  Ave length:  3.38
Symbols:  16 [(0, 584), (1, 687), (2, 598), (3, 589), (4, 602), (5, 600), (6, 603), (7, 618), (8, 608), (9, 577), (10, 903), (11, 968), (12, 355), (13, 878), (14, 557), (15, 285)]
Head:  [((-1,), 1000), ((1, -1, 1), 991), ((1, 3, 1, -1, 3), 281), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 312), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 70), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2962 samples for 100 iterations, 0.949460647223332, 6 epochs, take 27 sec.
Epoch time: 6m 5s
------------------------------
Epoch 25/99 (max_len=7, data=3387)
Train acc: 86.00 (abduce 99.47)
Hit samples:  3369  Ave length:  3.55
Symbols:  16 [(0, 613), (1, 734), (2, 695), (3, 722), (4, 739), (5, 726), (6, 735), (7, 749), (8, 732), (9, 708), (10, 1035), (11, 1034), (12, 780), (13, 933), (14, 682), (15, 336)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 91), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 16)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((3, 4), 12), 3), (((8, 7), 56), 3), (((5, 2), 10), 3), (((7, 5), 35), 3), (((8, 2), 16), 3), (((7, 3), 21), 3), (((5, 5), 25), 2), (((8, 8), 64), 2), (((9, 6), 54), 2), (((9, 9), 81), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.65
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.96
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 86.00 (abduce 87.45)
Hit samples:  2962  Ave length:  3.38
Symbols:  16 [(0, 584), (1, 687), (2, 598), (3, 589), (4, 602), (5, 600), (6, 603), (7, 618), (8, 608), (9, 577), (10, 903), (11, 968), (12, 355), (13, 878), (14, 557), (15, 285)]
Head:  [((-1,), 1000), ((1, -1, 1), 991), ((1, 3, 1, -1, 3), 281), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 312), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 70), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2962 samples for 100 iterations, 0.949460647223332, 6 epochs, take 26 sec.
Epoch time: 6m 7s
------------------------------
Epoch 26/99 (max_len=7, data=3387)
Train acc: 86.03 (abduce 99.53)
Hit samples:  3371  Ave length:  3.55
Symbols:  16 [(0, 612), (1, 740), (2, 696), (3, 722), (4, 741), (5, 731), (6, 736), (7, 746), (8, 730), (9, 705), (10, 1036), (11, 1034), (12, 786), (13, 930), (14, 687), (15, 335)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 91), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 16)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 7), 56), 4), (((8, 8), 64), 3), (((9, 8), 72), 3), (((3, 7), 21), 3), (((5, 3), 15), 3), (((8, 2), 16), 3), (((3, 8), 24), 3), (((4, 4), 16), 2), (((5, 2), 10), 2), (((10, 7), 70), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.65
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.96
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 86.03 (abduce 87.45)
Hit samples:  2962  Ave length:  3.38
Symbols:  16 [(0, 584), (1, 687), (2, 598), (3, 589), (4, 603), (5, 600), (6, 603), (7, 618), (8, 608), (9, 576), (10, 902), (11, 967), (12, 355), (13, 880), (14, 557), (15, 285)]
Head:  [((-1,), 1000), ((1, -1, 1), 991), ((1, 3, 1, -1, 3), 281), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 312), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 70), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2962 samples for 100 iterations, 0.949460647223332, 6 epochs, take 27 sec.
Epoch time: 6m 4s
------------------------------
Epoch 27/99 (max_len=7, data=3387)
Train acc: 86.06 (abduce 99.47)
Hit samples:  3369  Ave length:  3.55
Symbols:  16 [(0, 613), (1, 735), (2, 695), (3, 722), (4, 740), (5, 727), (6, 734), (7, 746), (8, 733), (9, 708), (10, 1036), (11, 1026), (12, 784), (13, 936), (14, 685), (15, 333)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 91), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 16)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((3, 4), 12), 3), (((9, 1), 9), 3), (((7, 5), 35), 3), (((3, 8), 24), 3), (((5, 2), 10), 3), (((9, 8), 72), 2), (((3, 6), 18), 2), (((4, 3), 12), 2), (((9, 3), 27), 2), (((5, 8), 40), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.65
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.96
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 86.06 (abduce 87.45)
Hit samples:  2962  Ave length:  3.38
Symbols:  16 [(0, 584), (1, 687), (2, 598), (3, 589), (4, 603), (5, 600), (6, 603), (7, 618), (8, 608), (9, 576), (10, 902), (11, 967), (12, 355), (13, 880), (14, 557), (15, 285)]
Head:  [((-1,), 1000), ((1, -1, 1), 991), ((1, 3, 1, -1, 3), 281), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 312), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 70), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2962 samples for 100 iterations, 0.949460647223332, 6 epochs, take 26 sec.
Epoch time: 6m 4s
------------------------------
Epoch 28/99 (max_len=7, data=3387)
Train acc: 86.06 (abduce 99.50)
Hit samples:  3370  Ave length:  3.55
Symbols:  16 [(0, 613), (1, 735), (2, 691), (3, 722), (4, 741), (5, 727), (6, 735), (7, 751), (8, 733), (9, 708), (10, 1039), (11, 1026), (12, 782), (13, 937), (14, 684), (15, 334)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 91), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 16)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 6), 36), 4), (((8, 2), 16), 4), (((4, 4), 16), 4), (((4, 7), 28), 3), (((2, 9), 18), 3), (((9, 4), 36), 3), (((6, 3), 18), 2), (((5, 9), 45), 2), (((6, 5), 30), 2), (((5, 2), 10), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.65
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.96
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 86.06 (abduce 87.45)
Hit samples:  2962  Ave length:  3.38
Symbols:  16 [(0, 584), (1, 687), (2, 598), (3, 589), (4, 603), (5, 600), (6, 603), (7, 618), (8, 608), (9, 576), (10, 902), (11, 967), (12, 355), (13, 880), (14, 557), (15, 285)]
Head:  [((-1,), 1000), ((1, -1, 1), 991), ((1, 3, 1, -1, 3), 281), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 312), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 70), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2962 samples for 100 iterations, 0.949460647223332, 6 epochs, take 27 sec.
Epoch time: 6m 7s
------------------------------
Epoch 29/99 (max_len=7, data=3387)
Train acc: 86.12 (abduce 99.50)
Hit samples:  3370  Ave length:  3.55
Symbols:  16 [(0, 613), (1, 738), (2, 693), (3, 722), (4, 741), (5, 729), (6, 735), (7, 749), (8, 731), (9, 706), (10, 1041), (11, 1026), (12, 777), (13, 939), (14, 683), (15, 335)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 91), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 16)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 6), 36), 4), (((7, 5), 35), 3), (((5, 2), 10), 3), (((3, 8), 24), 3), (((2, 9), 18), 3), (((3, 7), 21), 3), (((3, 6), 18), 3), (((8, 9), 72), 3), (((8, 5), 40), 2), (((3, 2), 6), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.65
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.96
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 86.12 (abduce 87.45)
Hit samples:  2962  Ave length:  3.38
Symbols:  16 [(0, 584), (1, 687), (2, 598), (3, 589), (4, 603), (5, 600), (6, 603), (7, 618), (8, 608), (9, 576), (10, 902), (11, 967), (12, 354), (13, 881), (14, 557), (15, 285)]
Head:  [((-1,), 1000), ((1, -1, 1), 991), ((1, 3, 1, -1, 3), 281), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 312), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 70), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2962 samples for 100 iterations, 0.9493607670795046, 6 epochs, take 26 sec.
Percentage of None result: 45.12
              precision    recall  f1-score   support

           0       0.97      0.99      0.98      4016
           1       0.75      0.96      0.84      5142
           2       0.99      0.97      0.98      5321
           3       1.00      0.98      0.99      5241
           4       0.99      0.99      0.99      5279
           5       1.00      0.98      0.99      5383
           6       1.00      0.97      0.99      5427
           7       0.98      0.95      0.96      5462
           8       0.99      1.00      1.00      5453
           9       0.96      1.00      0.98      5476
           +       0.97      0.98      0.98     13199
           -       0.99      0.99      0.99     10734
           *       0.99      0.97      0.98     13491
           /       0.96      1.00      0.98      9876
           (       0.76      0.93      0.84     21081
           )       0.99      0.69      0.81     21081

    accuracy                           0.93    141662
   macro avg       0.95      0.96      0.95    141662
weighted avg       0.94      0.93      0.93    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (     )
0  280    0    0    0    0    0    0    0    3    0    0    0    0    0     0     0
1    0  347    0    1    1    0    0    1    0    0    0    1    0    0     8     3
2    1    3  364    0    0    1    1    0    0    1    0    0    1    0     1     0
3    0    0    2  361    0    0    0    0    0    5    0    0    0    0     0     0
4    0    0    0    0  368    0    0    0    0    0    4    0    0    0     0     0
5    7    0    0    0    0  372    0    0    0    0    0    0    0    0     0     0
6    0    0    0    0    0    0  373    0    0    9    0    0    0    0     0     0
7    0    0    0    0    0    0    0  364    0    0   20    0    0    0     0     0
8    0    0    0    0    0    0    0    0  384    0    0    0    0    0     0     0
9    0    0    0    0    0    0    0    0    0  386    0    0    0    0     0     0
+    0    0    0    0    3    0    0    0    0    0  914   10    0    0     0     3
-    0    2    0    0    0    0    0    0    0    0    2  752    0    0     0     0
*    0    0    0    0    0    0    0    0    0    0    0    0  920   31     0     0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  697     0     0
(    0   89    0    0    0    0    0    0    0    0    0    0    7    0  1391     0
)    0   22    0    0    0    0    0    7    0    0    0    0    0    0   435  1022
result accuracy by length:
1 ( 2%) 98.00
3 ( 2%) 74.00
5 ( 2%) 49.61
7 ( 4%) 39.74
9 ( 4%) 33.67
11 ( 3%) 30.11
13 ( 4%) 35.19
15 ( 4%) 27.23
17 ( 4%) 25.73
19 ( 4%) 24.51
21 ( 4%) 24.75
23 ( 4%) 21.95
25 ( 4%) 17.50
27 ( 4%) 19.21
29 ( 3%) 18.32
31 ( 3%) 12.50
33 ( 2%) 15.71
35 ( 2%) 11.64
37 ( 2%) 18.80
39 ( 3%) 13.82
41 ( 3%) 10.07
43 ( 2%) 10.14
45 ( 2%) 11.61
47 ( 2%) 10.61
49 ( 2%)  7.75
51 ( 2%) 11.36
53 ( 2%)  8.96
55 ( 2%)  5.04
57 ( 2%)  9.09
59 ( 2%) 11.21
61 ( 1%)  1.56
63 ( 0%)  5.71
65 ( 0%)  0.00
67 ( 0%) 66.67
result accuracy by symbol:
( (91%) 18.87
) (91%) 18.87
* (87%) 14.79
+ (84%) 18.90
- (77%) 21.13
/ (76%) 19.87
0 (52%) 21.60
1 (60%) 18.67
2 (61%) 17.41
3 (62%) 17.93
4 (61%) 16.92
5 (62%) 17.58
6 (62%) 17.15
7 (63%) 16.76
8 (64%) 16.66
9 (63%) 17.53
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 90.00
2 ( 0%) 100.00
3 ( 0%) 100.00
4 ( 0%) 100.00
5 ( 0%) 90.00
6 ( 0%) 100.00
7 ( 0%) 100.00
8 ( 0%) 100.00
9 ( 0%) 100.00
result accuracy by result:
0 (21%) 44.10
1 (10%) 29.78
2 ( 4%) 39.39
3 ( 2%) 43.70
4 ( 2%) 32.33
5 ( 2%) 44.00
6 ( 2%) 38.26
7 ( 2%) 40.71
8 ( 2%) 33.33
9 ( 1%) 40.70
result accuracy by generalization:
1 (22.45%) 48.09
2 (22.96%) 37.16
3 (22.53%)  1.72
4 (15.82%) 16.26
5 (16.24%)  3.14
error cases:
1 ( [-1] [-1] 1 None
5 0 [-1] [-1] 5 0
5*9 5*9 [1, -1, 1] [1, -1, 1] 45 0
9*1 9*1 [1, -1, 1] [1, -1, 1] 9 0
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 0
6*4 6*4 [1, -1, 1] [1, -1, 1] 24 0
3*5 3*5 [1, -1, 1] [1, -1, 1] 15 0
0+3 0+2 [1, -1, 1] [1, -1, 1] 3 2
5*5 5*5 [1, -1, 1] [1, -1, 1] 25 0
2*4 2*4 [1, -1, 1] [1, -1, 1] 8 4
5*3 5*3 [1, -1, 1] [1, -1, 1] 15 0
7*9 7*9 [1, -1, 1] [1, -1, 1] 63 0
8*1 8*1 [1, -1, 1] [1, -1, 1] 8 0
6*1 6*1 [1, -1, 1] [1, -1, 1] 6 0
3*2 3*2 [1, -1, 1] [1, -1, 1] 6 0
3*3 3*3 [1, -1, 1] [1, -1, 1] 9 0
6*3 6/3 [1, -1, 1] [1, -1, 1] 18 2
8*2 8*2 [1, -1, 1] [1, -1, 1] 16 0
7*7 7*7 [1, -1, 1] [1, -1, 1] 49 0
3-2 3-1 [1, -1, 1] [1, -1, 1] 1 2
val (Perception Acc=93.02, Head Acc=100.00, Result Acc=22.80)
Epoch time: 7m 7s
------------------------------
Epoch 30/99 (max_len=7, data=3387)
Train acc: 86.18 (abduce 99.47)
Hit samples:  3369  Ave length:  3.55
Symbols:  16 [(0, 613), (1, 735), (2, 692), (3, 722), (4, 743), (5, 728), (6, 735), (7, 751), (8, 731), (9, 703), (10, 1035), (11, 1017), (12, 782), (13, 948), (14, 678), (15, 338)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 370), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 91), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 16)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 2), 16), 4), (((2, 7), 14), 3), (((5, 3), 15), 3), (((9, 1), 9), 3), (((3, 7), 21), 3), (((5, 7), 35), 3), (((7, 4), 28), 3), (((2, 6), 12), 3), (((6, 2), 12), 3), (((6, 3), 18), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.65
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.96
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 86.18 (abduce 87.45)
Hit samples:  2962  Ave length:  3.38
Symbols:  16 [(0, 584), (1, 687), (2, 598), (3, 589), (4, 603), (5, 600), (6, 603), (7, 618), (8, 608), (9, 576), (10, 902), (11, 962), (12, 354), (13, 886), (14, 557), (15, 285)]
Head:  [((-1,), 1000), ((1, -1, 1), 991), ((1, 3, 1, -1, 3), 281), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 312), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 70), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2962 samples for 100 iterations, 0.9498601677986416, 6 epochs, take 26 sec.
Epoch time: 6m 4s
------------------------------
Epoch 31/99 (max_len=7, data=3387)
Train acc: 86.21 (abduce 99.50)
Hit samples:  3370  Ave length:  3.55
Symbols:  16 [(0, 613), (1, 737), (2, 692), (3, 722), (4, 741), (5, 728), (6, 735), (7, 750), (8, 730), (9, 708), (10, 1046), (11, 1019), (12, 774), (13, 945), (14, 683), (15, 337)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 372), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 91), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 16)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((7, 5), 35), 4), (((2, 7), 14), 3), (((4, 5), 20), 3), (((5, 8), 40), 3), (((8, 7), 56), 3), (((5, 4), 20), 3), (((9, 4), 36), 3), (((4, 2), 8), 2), (((9, 2), 18), 2), (((4, 7), 28), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.65
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.96
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 86.21 (abduce 87.45)
Hit samples:  2962  Ave length:  3.38
Symbols:  16 [(0, 584), (1, 687), (2, 598), (3, 589), (4, 603), (5, 600), (6, 603), (7, 618), (8, 608), (9, 576), (10, 902), (11, 962), (12, 354), (13, 886), (14, 557), (15, 285)]
Head:  [((-1,), 1000), ((1, -1, 1), 991), ((1, 3, 1, -1, 3), 281), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 312), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 70), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2962 samples for 100 iterations, 0.9498601677986416, 6 epochs, take 27 sec.
Epoch time: 6m 3s
------------------------------
Epoch 32/99 (max_len=7, data=3387)
Train acc: 86.21 (abduce 99.50)
Hit samples:  3370  Ave length:  3.55
Symbols:  16 [(0, 613), (1, 735), (2, 693), (3, 722), (4, 741), (5, 727), (6, 734), (7, 749), (8, 733), (9, 709), (10, 1046), (11, 1017), (12, 778), (13, 943), (14, 685), (15, 335)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 372), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 91), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 16)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((5, 3), 15), 4), (((8, 4), 32), 3), (((3, 8), 24), 3), (((7, 5), 35), 3), (((5, 9), 45), 3), (((4, 3), 12), 2), (((5, 5), 25), 2), (((6, 6), 36), 2), (((9, 6), 54), 2), (((0, 8), 48), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.65
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.96
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 86.21 (abduce 87.45)
Hit samples:  2962  Ave length:  3.38
Symbols:  16 [(0, 584), (1, 687), (2, 598), (3, 589), (4, 603), (5, 600), (6, 603), (7, 618), (8, 608), (9, 576), (10, 902), (11, 962), (12, 354), (13, 886), (14, 557), (15, 285)]
Head:  [((-1,), 1000), ((1, -1, 1), 991), ((1, 3, 1, -1, 3), 281), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 312), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 70), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2962 samples for 100 iterations, 0.9498601677986416, 6 epochs, take 26 sec.
Epoch time: 6m 7s
------------------------------
Epoch 33/99 (max_len=7, data=3387)
Train acc: 86.18 (abduce 99.53)
Hit samples:  3371  Ave length:  3.55
Symbols:  16 [(0, 613), (1, 738), (2, 697), (3, 722), (4, 743), (5, 726), (6, 735), (7, 748), (8, 732), (9, 705), (10, 1038), (11, 1019), (12, 785), (13, 944), (14, 686), (15, 336)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 372), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 91), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 16)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 3), 12), 4), (((9, 1), 9), 4), (((9, 9), 81), 3), (((8, 7), 56), 3), (((3, 8), 24), 3), (((2, 9), 18), 3), (((3, 6), 18), 2), (((8, 4), 32), 2), (((3, 1), 3), 2), (((5, 2), 10), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.65
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.96
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 86.18 (abduce 87.45)
Hit samples:  2962  Ave length:  3.38
Symbols:  16 [(0, 584), (1, 687), (2, 598), (3, 589), (4, 603), (5, 600), (6, 603), (7, 618), (8, 608), (9, 576), (10, 902), (11, 962), (12, 354), (13, 886), (14, 557), (15, 285)]
Head:  [((-1,), 1000), ((1, -1, 1), 991), ((1, 3, 1, -1, 3), 281), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 312), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 70), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2962 samples for 100 iterations, 0.9498601677986416, 6 epochs, take 27 sec.
Epoch time: 6m 6s
------------------------------
Epoch 34/99 (max_len=7, data=3387)
Train acc: 86.21 (abduce 99.56)
Hit samples:  3372  Ave length:  3.55
Symbols:  16 [(0, 612), (1, 737), (2, 693), (3, 724), (4, 742), (5, 727), (6, 735), (7, 751), (8, 732), (9, 709), (10, 1045), (11, 1019), (12, 779), (13, 945), (14, 689), (15, 337)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 374), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 91), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 16)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((3, 8), 24), 4), (((4, 3), 12), 4), (((7, 7), 49), 3), (((9, 4), 36), 3), (((9, 9), 81), 3), (((6, 2), 12), 3), (((4, 6), 24), 3), (((6, 3), 18), 3), (((7, 5), 35), 3), (((5, 4), 20), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.65
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.96
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 86.21 (abduce 87.48)
Hit samples:  2963  Ave length:  3.38
Symbols:  16 [(0, 584), (1, 687), (2, 598), (3, 591), (4, 604), (5, 600), (6, 603), (7, 618), (8, 608), (9, 576), (10, 903), (11, 962), (12, 354), (13, 887), (14, 559), (15, 285)]
Head:  [((-1,), 1000), ((1, -1, 1), 991), ((1, 3, 1, -1, 3), 281), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 313), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 70), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2963 samples for 100 iterations, 0.9497953887613534, 6 epochs, take 26 sec.
Epoch time: 6m 5s
------------------------------
Epoch 35/99 (max_len=7, data=3387)
Train acc: 86.21 (abduce 99.56)
Hit samples:  3372  Ave length:  3.55
Symbols:  16 [(0, 612), (1, 735), (2, 697), (3, 724), (4, 742), (5, 727), (6, 735), (7, 747), (8, 732), (9, 711), (10, 1043), (11, 1017), (12, 784), (13, 944), (14, 690), (15, 334)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 91), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 16)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 4), (((5, 8), 40), 3), (((8, 7), 56), 3), (((6, 6), 36), 3), (((7, 7), 49), 2), (((3, 6), 18), 2), (((8, 4), 32), 2), (((4, 8), 32), 2), (((7, 9), 63), 2), (((6, 3), 18), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.65
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.96
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 86.21 (abduce 87.48)
Hit samples:  2963  Ave length:  3.38
Symbols:  16 [(0, 584), (1, 687), (2, 598), (3, 591), (4, 604), (5, 600), (6, 603), (7, 618), (8, 608), (9, 576), (10, 903), (11, 962), (12, 354), (13, 887), (14, 559), (15, 285)]
Head:  [((-1,), 1000), ((1, -1, 1), 991), ((1, 3, 1, -1, 3), 281), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 313), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 70), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2963 samples for 100 iterations, 0.9497953887613534, 6 epochs, take 27 sec.
Epoch time: 6m 3s
------------------------------
Epoch 36/99 (max_len=7, data=3387)
Train acc: 86.21 (abduce 99.59)
Hit samples:  3373  Ave length:  3.55
Symbols:  16 [(0, 612), (1, 738), (2, 694), (3, 725), (4, 742), (5, 729), (6, 736), (7, 750), (8, 731), (9, 708), (10, 1043), (11, 1026), (12, 782), (13, 939), (14, 691), (15, 337)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 91), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 16)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((3, 6), 18), 3), (((8, 2), 16), 3), (((4, 5), 20), 3), (((7, 4), 28), 3), (((6, 6), 36), 3), (((7, 5), 35), 3), (((9, 6), 54), 3), (((5, 2), 10), 3), (((5, 5), 25), 2), (((3, 4), 12), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.65
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.96
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 86.21 (abduce 87.48)
Hit samples:  2963  Ave length:  3.38
Symbols:  16 [(0, 584), (1, 687), (2, 598), (3, 591), (4, 604), (5, 600), (6, 603), (7, 618), (8, 608), (9, 576), (10, 903), (11, 962), (12, 354), (13, 887), (14, 559), (15, 285)]
Head:  [((-1,), 1000), ((1, -1, 1), 991), ((1, 3, 1, -1, 3), 281), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 313), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 70), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2963 samples for 100 iterations, 0.9497953887613534, 6 epochs, take 27 sec.
Epoch time: 6m 4s
------------------------------
Epoch 37/99 (max_len=7, data=3387)
Train acc: 86.21 (abduce 99.56)
Hit samples:  3372  Ave length:  3.55
Symbols:  16 [(0, 613), (1, 739), (2, 697), (3, 723), (4, 744), (5, 726), (6, 734), (7, 748), (8, 731), (9, 707), (10, 1042), (11, 1019), (12, 784), (13, 943), (14, 690), (15, 336)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 374), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 91), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 16)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 6), 36), 5), (((6, 2), 12), 4), (((6, 9), 54), 3), (((8, 4), 32), 3), (((8, 2), 16), 3), (((4, 3), 12), 2), (((7, 8), 56), 2), (((2, 9), 18), 2), (((8, 7), 56), 2), (((3, 8), 24), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.65
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.96
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 86.21 (abduce 87.48)
Hit samples:  2963  Ave length:  3.38
Symbols:  16 [(0, 584), (1, 687), (2, 598), (3, 591), (4, 604), (5, 600), (6, 603), (7, 618), (8, 608), (9, 576), (10, 903), (11, 962), (12, 354), (13, 887), (14, 559), (15, 285)]
Head:  [((-1,), 1000), ((1, -1, 1), 991), ((1, 3, 1, -1, 3), 281), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 313), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 70), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2963 samples for 100 iterations, 0.9497953887613534, 6 epochs, take 27 sec.
Epoch time: 6m 6s
------------------------------
Epoch 38/99 (max_len=7, data=3387)
Train acc: 86.21 (abduce 99.56)
Hit samples:  3372  Ave length:  3.55
Symbols:  16 [(0, 613), (1, 737), (2, 697), (3, 724), (4, 742), (5, 728), (6, 734), (7, 747), (8, 730), (9, 710), (10, 1038), (11, 1019), (12, 779), (13, 952), (14, 690), (15, 336)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 374), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 91), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 16)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((5, 2), 10), 3), (((4, 7), 28), 3), (((8, 2), 16), 3), (((6, 3), 18), 3), (((7, 4), 28), 3), (((6, 6), 36), 3), (((9, 5), 45), 2), (((5, 8), 40), 2), (((6, 8), 48), 2), (((3, 8), 24), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.65
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.96
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 86.21 (abduce 87.48)
Hit samples:  2963  Ave length:  3.38
Symbols:  16 [(0, 584), (1, 687), (2, 598), (3, 591), (4, 604), (5, 600), (6, 603), (7, 618), (8, 608), (9, 576), (10, 903), (11, 962), (12, 354), (13, 887), (14, 559), (15, 285)]
Head:  [((-1,), 1000), ((1, -1, 1), 991), ((1, 3, 1, -1, 3), 281), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 313), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 70), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2963 samples for 100 iterations, 0.9497953887613534, 6 epochs, take 27 sec.
Epoch time: 6m 7s
------------------------------
Epoch 39/99 (max_len=7, data=3387)
Train acc: 86.21 (abduce 99.59)
Hit samples:  3373  Ave length:  3.55
Symbols:  16 [(0, 613), (1, 741), (2, 694), (3, 724), (4, 743), (5, 727), (6, 735), (7, 749), (8, 733), (9, 706), (10, 1043), (11, 1019), (12, 785), (13, 943), (14, 691), (15, 337)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 374), ((2, 2, 5, 2, 2, -1, 5), 140), ((1, 3, 1, -1, 5, 3, 5), 91), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 16)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 3), 18), 3), (((8, 8), 64), 3), (((3, 6), 18), 3), (((8, 4), 32), 3), (((5, 6), 30), 3), (((8, 7), 56), 3), (((9, 1), 9), 3), (((7, 6), 42), 3), (((8, 3), 24), 2), (((6, 8), 48), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.65
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.96
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 86.21 (abduce 87.48)
Hit samples:  2963  Ave length:  3.38
Symbols:  16 [(0, 584), (1, 687), (2, 598), (3, 591), (4, 604), (5, 600), (6, 603), (7, 618), (8, 608), (9, 576), (10, 903), (11, 962), (12, 354), (13, 887), (14, 559), (15, 285)]
Head:  [((-1,), 1000), ((1, -1, 1), 991), ((1, 3, 1, -1, 3), 281), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 313), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 70), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2963 samples for 100 iterations, 0.9497953887613534, 6 epochs, take 27 sec.
Percentage of None result: 47.24
              precision    recall  f1-score   support

           0       0.97      0.99      0.98      4016
           1       0.71      0.96      0.81      5142
           2       1.00      0.97      0.99      5321
           3       1.00      0.98      0.99      5241
           4       0.96      0.99      0.98      5279
           5       1.00      0.98      0.99      5383
           6       1.00      0.97      0.99      5427
           7       0.98      0.97      0.98      5462
           8       0.99      1.00      1.00      5453
           9       0.98      1.00      0.99      5476
           +       0.98      0.99      0.98     13199
           -       0.99      1.00      0.99     10734
           *       0.99      0.97      0.98     13491
           /       0.96      1.00      0.98      9876
           (       0.77      0.94      0.85     21081
           )       0.99      0.68      0.81     21081

    accuracy                           0.93    141662
   macro avg       0.95      0.96      0.95    141662
weighted avg       0.94      0.93      0.93    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (     )
0  280    0    0    0    0    0    0    0    3    0    0    0    0    0     0     0
1    0  348    1    0    1    0    0    0    0    0    1    0    0    0     7     3
2    1    2  365    0    0    0    1    1    0    0    0    0    2    0     1     0
3    0    0    0  364    0    0    0    0    0    5    0    0    0    0     0     0
4    0    0    0    0  368    0    0    0    0    0    4    0    0    0     0     0
5    7    0    0    0    0  372    0    0    0    0    0    0    0    0     0     0
6    0    0    0    0    9    0  373    0    0    0    0    0    0    0     0     0
7    0    0    0    0    0    0    0  375    0    0   10    0    0    0     0     0
8    0    0    0    0    0    0    0    0  384    0    0    0    0    0     0     0
9    0    0    0    0    0    0    0    0    0  386    0    0    0    0     0     0
+    0    0    0    0    3    0    0    0    0    0  918    6    0    0     0     3
-    0    0    0    0    0    0    0    0    0    0    2  755    0    0     0     0
*    0    0    0    0    0    0    0    0    0    0    0    0  920   31     0     0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  697     0     0
(    0   82    0    0    0    0    0    0    0    0    0    0    7    0  1398     0
)    0   60    0    0    0    0    0    7    0    0    0    0    0    0   405  1014
result accuracy by length:
1 ( 2%) 98.00
3 ( 2%) 76.00
5 ( 2%) 51.16
7 ( 4%) 39.30
9 ( 4%) 33.67
11 ( 3%) 30.68
13 ( 4%) 35.19
15 ( 4%) 26.73
17 ( 4%) 26.70
19 ( 4%) 22.55
21 ( 4%) 24.24
23 ( 4%) 22.44
25 ( 4%) 17.50
27 ( 4%) 18.23
29 ( 3%) 18.32
31 ( 3%) 11.90
33 ( 2%) 14.29
35 ( 2%) 11.64
37 ( 2%) 15.38
39 ( 3%) 12.50
41 ( 3%)  9.40
43 ( 2%) 10.14
45 ( 2%)  9.82
47 ( 2%)  9.09
49 ( 2%)  8.45
51 ( 2%)  9.85
53 ( 2%)  6.72
55 ( 2%)  6.72
57 ( 2%)  5.59
59 ( 2%) 10.28
61 ( 1%)  1.56
63 ( 0%) 11.43
65 ( 0%)  0.00
67 ( 0%) 33.33
result accuracy by symbol:
( (91%) 18.26
) (91%) 18.26
* (87%) 14.09
+ (84%) 18.35
- (77%) 20.63
/ (76%) 19.09
0 (52%) 21.13
1 (60%) 17.94
2 (61%) 16.94
3 (62%) 17.25
4 (61%) 16.32
5 (62%) 16.73
6 (62%) 16.56
7 (63%) 16.44
8 (64%) 16.31
9 (63%) 16.89
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 90.00
2 ( 0%) 100.00
3 ( 0%) 100.00
4 ( 0%) 100.00
5 ( 0%) 90.00
6 ( 0%) 100.00
7 ( 0%) 100.00
8 ( 0%) 100.00
9 ( 0%) 100.00
result accuracy by result:
0 (21%) 42.48
1 (10%) 29.03
2 ( 4%) 39.90
3 ( 2%) 44.44
4 ( 2%) 27.82
5 ( 2%) 44.00
6 ( 2%) 38.26
7 ( 2%) 42.48
8 ( 2%) 31.62
9 ( 1%) 44.19
result accuracy by generalization:
1 (22.45%) 48.82
2 (22.96%) 35.64
3 (22.53%)  1.81
4 (15.82%) 14.97
5 (16.24%)  2.64
error cases:
1 ( [-1] [-1] 1 None
5 0 [-1] [-1] 5 0
5*9 5*9 [1, -1, 1] [1, -1, 1] 45 0
9*1 9*1 [1, -1, 1] [1, -1, 1] 9 0
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 0
6*4 6*4 [1, -1, 1] [1, -1, 1] 24 0
3*5 3*5 [1, -1, 1] [1, -1, 1] 15 0
5*5 5*5 [1, -1, 1] [1, -1, 1] 25 0
2*4 2*4 [1, -1, 1] [1, -1, 1] 8 4
5*3 5*3 [1, -1, 1] [1, -1, 1] 15 0
7*9 7*9 [1, -1, 1] [1, -1, 1] 63 0
8*1 8*1 [1, -1, 1] [1, -1, 1] 8 0
6*1 6*1 [1, -1, 1] [1, -1, 1] 6 0
3*2 3*2 [1, -1, 1] [1, -1, 1] 6 0
3*3 3*3 [1, -1, 1] [1, -1, 1] 9 0
6*3 6/3 [1, -1, 1] [1, -1, 1] 18 2
8*2 8*2 [1, -1, 1] [1, -1, 1] 16 0
7*7 7*7 [1, -1, 1] [1, -1, 1] 49 0
3-2 3-1 [1, -1, 1] [1, -1, 1] 1 2
8*3 8*3 [1, -1, 1] [1, -1, 1] 24 0
val (Perception Acc=93.23, Head Acc=100.00, Result Acc=22.35)
Epoch time: 6m 55s
------------------------------
Epoch 40/99 (max_len=11, data=4683)
Train acc: 77.56 (abduce 96.22)
Hit samples:  4506  Ave length:  5.16
Symbols:  16 [(0, 1043), (1, 1241), (2, 1224), (3, 1260), (4, 1238), (5, 1237), (6, 1242), (7, 1287), (8, 1203), (9, 1200), (10, 2171), (11, 2046), (12, 1522), (13, 1924), (14, 2271), (15, 1157)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 91), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 134), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 103)]
Semantics: 16/11/3 (total/solved/learn).
Symbol-10 (int -> int -> int), Samples: 100,  [(((0, 7), 8), 2), (((1, 0), 0), 2), (((0, 9), 57), 2), (((6, 9), 54), 1), (((12, 9), 30), 1), (((6, 0), 50), 1), (((0, 0), 12), 1), (((3, 2), 21), 1), (((2, 0), 37), 1), (((2, 6), 13), 1)]
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 2), 16), 3), (((5, 3), 15), 3), (((9, 6), 54), 2), (((8, 5), 40), 2), (((4, 8), 32), 2), (((3, 1), 3), 2), (((7, 7), 49), 2), (((5, 4), 20), 2), (((5, 8), 40), 2), (((4, 6), 24), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 4), (((8, 0), 1), 4), (((5, 0), 1), 3), (((0, 4), 4), 2), (((4, 0), 1), 2), (((2, 1), 1), 2), (((0, 1), 36), 2), (((0, 6), 3), 2), (((0, 8), 1), 2), (((6, 0), 1), 2)]
Update grammar with invented programs and set frontiers to none.
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.90
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.76
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.93
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 77.56 (abduce 85.14)
Hit samples:  3987  Ave length:  5.08
Symbols:  16 [(0, 1032), (1, 1163), (2, 1070), (3, 1068), (4, 1029), (5, 1051), (6, 1052), (7, 1092), (8, 1026), (9, 1005), (10, 1936), (11, 1960), (12, 816), (13, 1889), (14, 2010), (15, 1038)]
Head:  [((-1,), 1000), ((1, -1, 1), 991), ((1, 3, 1, -1, 3), 281), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 313), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 98), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 3987 samples for 100 iterations, 0.9403567722488512, 3 epochs, take 26 sec.
Epoch time: 13m 1s
------------------------------
Epoch 41/99 (max_len=11, data=4683)
Train acc: 79.47 (abduce 97.35)
Hit samples:  4559  Ave length:  5.23
Symbols:  16 [(0, 1073), (1, 1281), (2, 1239), (3, 1263), (4, 1261), (5, 1254), (6, 1273), (7, 1326), (8, 1234), (9, 1212), (10, 2189), (11, 2090), (12, 1617), (13, 1959), (14, 2363), (15, 1187)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 372), ((2, 2, 5, 2, 2, -1, 5), 133), ((1, 3, 1, -1, 5, 3, 5), 91), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 138), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 108), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((7, 5), 35), 4), (((3, 1), 3), 4), (((4, 3), 12), 3), (((3, 4), 12), 3), (((9, 1), 9), 3), (((9, 4), 36), 3), (((4, 8), 32), 3), (((5, 2), 10), 2), (((0, 1), 0), 2), (((7, 7), 49), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 4), (((8, 0), 1), 4), (((3, 0), 1), 3), (((6, 0), 1), 3), (((0, 8), 1), 2), (((0, 1), 36), 2), (((0, 4), 4), 2), (((0, 7), 8), 2), (((7, 0), 1), 2), (((0, 8), 3), 2)]
Update grammar with invented programs and set frontiers to none.
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.91
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.76
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 79.47 (abduce 85.37)
Hit samples:  3998  Ave length:  5.09
Symbols:  16 [(0, 1034), (1, 1177), (2, 1072), (3, 1073), (4, 1032), (5, 1054), (6, 1056), (7, 1095), (8, 1037), (9, 1002), (10, 1939), (11, 1961), (12, 837), (13, 1897), (14, 2026), (15, 1042)]
Head:  [((-1,), 1000), ((1, -1, 1), 991), ((1, 3, 1, -1, 3), 283), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 313), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 3998 samples for 100 iterations, 0.9406904691649454, 3 epochs, take 26 sec.
Epoch time: 12m 49s
------------------------------
Epoch 42/99 (max_len=11, data=4683)
Train acc: 80.85 (abduce 98.31)
Hit samples:  4604  Ave length:  5.27
Symbols:  16 [(0, 1096), (1, 1309), (2, 1264), (3, 1290), (4, 1264), (5, 1271), (6, 1287), (7, 1340), (8, 1254), (9, 1225), (10, 2236), (11, 2126), (12, 1641), (13, 1987), (14, 2441), (15, 1223)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 374), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 142), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 110), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 97)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((9, 5), 45), 4), (((8, 5), 40), 3), (((6, 7), 42), 3), (((9, 8), 72), 3), (((8, 8), 64), 2), (((9, 3), 27), 2), (((9, 2), 18), 2), (((4, 4), 16), 2), (((6, 3), 18), 2), (((6, 6), 36), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((8, 0), 1), 4), (((1, 0), 1), 4), (((0, 7), 8), 3), (((5, 0), 1), 3), (((6, 0), 1), 3), (((0, 6), 3), 2), (((0, 8), 1), 2), (((2, 0), 1), 2), (((7, 0), 1), 2), (((5, 2), 10), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.77
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 80.85 (abduce 85.52)
Hit samples:  4005  Ave length:  5.09
Symbols:  16 [(0, 1035), (1, 1186), (2, 1079), (3, 1076), (4, 1032), (5, 1055), (6, 1057), (7, 1099), (8, 1038), (9, 1004), (10, 1945), (11, 1964), (12, 845), (13, 1902), (14, 2036), (15, 1048)]
Head:  [((-1,), 1000), ((1, -1, 1), 992), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 314), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 4005 samples for 100 iterations, 0.9402970442625361, 3 epochs, take 26 sec.
Epoch time: 7m 38s
------------------------------
Epoch 43/99 (max_len=11, data=4683)
Train acc: 81.17 (abduce 98.59)
Hit samples:  4617  Ave length:  5.28
Symbols:  16 [(0, 1099), (1, 1313), (2, 1276), (3, 1303), (4, 1271), (5, 1276), (6, 1287), (7, 1342), (8, 1255), (9, 1230), (10, 2257), (11, 2129), (12, 1650), (13, 1997), (14, 2451), (15, 1243)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 374), ((2, 2, 5, 2, 2, -1, 5), 140), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 142), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 111), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 97)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 6), 24), 4), (((7, 4), 28), 3), (((0, 1), 2), 2), (((7, 8), 56), 2), (((4, 4), 16), 2), (((2, 9), 18), 2), (((7, 2), 14), 2), (((3, 7), 21), 2), (((3, 1), 3), 2), (((8, 3), 24), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 5), (((8, 0), 1), 4), (((3, 0), 1), 3), (((2, 0), 1), 3), (((6, 0), 1), 3), (((0, 7), 8), 3), (((0, 6), 3), 2), (((0, 8), 3), 2), (((4, 0), 1), 2), (((11, 0), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.91
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.77
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 81.17 (abduce 85.59)
Hit samples:  4008  Ave length:  5.09
Symbols:  16 [(0, 1035), (1, 1187), (2, 1080), (3, 1076), (4, 1033), (5, 1054), (6, 1060), (7, 1098), (8, 1039), (9, 1007), (10, 1951), (11, 1963), (12, 845), (13, 1902), (14, 2038), (15, 1052)]
Head:  [((-1,), 1000), ((1, -1, 1), 993), ((1, 3, 1, -1, 3), 283), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 314), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 4008 samples for 100 iterations, 0.940205680705191, 3 epochs, take 26 sec.
Epoch time: 7m 39s
------------------------------
Epoch 44/99 (max_len=11, data=4683)
Train acc: 81.38 (abduce 98.63)
Hit samples:  4619  Ave length:  5.28
Symbols:  16 [(0, 1103), (1, 1320), (2, 1274), (3, 1300), (4, 1267), (5, 1278), (6, 1290), (7, 1341), (8, 1260), (9, 1228), (10, 2247), (11, 2140), (12, 1644), (13, 2011), (14, 2454), (15, 1238)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 142), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 111), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 98)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 2), 16), 4), (((4, 4), 16), 3), (((3, 6), 18), 3), (((7, 6), 42), 3), (((7, 9), 63), 2), (((5, 4), 20), 2), (((4, 7), 28), 2), (((5, 2), 10), 2), (((7, 7), 49), 2), (((9, 3), 27), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 5), (((8, 0), 1), 4), (((6, 0), 1), 3), (((3, 0), 1), 3), (((0, 7), 8), 3), (((2, 0), 1), 3), (((4, 0), 1), 2), (((0, 8), 1), 2), (((0, 4), 4), 2), (((5, 2), 10), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.77
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 81.38 (abduce 85.61)
Hit samples:  4009  Ave length:  5.1
Symbols:  16 [(0, 1035), (1, 1189), (2, 1080), (3, 1077), (4, 1033), (5, 1055), (6, 1061), (7, 1098), (8, 1039), (9, 1007), (10, 1951), (11, 1965), (12, 845), (13, 1904), (14, 2038), (15, 1052)]
Head:  [((-1,), 1000), ((1, -1, 1), 993), ((1, 3, 1, -1, 3), 283), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 314), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 4009 samples for 100 iterations, 0.9401341230603554, 3 epochs, take 25 sec.
Epoch time: 7m 35s
------------------------------
Epoch 45/99 (max_len=11, data=4683)
Train acc: 81.49 (abduce 98.61)
Hit samples:  4618  Ave length:  5.28
Symbols:  16 [(0, 1102), (1, 1312), (2, 1276), (3, 1304), (4, 1270), (5, 1279), (6, 1290), (7, 1343), (8, 1252), (9, 1231), (10, 2245), (11, 2130), (12, 1637), (13, 2029), (14, 2460), (15, 1238)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 142), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 110), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 98)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((7, 8), 56), 5), (((6, 6), 36), 3), (((8, 8), 64), 3), (((6, 2), 12), 3), (((4, 4), 16), 3), (((7, 2), 14), 2), (((6, 1), 6), 2), (((9, 5), 45), 2), (((7, 3), 21), 2), (((8, 4), 32), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 4), (((8, 0), 1), 4), (((6, 0), 1), 3), (((3, 0), 1), 3), (((7, 0), 1), 3), (((11, 0), 1), 2), (((0, 1), 36), 2), (((5, 2), 10), 2), (((0, 7), 8), 2), (((0, 8), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.78
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 81.49 (abduce 85.61)
Hit samples:  4009  Ave length:  5.1
Symbols:  16 [(0, 1036), (1, 1186), (2, 1080), (3, 1077), (4, 1033), (5, 1056), (6, 1061), (7, 1096), (8, 1038), (9, 1010), (10, 1951), (11, 1962), (12, 845), (13, 1906), (14, 2038), (15, 1052)]
Head:  [((-1,), 1000), ((1, -1, 1), 993), ((1, 3, 1, -1, 3), 283), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 314), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 4009 samples for 100 iterations, 0.9400793067998238, 3 epochs, take 26 sec.
Epoch time: 7m 49s
------------------------------
Epoch 46/99 (max_len=11, data=4683)
Train acc: 81.49 (abduce 98.65)
Hit samples:  4620  Ave length:  5.28
Symbols:  16 [(0, 1103), (1, 1309), (2, 1277), (3, 1306), (4, 1276), (5, 1281), (6, 1291), (7, 1337), (8, 1248), (9, 1235), (10, 2258), (11, 2143), (12, 1628), (13, 2013), (14, 2457), (15, 1248)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 374), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 142), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 110), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 100)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 3), 12), 4), (((8, 3), 24), 3), (((3, 8), 24), 3), (((9, 5), 45), 3), (((8, 5), 40), 3), (((3, 1), 3), 3), (((2, 1), 2), 3), (((4, 4), 16), 2), (((4, 8), 32), 2), (((3, 6), 18), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 5), (((8, 0), 1), 4), (((0, 7), 8), 3), (((7, 0), 1), 3), (((2, 0), 1), 3), (((6, 0), 1), 3), (((0, 4), 4), 2), (((0, 8), 1), 2), (((0, 8), 3), 2), (((5, 2), 10), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.78
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 81.49 (abduce 85.61)
Hit samples:  4009  Ave length:  5.1
Symbols:  16 [(0, 1036), (1, 1186), (2, 1080), (3, 1077), (4, 1033), (5, 1056), (6, 1061), (7, 1096), (8, 1038), (9, 1010), (10, 1953), (11, 1963), (12, 844), (13, 1904), (14, 2038), (15, 1052)]
Head:  [((-1,), 1000), ((1, -1, 1), 993), ((1, 3, 1, -1, 3), 283), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 314), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 4009 samples for 100 iterations, 0.9400303519851178, 3 epochs, take 25 sec.
Epoch time: 7m 42s
------------------------------
Epoch 47/99 (max_len=11, data=4683)
Train acc: 81.55 (abduce 98.68)
Hit samples:  4621  Ave length:  5.29
Symbols:  16 [(0, 1106), (1, 1303), (2, 1280), (3, 1303), (4, 1278), (5, 1280), (6, 1295), (7, 1343), (8, 1246), (9, 1238), (10, 2278), (11, 2141), (12, 1624), (13, 2008), (14, 2461), (15, 1247)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 142), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 111), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 98)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((7, 8), 56), 4), (((8, 8), 64), 4), (((7, 2), 14), 4), (((3, 7), 21), 3), (((9, 6), 54), 3), (((3, 8), 24), 3), (((4, 8), 32), 2), (((8, 7), 56), 2), (((3, 4), 12), 2), (((6, 6), 36), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 5), (((8, 0), 1), 4), (((0, 7), 8), 3), (((5, 0), 1), 3), (((6, 0), 1), 3), (((0, 8), 3), 2), (((0, 1), 36), 2), (((0, 4), 4), 2), (((3, 0), 1), 2), (((7, 0), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.78
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 81.55 (abduce 85.63)
Hit samples:  4010  Ave length:  5.1
Symbols:  16 [(0, 1037), (1, 1185), (2, 1080), (3, 1078), (4, 1033), (5, 1056), (6, 1062), (7, 1096), (8, 1038), (9, 1011), (10, 1956), (11, 1962), (12, 844), (13, 1904), (14, 2040), (15, 1052)]
Head:  [((-1,), 1000), ((1, -1, 1), 993), ((1, 3, 1, -1, 3), 283), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 4010 samples for 100 iterations, 0.9399040814329059, 3 epochs, take 26 sec.
Epoch time: 7m 41s
------------------------------
Epoch 48/99 (max_len=11, data=4683)
Train acc: 81.53 (abduce 98.63)
Hit samples:  4619  Ave length:  5.28
Symbols:  16 [(0, 1110), (1, 1310), (2, 1277), (3, 1304), (4, 1267), (5, 1280), (6, 1296), (7, 1334), (8, 1242), (9, 1240), (10, 2263), (11, 2138), (12, 1628), (13, 2011), (14, 2459), (15, 1250)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 374), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 142), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 110), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 3), 12), 3), (((8, 8), 64), 3), (((0, 1), 0), 3), (((6, 3), 18), 3), (((9, 2), 18), 2), (((1, 0), 15), 2), (((5, 2), 10), 2), (((8, 2), 16), 2), (((7, 8), 56), 2), (((7, 6), 42), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 6), (((8, 0), 1), 4), (((3, 0), 1), 3), (((2, 0), 1), 3), (((6, 0), 1), 3), (((0, 7), 8), 2), (((7, 0), 1), 2), (((11, 0), 1), 2), (((0, 8), 1), 2), (((5, 0), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.77
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 81.53 (abduce 85.65)
Hit samples:  4011  Ave length:  5.1
Symbols:  16 [(0, 1037), (1, 1185), (2, 1081), (3, 1078), (4, 1031), (5, 1056), (6, 1063), (7, 1096), (8, 1038), (9, 1015), (10, 1956), (11, 1964), (12, 844), (13, 1905), (14, 2041), (15, 1053)]
Head:  [((-1,), 1000), ((1, -1, 1), 993), ((1, 3, 1, -1, 3), 283), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 4011 samples for 100 iterations, 0.9398816220711246, 3 epochs, take 26 sec.
Epoch time: 7m 39s
------------------------------
Epoch 49/99 (max_len=11, data=4683)
Train acc: 81.66 (abduce 98.72)
Hit samples:  4623  Ave length:  5.29
Symbols:  16 [(0, 1114), (1, 1311), (2, 1277), (3, 1303), (4, 1267), (5, 1280), (6, 1293), (7, 1340), (8, 1255), (9, 1240), (10, 2264), (11, 2140), (12, 1630), (13, 2023), (14, 2459), (15, 1251)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 142), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 110), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((5, 9), 45), 3), (((6, 2), 12), 3), (((4, 3), 12), 3), (((6, 7), 42), 3), (((7, 8), 56), 3), (((8, 2), 16), 3), (((6, 8), 48), 2), (((8, 9), 72), 2), (((3, 2), 6), 2), (((9, 6), 54), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 5), (((3, 0), 1), 3), (((8, 0), 1), 3), (((2, 0), 1), 3), (((6, 6), 36), 2), (((7, 0), 1), 2), (((6, 0), 1), 2), (((0, 4), 4), 2), (((0, 7), 8), 2), (((6, 9), 54), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.78
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 81.66 (abduce 85.63)
Hit samples:  4010  Ave length:  5.1
Symbols:  16 [(0, 1037), (1, 1185), (2, 1081), (3, 1078), (4, 1030), (5, 1054), (6, 1063), (7, 1096), (8, 1039), (9, 1014), (10, 1954), (11, 1964), (12, 844), (13, 1905), (14, 2041), (15, 1053)]
Head:  [((-1,), 1000), ((1, -1, 1), 993), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 4010 samples for 100 iterations, 0.9400626284372248, 3 epochs, take 26 sec.
Percentage of None result: 38.29
              precision    recall  f1-score   support

           0       0.97      0.99      0.98      4016
           1       0.81      0.95      0.88      5142
           2       1.00      0.98      0.99      5321
           3       1.00      0.98      0.99      5241
           4       0.97      0.99      0.98      5279
           5       0.99      0.98      0.99      5383
           6       1.00      0.97      0.99      5427
           7       1.00      0.97      0.98      5462
           8       0.98      0.97      0.98      5453
           9       0.99      1.00      1.00      5476
           +       0.95      0.99      0.97     13199
           -       0.99      1.00      0.99     10734
           *       0.98      0.97      0.97     13491
           /       1.00      1.00      1.00      9876
           (       0.77      0.95      0.85     21081
           )       0.99      0.71      0.83     21081

    accuracy                           0.94    141662
   macro avg       0.96      0.96      0.96    141662
weighted avg       0.95      0.94      0.94    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (     )
0  280    0    0    0    0    0    0    0    3    0    0    0    0    0     0     0
1    0  343    0    1    0    0    0    0    0    0    1    1    0    0    10     5
2    0    3  367    0    0    0    1    1    0    0    0    0    1    0     1     0
3    0    0    0  361    0    2    0    0    3    2    0    0    0    0     0     0
4    0    0    0    0  368    0    0    0    0    0    4    0    0    0     0     0
5    7    0    0    0    0  372    0    0    0    0    0    0    0    0     0     0
6    0    0    0    0    9    0  373    0    0    0    0    0    0    0     0     0
7    0    0    0    0    0    0    0  375    0    0   10    0    0    0     0     0
8    0    0    0    0    0    0    0    0  374    0    0    0   10    0     0     0
9    0    0    0    0    0    0    0    0    0  386    0    0    0    0     0     0
+    0    0    0    0    0    0    0    0    0    0  918    6    3    0     0     3
-    0    0    0    0    0    0    0    0    0    0    2  755    0    0     0     0
*    0    0    0    0    0    0    0    0    0    0   31    0  920    0     0     0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  697     0     0
(    0   59    0    0    0    0    0    0    0    0    0    0    7    0  1420     0
)    0   15    0    0    0    0    0    0    0    0    0    0    0    0   413  1059
result accuracy by length:
1 ( 2%) 96.00
3 ( 2%) 76.00
5 ( 2%) 52.71
7 ( 4%) 40.17
9 ( 4%) 35.18
11 ( 3%) 30.11
13 ( 4%) 35.65
15 ( 4%) 30.20
17 ( 4%) 28.64
19 ( 4%) 26.47
21 ( 4%) 26.77
23 ( 4%) 24.39
25 ( 4%) 20.50
27 ( 4%) 24.14
29 ( 3%) 24.08
31 ( 3%) 13.10
33 ( 2%) 18.57
35 ( 2%) 18.49
37 ( 2%) 20.51
39 ( 3%) 13.16
41 ( 3%) 15.44
43 ( 2%) 10.87
45 ( 2%) 14.29
47 ( 2%) 12.88
49 ( 2%) 10.56
51 ( 2%) 13.64
53 ( 2%) 11.94
55 ( 2%) 10.08
57 ( 2%) 11.89
59 ( 2%) 11.21
61 ( 1%)  4.69
63 ( 0%)  2.86
65 ( 0%) 11.11
67 ( 0%)  0.00
result accuracy by symbol:
( (91%) 21.30
) (91%) 21.30
* (87%) 16.76
+ (84%) 21.52
- (77%) 24.02
/ (76%) 22.16
0 (52%) 24.49
1 (60%) 21.15
2 (61%) 20.00
3 (62%) 20.30
4 (61%) 19.50
5 (62%) 20.12
6 (62%) 19.73
7 (63%) 19.28
8 (64%) 18.73
9 (63%) 19.51
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 90.00
2 ( 0%) 90.00
3 ( 0%) 90.00
4 ( 0%) 100.00
5 ( 0%) 90.00
6 ( 0%) 100.00
7 ( 0%) 100.00
8 ( 0%) 100.00
9 ( 0%) 100.00
result accuracy by result:
0 (21%) 49.90
1 (10%) 33.52
2 ( 4%) 41.92
3 ( 2%) 46.67
4 ( 2%) 36.84
5 ( 2%) 43.00
6 ( 2%) 39.13
7 ( 2%) 47.79
8 ( 2%) 33.33
9 ( 1%) 46.51
result accuracy by generalization:
1 (22.45%) 50.91
2 (22.96%) 41.16
3 (22.53%)  1.90
4 (15.82%) 19.61
5 (16.24%)  4.27
error cases:
1 ( [-1] [-1] 1 None
3 8 [-1] [-1] 3 8
2 1 [-1] [-1] 2 1
5 0 [-1] [-1] 5 0
5*9 5+9 [1, -1, 1] [1, -1, 1] 45 14
9*1 9*1 [1, -1, 1] [1, -1, 1] 9 0
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 0
6*4 6*4 [1, -1, 1] [1, -1, 1] 24 0
3*5 3*5 [1, -1, 1] [1, -1, 1] 15 0
5*5 5*5 [1, -1, 1] [1, -1, 1] 25 0
2*4 2*4 [1, -1, 1] [1, -1, 1] 8 4
5*3 5*3 [1, -1, 1] [1, -1, 1] 15 0
7*9 7*9 [1, -1, 1] [1, -1, 1] 63 0
8*1 8*1 [1, -1, 1] [1, -1, 1] 8 0
6*1 6*1 [1, -1, 1] [1, -1, 1] 6 0
3*2 3*2 [1, -1, 1] [1, -1, 1] 6 0
3*3 3*3 [1, -1, 1] [1, -1, 1] 9 0
6*3 6*3 [1, -1, 1] [1, -1, 1] 18 0
8*2 8*2 [1, -1, 1] [1, -1, 1] 16 0
7*7 7*7 [1, -1, 1] [1, -1, 1] 49 0
val (Perception Acc=93.74, Head Acc=100.00, Result Acc=25.10)
Epoch time: 8m 32s
------------------------------
Epoch 50/99 (max_len=11, data=4683)
Train acc: 81.68 (abduce 98.72)
Hit samples:  4623  Ave length:  5.29
Symbols:  16 [(0, 1112), (1, 1314), (2, 1280), (3, 1299), (4, 1269), (5, 1280), (6, 1294), (7, 1340), (8, 1254), (9, 1240), (10, 2259), (11, 2141), (12, 1632), (13, 2027), (14, 2465), (15, 1247)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 143), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 111), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 100)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((7, 8), 56), 3), (((6, 2), 12), 3), (((3, 1), 3), 3), (((4, 1), 4), 2), (((9, 9), 81), 2), (((3, 6), 18), 2), (((5, 5), 25), 2), (((7, 2), 14), 2), (((3, 8), 24), 2), (((4, 3), 12), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 5), (((8, 0), 1), 4), (((3, 0), 1), 2), (((2, 0), 1), 2), (((0, 6), 3), 2), (((7, 0), 1), 2), (((0, 8), 1), 2), (((0, 4), 4), 2), (((11, 0), 1), 2), (((6, 9), 54), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.78
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 81.68 (abduce 85.63)
Hit samples:  4010  Ave length:  5.1
Symbols:  16 [(0, 1037), (1, 1186), (2, 1081), (3, 1078), (4, 1030), (5, 1054), (6, 1063), (7, 1096), (8, 1039), (9, 1013), (10, 1953), (11, 1964), (12, 844), (13, 1906), (14, 2041), (15, 1053)]
Head:  [((-1,), 1000), ((1, -1, 1), 993), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 4010 samples for 100 iterations, 0.9400136999706429, 3 epochs, take 26 sec.
Epoch time: 7m 34s
------------------------------
Epoch 51/99 (max_len=11, data=4683)
Train acc: 81.70 (abduce 98.65)
Hit samples:  4620  Ave length:  5.29
Symbols:  16 [(0, 1104), (1, 1313), (2, 1280), (3, 1301), (4, 1268), (5, 1277), (6, 1292), (7, 1339), (8, 1258), (9, 1236), (10, 2254), (11, 2138), (12, 1622), (13, 2034), (14, 2461), (15, 1243)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 142), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 110), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 3), 18), 4), (((8, 2), 16), 3), (((3, 8), 24), 3), (((9, 6), 54), 3), (((8, 3), 24), 3), (((0, 1), 0), 2), (((7, 6), 42), 2), (((4, 7), 28), 2), (((3, 2), 6), 2), (((5, 9), 45), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 6), (((8, 0), 1), 4), (((5, 0), 1), 3), (((2, 0), 1), 3), (((6, 9), 54), 2), (((11, 0), 1), 2), (((0, 6), 3), 2), (((0, 8), 3), 2), (((6, 0), 1), 2), (((0, 9), 4), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.78
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 81.70 (abduce 85.63)
Hit samples:  4010  Ave length:  5.1
Symbols:  16 [(0, 1036), (1, 1186), (2, 1081), (3, 1078), (4, 1030), (5, 1054), (6, 1063), (7, 1096), (8, 1040), (9, 1013), (10, 1952), (11, 1964), (12, 844), (13, 1907), (14, 2041), (15, 1053)]
Head:  [((-1,), 1000), ((1, -1, 1), 993), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 4010 samples for 100 iterations, 0.9400626284372248, 3 epochs, take 26 sec.
Epoch time: 7m 42s
------------------------------
Epoch 52/99 (max_len=11, data=4683)
Train acc: 81.87 (abduce 98.65)
Hit samples:  4620  Ave length:  5.29
Symbols:  16 [(0, 1104), (1, 1307), (2, 1277), (3, 1302), (4, 1268), (5, 1275), (6, 1293), (7, 1342), (8, 1259), (9, 1242), (10, 2266), (11, 2137), (12, 1605), (13, 2039), (14, 2461), (15, 1243)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 372), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 142), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 111), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 3), 18), 5), (((3, 1), 3), 4), (((6, 6), 36), 3), (((4, 3), 12), 3), (((6, 1), 6), 3), (((7, 5), 35), 3), (((8, 8), 64), 3), (((7, 7), 49), 2), (((8, 2), 16), 2), (((6, 8), 48), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 5), (((6, 0), 1), 3), (((8, 0), 1), 3), (((2, 0), 1), 3), (((7, 0), 1), 3), (((6, 6), 36), 2), (((3, 0), 1), 2), (((0, 6), 3), 2), (((5, 0), 1), 2), (((0, 1), 36), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.78
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 81.87 (abduce 85.63)
Hit samples:  4010  Ave length:  5.1
Symbols:  16 [(0, 1036), (1, 1185), (2, 1081), (3, 1078), (4, 1030), (5, 1054), (6, 1063), (7, 1096), (8, 1040), (9, 1014), (10, 1952), (11, 1964), (12, 841), (13, 1910), (14, 2041), (15, 1053)]
Head:  [((-1,), 1000), ((1, -1, 1), 993), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 4010 samples for 100 iterations, 0.9403561992367159, 3 epochs, take 26 sec.
Epoch time: 7m 45s
------------------------------
Epoch 53/99 (max_len=11, data=4683)
Train acc: 81.83 (abduce 98.76)
Hit samples:  4625  Ave length:  5.29
Symbols:  16 [(0, 1103), (1, 1304), (2, 1280), (3, 1301), (4, 1274), (5, 1284), (6, 1294), (7, 1345), (8, 1259), (9, 1243), (10, 2259), (11, 2141), (12, 1605), (13, 2057), (14, 2462), (15, 1246)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 143), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 111), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 100)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 5), 40), 5), (((4, 3), 12), 3), (((7, 5), 35), 3), (((6, 2), 12), 3), (((0, 1), 0), 3), (((9, 1), 9), 2), (((7, 9), 63), 2), (((6, 1), 6), 2), (((5, 4), 20), 2), (((3, 6), 18), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((8, 0), 1), 4), (((1, 0), 1), 3), (((3, 0), 1), 3), (((0, 7), 8), 3), (((5, 0), 1), 3), (((7, 0), 1), 3), (((6, 9), 54), 2), (((0, 1), 36), 2), (((2, 0), 1), 2), (((0, 9), 4), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.78
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 81.83 (abduce 85.63)
Hit samples:  4010  Ave length:  5.1
Symbols:  16 [(0, 1035), (1, 1185), (2, 1081), (3, 1078), (4, 1030), (5, 1054), (6, 1063), (7, 1097), (8, 1040), (9, 1014), (10, 1952), (11, 1964), (12, 840), (13, 1911), (14, 2041), (15, 1053)]
Head:  [((-1,), 1000), ((1, -1, 1), 993), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 4010 samples for 100 iterations, 0.9403561992367159, 3 epochs, take 26 sec.
Epoch time: 7m 40s
------------------------------
Epoch 54/99 (max_len=11, data=4683)
Train acc: 81.74 (abduce 98.76)
Hit samples:  4625  Ave length:  5.29
Symbols:  16 [(0, 1107), (1, 1311), (2, 1278), (3, 1306), (4, 1275), (5, 1279), (6, 1293), (7, 1348), (8, 1249), (9, 1245), (10, 2247), (11, 2146), (12, 1615), (13, 2056), (14, 2466), (15, 1250)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 143), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 111), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 100)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 3), 12), 3), (((7, 8), 56), 3), (((5, 6), 30), 2), (((3, 7), 21), 2), (((4, 5), 20), 2), (((9, 6), 54), 2), (((4, 9), 36), 2), (((4, 4), 16), 2), (((4, 7), 28), 2), (((3, 4), 12), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 4), (((5, 0), 1), 3), (((7, 0), 1), 3), (((3, 0), 1), 3), (((6, 0), 1), 3), (((8, 0), 1), 3), (((0, 9), 4), 2), (((0, 6), 3), 2), (((0, 8), 1), 2), (((6, 9), 54), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.78
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 81.74 (abduce 85.63)
Hit samples:  4010  Ave length:  5.1
Symbols:  16 [(0, 1036), (1, 1185), (2, 1081), (3, 1078), (4, 1030), (5, 1054), (6, 1063), (7, 1097), (8, 1039), (9, 1014), (10, 1952), (11, 1963), (12, 840), (13, 1912), (14, 2041), (15, 1053)]
Head:  [((-1,), 1000), ((1, -1, 1), 993), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 4010 samples for 100 iterations, 0.9403072707701341, 3 epochs, take 26 sec.
Epoch time: 7m 42s
------------------------------
Epoch 55/99 (max_len=11, data=4683)
Train acc: 81.91 (abduce 98.68)
Hit samples:  4621  Ave length:  5.29
Symbols:  16 [(0, 1110), (1, 1310), (2, 1280), (3, 1301), (4, 1271), (5, 1278), (6, 1293), (7, 1342), (8, 1248), (9, 1242), (10, 2260), (11, 2141), (12, 1599), (13, 2052), (14, 2463), (15, 1245)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 372), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 143), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 110), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((5, 2), 10), 4), (((6, 6), 36), 4), (((7, 4), 28), 3), (((2, 1), 2), 3), (((9, 6), 54), 2), (((2, 8), 16), 2), (((7, 2), 14), 2), (((5, 5), 25), 2), (((6, 2), 12), 2), (((4, 5), 20), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((5, 0), 1), 3), (((0, 7), 8), 3), (((8, 0), 1), 3), (((1, 0), 1), 3), (((7, 0), 1), 2), (((6, 9), 54), 2), (((0, 8), 3), 2), (((0, 1), 36), 2), (((2, 0), 1), 2), (((3, 0), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.78
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 81.91 (abduce 85.65)
Hit samples:  4011  Ave length:  5.1
Symbols:  16 [(0, 1036), (1, 1185), (2, 1082), (3, 1078), (4, 1031), (5, 1054), (6, 1063), (7, 1097), (8, 1039), (9, 1014), (10, 1953), (11, 1963), (12, 839), (13, 1913), (14, 2041), (15, 1053)]
Head:  [((-1,), 1000), ((1, -1, 1), 994), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 4011 samples for 100 iterations, 0.9401692676483538, 3 epochs, take 25 sec.
Epoch time: 7m 41s
------------------------------
Epoch 56/99 (max_len=11, data=4683)
Train acc: 81.91 (abduce 98.72)
Hit samples:  4623  Ave length:  5.29
Symbols:  16 [(0, 1100), (1, 1308), (2, 1273), (3, 1306), (4, 1274), (5, 1277), (6, 1293), (7, 1347), (8, 1259), (9, 1243), (10, 2261), (11, 2139), (12, 1608), (13, 2047), (14, 2467), (15, 1245)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 375), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 141), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 111), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((5, 8), 40), 3), (((6, 1), 6), 3), (((8, 2), 16), 3), (((7, 4), 28), 3), (((9, 5), 45), 3), (((7, 8), 56), 2), (((9, 2), 18), 2), (((2, 9), 18), 2), (((4, 8), 32), 2), (((3, 1), 3), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 5), (((8, 0), 1), 4), (((5, 0), 1), 3), (((0, 7), 8), 3), (((0, 8), 3), 2), (((6, 0), 1), 2), (((11, 0), 1), 2), (((6, 6), 36), 2), (((0, 1), 36), 2), (((6, 9), 54), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.78
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 81.91 (abduce 85.65)
Hit samples:  4011  Ave length:  5.1
Symbols:  16 [(0, 1035), (1, 1185), (2, 1082), (3, 1078), (4, 1031), (5, 1054), (6, 1063), (7, 1097), (8, 1040), (9, 1014), (10, 1953), (11, 1964), (12, 840), (13, 1911), (14, 2041), (15, 1053)]
Head:  [((-1,), 1000), ((1, -1, 1), 994), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 4011 samples for 100 iterations, 0.9402671102196566, 3 epochs, take 25 sec.
Epoch time: 7m 38s
------------------------------
Epoch 57/99 (max_len=11, data=4683)
Train acc: 81.83 (abduce 98.70)
Hit samples:  4622  Ave length:  5.29
Symbols:  16 [(0, 1102), (1, 1311), (2, 1277), (3, 1307), (4, 1272), (5, 1275), (6, 1293), (7, 1334), (8, 1257), (9, 1245), (10, 2259), (11, 2136), (12, 1615), (13, 2040), (14, 2465), (15, 1248)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 374), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 143), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 111), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 100)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((5, 1), 5), 3), (((6, 1), 6), 3), (((9, 2), 18), 3), (((5, 3), 15), 3), (((4, 8), 32), 3), (((9, 5), 45), 3), (((5, 6), 30), 2), (((2, 8), 16), 2), (((6, 6), 36), 2), (((9, 4), 36), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((8, 0), 1), 4), (((1, 0), 1), 4), (((7, 0), 1), 3), (((0, 7), 8), 3), (((5, 0), 1), 3), (((2, 0), 1), 3), (((3, 0), 1), 3), (((0, 9), 4), 2), (((6, 0), 1), 2), (((0, 6), 3), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.78
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 81.83 (abduce 85.65)
Hit samples:  4011  Ave length:  5.1
Symbols:  16 [(0, 1035), (1, 1185), (2, 1082), (3, 1078), (4, 1031), (5, 1054), (6, 1063), (7, 1097), (8, 1040), (9, 1014), (10, 1954), (11, 1964), (12, 840), (13, 1910), (14, 2041), (15, 1053)]
Head:  [((-1,), 1000), ((1, -1, 1), 994), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 4011 samples for 100 iterations, 0.9402671102196566, 3 epochs, take 26 sec.
Epoch time: 7m 38s
------------------------------
Epoch 58/99 (max_len=11, data=4683)
Train acc: 81.89 (abduce 98.70)
Hit samples:  4622  Ave length:  5.29
Symbols:  16 [(0, 1102), (1, 1309), (2, 1273), (3, 1304), (4, 1268), (5, 1278), (6, 1292), (7, 1345), (8, 1260), (9, 1246), (10, 2263), (11, 2138), (12, 1613), (13, 2039), (14, 2462), (15, 1248)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 374), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 142), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 111), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 3), 12), 4), (((9, 1), 9), 4), (((0, 1), 0), 3), (((7, 4), 28), 2), (((6, 3), 18), 2), (((7, 9), 63), 2), (((9, 5), 45), 2), (((7, 6), 42), 2), (((8, 7), 56), 2), (((9, 3), 27), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 5), (((8, 0), 1), 4), (((7, 0), 1), 3), (((3, 0), 1), 3), (((5, 0), 1), 3), (((0, 7), 8), 3), (((6, 0), 1), 3), (((0, 8), 3), 2), (((0, 8), 1), 2), (((0, 9), 4), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.78
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 81.89 (abduce 85.65)
Hit samples:  4011  Ave length:  5.1
Symbols:  16 [(0, 1035), (1, 1185), (2, 1082), (3, 1078), (4, 1031), (5, 1054), (6, 1063), (7, 1097), (8, 1040), (9, 1014), (10, 1954), (11, 1964), (12, 840), (13, 1910), (14, 2041), (15, 1053)]
Head:  [((-1,), 1000), ((1, -1, 1), 994), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 4011 samples for 100 iterations, 0.9402671102196566, 3 epochs, take 26 sec.
Epoch time: 7m 26s
------------------------------
Epoch 59/99 (max_len=11, data=4683)
Train acc: 81.85 (abduce 98.76)
Hit samples:  4625  Ave length:  5.29
Symbols:  16 [(0, 1104), (1, 1308), (2, 1277), (3, 1307), (4, 1266), (5, 1281), (6, 1291), (7, 1342), (8, 1259), (9, 1249), (10, 2264), (11, 2136), (12, 1608), (13, 2050), (14, 2464), (15, 1251)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 374), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 143), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 111), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 101)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((5, 3), 15), 3), (((5, 8), 40), 3), (((9, 1), 9), 3), (((3, 7), 21), 3), (((3, 8), 24), 3), (((6, 4), 24), 2), (((7, 8), 56), 2), (((7, 3), 21), 2), (((3, 9), 27), 2), (((3, 4), 12), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 5), (((2, 0), 1), 3), (((6, 0), 1), 3), (((7, 0), 1), 3), (((3, 0), 1), 3), (((5, 0), 1), 3), (((8, 0), 1), 3), (((0, 7), 8), 3), (((6, 6), 36), 2), (((11, 0), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.78
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 81.85 (abduce 85.65)
Hit samples:  4011  Ave length:  5.1
Symbols:  16 [(0, 1034), (1, 1185), (2, 1082), (3, 1078), (4, 1031), (5, 1053), (6, 1064), (7, 1097), (8, 1041), (9, 1014), (10, 1954), (11, 1964), (12, 839), (13, 1911), (14, 2041), (15, 1053)]
Head:  [((-1,), 1000), ((1, -1, 1), 994), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 4011 samples for 100 iterations, 0.9402181889340052, 3 epochs, take 25 sec.
Percentage of None result: 34.84
              precision    recall  f1-score   support

           0       0.97      1.00      0.99      4016
           1       0.82      0.95      0.88      5142
           2       1.00      0.99      0.99      5321
           3       1.00      0.98      0.99      5241
           4       0.97      0.99      0.98      5279
           5       0.99      0.98      0.98      5383
           6       1.00      0.97      0.99      5427
           7       1.00      1.00      1.00      5462
           8       1.00      1.00      1.00      5453
           9       0.99      1.00      1.00      5476
           +       0.96      0.99      0.98     13199
           -       0.99      1.00      1.00     10734
           *       1.00      0.97      0.98     13491
           /       0.99      1.00      0.99      9876
           (       0.77      0.95      0.85     21081
           )       0.98      0.72      0.83     21081

    accuracy                           0.94    141662
   macro avg       0.97      0.97      0.96    141662
weighted avg       0.95      0.94      0.94    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (     )
0  283    0    0    0    0    0    0    0    0    0    0    0    0    0     0     0
1    0  345    0    0    0    1    0    0    0    0    1    1    0    0     8     5
2    0    1  370    0    0    0    0    1    0    0    0    0    1    0     1     0
3    0    0    0  364    0    2    0    0    0    2    0    0    0    0     0     0
4    0    0    0    0  368    0    0    0    0    0    4    0    0    0     0     0
5    7    0    0    0    0  372    0    0    0    0    0    0    0    0     0     0
6    0    0    0    0    9    0  373    0    0    0    0    0    0    0     0     0
7    0    0    0    0    0    0    0  385    0    0    0    0    0    0     0     0
8    0    0    0    0    0    0    0    0  384    0    0    0    0    0     0     0
9    0    0    0    0    0    0    0    0    0  386    0    0    0    0     0     0
+    0    0    0    0    0    0    0    0    0    0  924    3    0    0     0     3
-    0    0    0    0    0    0    0    0    0    0    2  755    0    0     0     0
*    0    0    0    0    0    0    0    0    0    0   31    0  920    0     0     0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  697     0     0
(    0   59    0    0    0    0    0    0    0    0    0    0    0    7  1413     7
)    0   15    0    0    0    0    0    0    0    0    0    0    0    0   405  1067
result accuracy by length:
1 ( 2%) 98.00
3 ( 2%) 77.00
5 ( 2%) 53.49
7 ( 4%) 41.05
9 ( 4%) 35.68
11 ( 3%) 30.68
13 ( 4%) 37.50
15 ( 4%) 31.19
17 ( 4%) 30.58
19 ( 4%) 26.47
21 ( 4%) 28.79
23 ( 4%) 25.85
25 ( 4%) 23.00
27 ( 4%) 25.62
29 ( 3%) 26.18
31 ( 3%) 14.88
33 ( 2%) 18.57
35 ( 2%) 20.55
37 ( 2%) 21.37
39 ( 3%) 13.16
41 ( 3%) 18.79
43 ( 2%) 12.32
45 ( 2%) 14.29
47 ( 2%) 14.39
49 ( 2%) 12.68
51 ( 2%) 16.67
53 ( 2%) 13.43
55 ( 2%) 11.76
57 ( 2%) 12.59
59 ( 2%) 13.08
61 ( 1%)  4.69
63 ( 0%)  5.71
65 ( 0%) 11.11
67 ( 0%)  0.00
result accuracy by symbol:
( (91%) 22.68
) (91%) 22.68
* (87%) 17.86
+ (84%) 22.99
- (77%) 25.56
/ (76%) 23.73
0 (52%) 26.13
1 (60%) 22.76
2 (61%) 21.63
3 (62%) 21.61
4 (61%) 20.96
5 (62%) 21.16
6 (62%) 21.01
7 (63%) 20.99
8 (64%) 20.41
9 (63%) 21.14
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 90.00
2 ( 0%) 100.00
3 ( 0%) 100.00
4 ( 0%) 100.00
5 ( 0%) 90.00
6 ( 0%) 100.00
7 ( 0%) 100.00
8 ( 0%) 100.00
9 ( 0%) 100.00
result accuracy by result:
0 (21%) 52.29
1 (10%) 35.21
2 ( 4%) 46.46
3 ( 2%) 48.89
4 ( 2%) 37.59
5 ( 2%) 45.00
6 ( 2%) 40.87
7 ( 2%) 47.79
8 ( 2%) 34.19
9 ( 1%) 50.00
result accuracy by generalization:
1 (22.45%) 52.55
2 (22.96%) 43.29
3 (22.53%)  2.08
4 (15.82%) 22.19
5 (16.24%)  4.77
error cases:
1 ( [-1] [-1] 1 None
5 0 [-1] [-1] 5 0
5*9 5+9 [1, -1, 1] [1, -1, 1] 45 14
9*1 9*1 [1, -1, 1] [1, -1, 1] 9 0
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 0
6*4 6*4 [1, -1, 1] [1, -1, 1] 24 0
3*5 3*5 [1, -1, 1] [1, -1, 1] 15 0
5*5 5*5 [1, -1, 1] [1, -1, 1] 25 0
2*4 2*4 [1, -1, 1] [1, -1, 1] 8 4
5*3 5*3 [1, -1, 1] [1, -1, 1] 15 0
7*9 7*9 [1, -1, 1] [1, -1, 1] 63 0
8*1 8*1 [1, -1, 1] [1, -1, 1] 8 0
6*1 6*1 [1, -1, 1] [1, -1, 1] 6 0
3*2 3*2 [1, -1, 1] [1, -1, 1] 6 0
3*3 3*3 [1, -1, 1] [1, -1, 1] 9 0
6*3 6*3 [1, -1, 1] [1, -1, 1] 18 0
8*2 8*2 [1, -1, 1] [1, -1, 1] 16 0
7*7 7*7 [1, -1, 1] [1, -1, 1] 49 0
3-2 3-1 [1, -1, 1] [1, -1, 1] 1 2
8*3 8*3 [1, -1, 1] [1, -1, 1] 24 0
val (Perception Acc=94.14, Head Acc=100.00, Result Acc=26.49)
Epoch time: 8m 30s
------------------------------
Epoch 60/99 (max_len=15, data=6058)
Train acc: 74.53 (abduce 95.15)
Hit samples:  5764  Ave length:  7.02
Symbols:  16 [(0, 1649), (1, 1946), (2, 1989), (3, 2021), (4, 1913), (5, 1949), (6, 1949), (7, 2030), (8, 1919), (9, 1885), (10, 3839), (11, 3562), (12, 2678), (13, 3407), (14, 5141), (15, 2569)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 141), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 111), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 5), 20), 3), (((5, 3), 15), 3), (((4, 1), 4), 3), (((6, 2), 12), 2), (((6, 13), 78), 2), (((6, 1), 6), 2), (((3, 4), 12), 2), (((4, 9), 36), 2), (((0, 1), 0), 2), (((3, 8), 24), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((2, 0), 1), 5), (((3, 0), 1), 4), (((1, 0), 1), 4), (((8, 0), 1), 3), (((0, 9), 2), 2), (((0, 8), 1), 2), (((7, 0), 1), 2), (((1, 1), 0), 2), (((0, 9), 4), 2), (((0, 1), 36), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.91
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.82
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 74.53 (abduce 83.49)
Hit samples:  5058  Ave length:  6.94
Symbols:  16 [(0, 1576), (1, 1823), (2, 1719), (3, 1717), (4, 1606), (5, 1665), (6, 1667), (7, 1698), (8, 1629), (9, 1578), (10, 3391), (11, 3374), (12, 1622), (13, 3233), (14, 4528), (15, 2296)]
Head:  [((-1,), 1000), ((1, -1, 1), 994), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5058 samples for 100 iterations, 0.9334889812653038, 2 epochs, take 29 sec.
Epoch time: 11m 22s
------------------------------
Epoch 61/99 (max_len=15, data=6058)
Train acc: 75.55 (abduce 96.07)
Hit samples:  5820  Ave length:  7.09
Symbols:  16 [(0, 1689), (1, 2030), (2, 2010), (3, 2040), (4, 1952), (5, 1979), (6, 2001), (7, 2033), (8, 1940), (9, 1910), (10, 3863), (11, 3660), (12, 2809), (13, 3433), (14, 5190), (15, 2747)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 366), ((2, 2, 5, 2, 2, -1, 5), 137), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 143), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 112), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 97)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((2, 1), 2), 4), (((4, 3), 12), 4), (((4, 1), 4), 3), (((5, 3), 15), 2), (((8, 8), 64), 2), (((3, 1), 3), 2), (((3, 9), 27), 2), (((7, 6), 42), 2), (((7, 1), 7), 2), (((8, 3), 24), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 7), (((2, 0), 1), 5), (((0, 7), 8), 4), (((5, 0), 1), 3), (((3, 0), 1), 3), (((0, 0), 1), 3), (((8, 0), 1), 3), (((0, 8), 3), 2), (((0, 9), 2), 2), (((0, 3), 4), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.82
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 75.55 (abduce 83.66)
Hit samples:  5068  Ave length:  6.96
Symbols:  16 [(0, 1582), (1, 1833), (2, 1730), (3, 1715), (4, 1609), (5, 1670), (6, 1676), (7, 1700), (8, 1634), (9, 1584), (10, 3387), (11, 3382), (12, 1657), (13, 3239), (14, 4481), (15, 2385)]
Head:  [((-1,), 1000), ((1, -1, 1), 994), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 314), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5068 samples for 100 iterations, 0.9362806261343013, 2 epochs, take 29 sec.
Epoch time: 10m 45s
------------------------------
Epoch 62/99 (max_len=15, data=6058)
Train acc: 76.57 (abduce 96.90)
Hit samples:  5870  Ave length:  7.14
Symbols:  16 [(0, 1705), (1, 2056), (2, 2031), (3, 2076), (4, 1964), (5, 1998), (6, 2020), (7, 2070), (8, 1978), (9, 1956), (10, 3925), (11, 3711), (12, 2900), (13, 3446), (14, 5291), (15, 2809)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 112), ((1, -1, 4, 4, 1, 4, 4), 368), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 144), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 110), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 98)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 3), 12), 3), (((3, 8), 24), 3), (((7, 3), 21), 2), (((5, 9), 45), 2), (((8, 7), 56), 2), (((3, 1), 3), 2), (((2, 9), 18), 2), (((4, 8), 32), 2), (((4, 7), 28), 2), (((9, 1), 9), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 7), (((8, 0), 1), 3), (((2, 0), 1), 3), (((1, 1), 2), 2), (((0, 7), 8), 2), (((5, 0), 1), 2), (((7, 0), 1), 2), (((3, 0), 1), 2), (((0, 3), 4), 2), (((4, 7), 0), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.82
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 76.57 (abduce 83.72)
Hit samples:  5072  Ave length:  6.96
Symbols:  16 [(0, 1586), (1, 1833), (2, 1728), (3, 1718), (4, 1606), (5, 1671), (6, 1676), (7, 1704), (8, 1639), (9, 1590), (10, 3395), (11, 3376), (12, 1682), (13, 3226), (14, 4480), (15, 2392)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5072 samples for 100 iterations, 0.9361225992861594, 2 epochs, take 29 sec.
Epoch time: 10m 3s
------------------------------
Epoch 63/99 (max_len=15, data=6058)
Train acc: 76.78 (abduce 97.24)
Hit samples:  5891  Ave length:  7.16
Symbols:  16 [(0, 1705), (1, 2062), (2, 2060), (3, 2073), (4, 1964), (5, 2008), (6, 2026), (7, 2079), (8, 1995), (9, 1987), (10, 3928), (11, 3749), (12, 2913), (13, 3476), (14, 5342), (15, 2810)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 370), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 143), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 98)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((7, 8), 56), 3), (((3, 6), 18), 3), (((8, 2), 16), 2), (((8, 8), 64), 2), (((2, 9), 18), 2), (((5, 3), 15), 2), (((3, 7), 21), 2), (((6, 7), 42), 2), (((10, 2), 20), 2), (((7, 9), 63), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 9), (((8, 0), 1), 5), (((0, 0), 1), 4), (((3, 0), 1), 3), (((5, 0), 1), 3), (((8, 0), 8), 2), (((0, 3), 4), 2), (((0, 9), 4), 2), (((7, 0), 1), 2), (((2, 0), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.82
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 76.78 (abduce 83.77)
Hit samples:  5075  Ave length:  6.96
Symbols:  16 [(0, 1588), (1, 1834), (2, 1730), (3, 1718), (4, 1604), (5, 1673), (6, 1677), (7, 1706), (8, 1640), (9, 1597), (10, 3395), (11, 3383), (12, 1678), (13, 3236), (14, 4490), (15, 2392)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5075 samples for 100 iterations, 0.9361930901785461, 2 epochs, take 29 sec.
Epoch time: 10m 19s
------------------------------
Epoch 64/99 (max_len=15, data=6058)
Train acc: 77.01 (abduce 97.44)
Hit samples:  5903  Ave length:  7.17
Symbols:  16 [(0, 1715), (1, 2069), (2, 2063), (3, 2072), (4, 1980), (5, 2015), (6, 2035), (7, 2087), (8, 1991), (9, 1989), (10, 3932), (11, 3766), (12, 2952), (13, 3461), (14, 5353), (15, 2839)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 144), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 1), 4), 4), (((7, 8), 56), 3), (((6, 7), 42), 3), (((5, 8), 40), 3), (((7, 9), 63), 2), (((9, 7), 63), 2), (((5, 11), 55), 2), (((6, 9), 54), 2), (((6, 2), 12), 2), (((3, 8), 24), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 7), (((2, 0), 1), 4), (((0, 0), 1), 4), (((8, 0), 1), 4), (((0, 8), 3), 3), (((7, 0), 1), 3), (((3, 0), 1), 3), (((0, 4), 2), 2), (((0, 3), 4), 2), (((0, 8), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.82
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 77.01 (abduce 83.77)
Hit samples:  5075  Ave length:  6.96
Symbols:  16 [(0, 1589), (1, 1836), (2, 1731), (3, 1717), (4, 1604), (5, 1671), (6, 1679), (7, 1705), (8, 1640), (9, 1597), (10, 3388), (11, 3387), (12, 1687), (13, 3232), (14, 4490), (15, 2394)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 314), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5075 samples for 100 iterations, 0.9364019577333296, 2 epochs, take 29 sec.
Epoch time: 10m 7s
------------------------------
Epoch 65/99 (max_len=15, data=6058)
Train acc: 77.00 (abduce 97.54)
Hit samples:  5909  Ave length:  7.18
Symbols:  16 [(0, 1727), (1, 2071), (2, 2066), (3, 2078), (4, 1989), (5, 2023), (6, 2043), (7, 2080), (8, 2001), (9, 1971), (10, 3979), (11, 3761), (12, 2960), (13, 3436), (14, 5378), (15, 2846)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 144), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((7, 7), 49), 3), (((8, 8), 64), 3), (((6, 1), 6), 3), (((4, 4), 16), 3), (((6, 6), 36), 3), (((6, 3), 18), 2), (((8, 6), 48), 2), (((9, 2), 18), 2), (((8, 7), 56), 2), (((3, 6), 18), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 9), (((0, 7), 8), 4), (((0, 0), 1), 4), (((2, 0), 1), 4), (((5, 0), 1), 3), (((6, 0), 1), 3), (((8, 0), 1), 3), (((0, 3), 4), 3), (((3, 0), 1), 2), (((8, 0), 8), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.82
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 77.00 (abduce 83.82)
Hit samples:  5078  Ave length:  6.97
Symbols:  16 [(0, 1590), (1, 1840), (2, 1726), (3, 1720), (4, 1604), (5, 1678), (6, 1681), (7, 1705), (8, 1644), (9, 1592), (10, 3396), (11, 3386), (12, 1692), (13, 3228), (14, 4492), (15, 2400)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 5078 samples for 100 iterations, 0.9360829988126873, 2 epochs, take 29 sec.
Epoch time: 10m 5s
------------------------------
Epoch 66/99 (max_len=15, data=6058)
Train acc: 77.29 (abduce 97.46)
Hit samples:  5904  Ave length:  7.17
Symbols:  16 [(0, 1728), (1, 2060), (2, 2062), (3, 2079), (4, 1983), (5, 2022), (6, 2033), (7, 2084), (8, 1996), (9, 1975), (10, 3958), (11, 3739), (12, 2954), (13, 3465), (14, 5303), (15, 2915)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 369), ((2, 2, 5, 2, 2, -1, 5), 140), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 144), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 6), 36), 3), (((8, 5), 40), 3), (((6, 2), 12), 3), (((5, 1), 5), 3), (((4, 1), 4), 2), (((6, 1), 6), 2), (((4, 4), 16), 2), (((9, 5), 45), 2), (((7, 1), 7), 2), (((2, 6), 12), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 6), (((2, 0), 1), 4), (((5, 0), 1), 4), (((0, 0), 1), 4), (((0, 3), 4), 2), (((0, 9), 2), 2), (((6, 0), 1), 2), (((0, 4), 2), 2), (((0, 0), 2), 2), (((3, 0), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.82
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 77.29 (abduce 83.91)
Hit samples:  5083  Ave length:  6.97
Symbols:  16 [(0, 1590), (1, 1841), (2, 1735), (3, 1723), (4, 1609), (5, 1683), (6, 1680), (7, 1708), (8, 1646), (9, 1593), (10, 3397), (11, 3382), (12, 1706), (13, 3240), (14, 4459), (15, 2453)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 5083 samples for 100 iterations, 0.9372266892368458, 2 epochs, take 29 sec.
Epoch time: 9m 49s
------------------------------
Epoch 67/99 (max_len=15, data=6058)
Train acc: 77.42 (abduce 97.62)
Hit samples:  5914  Ave length:  7.18
Symbols:  16 [(0, 1733), (1, 2068), (2, 2075), (3, 2071), (4, 1993), (5, 2036), (6, 2037), (7, 2078), (8, 2007), (9, 1980), (10, 3942), (11, 3766), (12, 2957), (13, 3497), (14, 5316), (15, 2918)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 370), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 8), 32), 4), (((4, 3), 12), 3), (((3, 1), 3), 3), (((6, 1), 6), 2), (((3, 4), 12), 2), (((9, 8), 72), 2), (((4, 7), 28), 2), (((6, 3), 18), 2), (((7, 1), 7), 2), (((6, 7), 42), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 7), (((0, 0), 1), 5), (((8, 0), 1), 4), (((5, 0), 1), 3), (((2, 0), 1), 3), (((6, 0), 1), 3), (((3, 0), 1), 3), (((7, 0), 1), 3), (((0, 3), 4), 2), (((0, 7), 8), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.83
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 77.42 (abduce 83.87)
Hit samples:  5081  Ave length:  6.97
Symbols:  16 [(0, 1592), (1, 1840), (2, 1735), (3, 1721), (4, 1608), (5, 1681), (6, 1679), (7, 1704), (8, 1646), (9, 1592), (10, 3388), (11, 3384), (12, 1705), (13, 3240), (14, 4457), (15, 2449)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5081 samples for 100 iterations, 0.9372123881313346, 2 epochs, take 29 sec.
Epoch time: 10m 5s
------------------------------
Epoch 68/99 (max_len=15, data=6058)
Train acc: 77.56 (abduce 97.47)
Hit samples:  5905  Ave length:  7.18
Symbols:  16 [(0, 1732), (1, 2065), (2, 2063), (3, 2074), (4, 1981), (5, 2026), (6, 2036), (7, 2077), (8, 2004), (9, 1977), (10, 3949), (11, 3747), (12, 2956), (13, 3476), (14, 5314), (15, 2912)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 370), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 143), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((0, 1), 0), 3), (((4, 1), 4), 3), (((3, 1), 3), 3), (((9, 9), 81), 2), (((3, 6), 18), 2), (((6, 7), 42), 2), (((6, 1), 6), 2), (((4, 4), 16), 2), (((9, 5), 45), 2), (((2, 7), 14), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((8, 0), 1), 5), (((3, 0), 1), 4), (((7, 0), 1), 3), (((1, 0), 1), 3), (((0, 0), 1), 3), (((5, 0), 1), 3), (((0, 3), 4), 2), (((6, 0), 1), 2), (((11, 0), 1), 2), (((2, 0), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.83
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 77.56 (abduce 83.87)
Hit samples:  5081  Ave length:  6.97
Symbols:  16 [(0, 1592), (1, 1839), (2, 1733), (3, 1720), (4, 1608), (5, 1681), (6, 1679), (7, 1704), (8, 1646), (9, 1593), (10, 3393), (11, 3381), (12, 1701), (13, 3239), (14, 4454), (15, 2448)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 283), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5081 samples for 100 iterations, 0.9370534579650391, 2 epochs, take 29 sec.
Epoch time: 10m 1s
------------------------------
Epoch 69/99 (max_len=15, data=6058)
Train acc: 77.54 (abduce 97.51)
Hit samples:  5907  Ave length:  7.18
Symbols:  16 [(0, 1736), (1, 2066), (2, 2066), (3, 2073), (4, 1991), (5, 2022), (6, 2040), (7, 2076), (8, 2002), (9, 1972), (10, 3950), (11, 3745), (12, 2972), (13, 3468), (14, 5314), (15, 2926)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 112), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 143), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 112), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 5), 30), 3), (((9, 5), 45), 3), (((6, 6), 36), 3), (((4, 1), 4), 3), (((6, 4), 24), 2), (((8, 2), 16), 2), (((9, 1), 9), 2), (((9, 9), 81), 2), (((6, 7), 42), 2), (((6, 2), 12), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 7), (((5, 0), 1), 4), (((2, 0), 1), 4), (((0, 0), 1), 3), (((6, 0), 1), 3), (((8, 0), 1), 3), (((3, 0), 1), 2), (((8, 0), 8), 2), (((0, 4), 2), 2), (((0, 9), 2), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.83
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 77.54 (abduce 83.89)
Hit samples:  5082  Ave length:  6.97
Symbols:  16 [(0, 1592), (1, 1840), (2, 1734), (3, 1721), (4, 1610), (5, 1683), (6, 1679), (7, 1706), (8, 1645), (9, 1590), (10, 3396), (11, 3380), (12, 1708), (13, 3234), (14, 4458), (15, 2448)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 283), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5082 samples for 100 iterations, 0.9369918699186992, 2 epochs, take 29 sec.
Percentage of None result: 31.00
              precision    recall  f1-score   support

           0       0.94      1.00      0.97      4016
           1       0.90      0.94      0.92      5142
           2       1.00      0.98      0.99      5321
           3       1.00      0.97      0.98      5241
           4       1.00      1.00      1.00      5279
           5       0.99      0.98      0.99      5383
           6       0.99      0.95      0.97      5427
           7       0.99      0.97      0.98      5462
           8       1.00      1.00      1.00      5453
           9       0.97      1.00      0.98      5476
           +       0.95      1.00      0.97     13199
           -       1.00      0.99      1.00     10734
           *       0.99      0.97      0.98     13491
           /       1.00      1.00      1.00      9876
           (       0.80      0.97      0.87     21081
           )       0.99      0.76      0.86     21081

    accuracy                           0.95    141662
   macro avg       0.97      0.97      0.97    141662
weighted avg       0.96      0.95      0.95    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (     )
0  283    0    0    0    0    0    0    0    0    0    0    0    0    0     0     0
1    0  340    1    0    0    0    0    0    0    0    1    0    0    0    13     6
2    0    1  368    1    0    0    0    1    0    0    0    0    1    0     2     0
3    0    0    0  358    0    2    2    3    0    2    0    0    0    0     0     0
4    0    0    0    0  372    0    0    0    0    0    0    0    0    0     0     0
5    7    0    0    0    0  372    0    0    0    0    0    0    0    0     0     0
6    9    0    0    0    0    0  363    0    0    9    0    0    0    0     0     0
7    0    0    0    0    0    0    0  375    0    0   10    0    0    0     0     0
8    0    0    0    0    0    0    0    0  384    0    0    0    0    0     0     0
9    0    0    0    0    0    0    0    0    0  386    0    0    0    0     0     0
+    0    0    0    0    0    0    0    0    0    0  928    0    0    0     0     3
-    0    0    0    0    0    0    0    0    0    0    2  752    2    0     0     0
*    0    0    0    0    0    0    0    0    0    0   31    0  920    0     0     0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  697     0     0
(    0   37    0    0    0    0    0    0    0    0    0    0    7    0  1443     0
)    0    0    0    0    0    0    0    0    0    0    0    0    0    0   353  1134
result accuracy by length:
1 ( 2%) 97.00
3 ( 2%) 76.00
5 ( 2%) 51.16
7 ( 4%) 41.05
9 ( 4%) 35.18
11 ( 3%) 31.82
13 ( 4%) 37.96
15 ( 4%) 31.68
17 ( 4%) 30.58
19 ( 4%) 29.90
21 ( 4%) 29.29
23 ( 4%) 27.32
25 ( 4%) 25.00
27 ( 4%) 28.57
29 ( 3%) 30.37
31 ( 3%) 18.45
33 ( 2%) 19.29
35 ( 2%) 18.49
37 ( 2%) 22.22
39 ( 3%) 16.45
41 ( 3%) 17.45
43 ( 2%) 18.84
45 ( 2%) 15.18
47 ( 2%) 18.18
49 ( 2%) 14.79
51 ( 2%) 15.91
53 ( 2%) 16.42
55 ( 2%) 14.29
57 ( 2%) 18.88
59 ( 2%) 14.95
61 ( 1%) 10.94
63 ( 0%)  5.71
65 ( 0%) 11.11
67 ( 0%)  0.00
result accuracy by symbol:
( (91%) 24.49
) (91%) 24.49
* (87%) 19.58
+ (84%) 24.79
- (77%) 27.45
/ (76%) 25.83
0 (52%) 28.24
1 (60%) 24.56
2 (61%) 23.29
3 (62%) 23.64
4 (61%) 22.99
5 (62%) 22.95
6 (62%) 22.64
7 (63%) 22.60
8 (64%) 22.64
9 (63%) 22.99
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 90.00
2 ( 0%) 100.00
3 ( 0%) 100.00
4 ( 0%) 100.00
5 ( 0%) 90.00
6 ( 0%) 90.00
7 ( 0%) 100.00
8 ( 0%) 100.00
9 ( 0%) 100.00
result accuracy by result:
0 (21%) 58.67
1 (10%) 36.14
2 ( 4%) 47.47
3 ( 2%) 47.41
4 ( 2%) 41.35
5 ( 2%) 46.00
6 ( 2%) 40.87
7 ( 2%) 45.13
8 ( 2%) 35.04
9 ( 1%) 47.67
result accuracy by generalization:
1 (22.45%) 54.18
2 (22.96%) 44.53
3 (22.53%)  2.08
4 (15.82%) 26.97
5 (16.24%)  5.40
error cases:
1 ( [-1] [-1] 1 None
6 0 [-1] [-1] 6 0
5 0 [-1] [-1] 5 0
5*9 5+9 [1, -1, 1] [1, -1, 1] 45 14
9*1 9*1 [1, -1, 1] [1, -1, 1] 9 0
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 0
6*4 6*4 [1, -1, 1] [1, -1, 1] 24 0
3*5 3*5 [1, -1, 1] [1, -1, 1] 15 0
5*5 5*5 [1, -1, 1] [1, -1, 1] 25 0
2*4 2*4 [1, -1, 1] [1, -1, 1] 8 4
5*3 5*3 [1, -1, 1] [1, -1, 1] 15 0
7*9 7*9 [1, -1, 1] [1, -1, 1] 63 0
8*1 8*1 [1, -1, 1] [1, -1, 1] 8 0
6*1 6*1 [1, -1, 1] [1, -1, 1] 6 0
3*2 3*2 [1, -1, 1] [1, -1, 1] 6 0
3*3 3*3 [1, -1, 1] [1, -1, 1] 9 0
6*3 6*3 [1, -1, 1] [1, -1, 1] 18 0
8*2 8*2 [1, -1, 1] [1, -1, 1] 16 0
7*7 7*7 [1, -1, 1] [1, -1, 1] 49 0
3-2 3-1 [1, -1, 1] [1, -1, 1] 1 2
val (Perception Acc=94.83, Head Acc=100.00, Result Acc=28.00)
Epoch time: 10m 56s
------------------------------
Epoch 70/99 (max_len=15, data=6058)
Train acc: 77.54 (abduce 97.54)
Hit samples:  5909  Ave length:  7.18
Symbols:  16 [(0, 1729), (1, 2065), (2, 2070), (3, 2080), (4, 1989), (5, 2035), (6, 2036), (7, 2069), (8, 2000), (9, 1983), (10, 3963), (11, 3745), (12, 2960), (13, 3478), (14, 5315), (15, 2924)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 370), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 144), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 112), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((9, 3), 27), 3), (((5, 4), 20), 2), (((8, 6), 48), 2), (((7, 7), 49), 2), (((2, 8), 16), 2), (((3, 2), 6), 2), (((3, 4), 12), 2), (((8, 3), 24), 2), (((4, 7), 28), 2), (((6, 4), 24), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 9), (((7, 0), 1), 4), (((2, 0), 1), 4), (((8, 0), 1), 4), (((3, 0), 1), 3), (((0, 0), 1), 3), (((0, 7), 8), 2), (((11, 0), 1), 2), (((0, 8), 1), 2), (((0, 8), 3), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.83
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 77.54 (abduce 83.91)
Hit samples:  5083  Ave length:  6.97
Symbols:  16 [(0, 1592), (1, 1841), (2, 1736), (3, 1721), (4, 1610), (5, 1684), (6, 1679), (7, 1706), (8, 1645), (9, 1592), (10, 3395), (11, 3383), (12, 1707), (13, 3238), (14, 4460), (15, 2450)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 283), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5083 samples for 100 iterations, 0.9369621038968369, 2 epochs, take 29 sec.
Epoch time: 9m 43s
------------------------------
Epoch 71/99 (max_len=15, data=6058)
Train acc: 77.69 (abduce 97.61)
Hit samples:  5913  Ave length:  7.18
Symbols:  16 [(0, 1729), (1, 2063), (2, 2071), (3, 2080), (4, 1992), (5, 2024), (6, 2044), (7, 2077), (8, 2010), (9, 1980), (10, 3976), (11, 3744), (12, 2955), (13, 3480), (14, 5322), (15, 2910)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 370), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 144), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((7, 8), 56), 4), (((5, 1), 5), 3), (((4, 8), 32), 3), (((8, 5), 40), 3), (((9, 6), 54), 3), (((4, 1), 4), 3), (((6, 8), 48), 2), (((7, 1), 7), 2), (((5, 7), 35), 2), (((5, 3), 15), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 6), (((8, 0), 1), 4), (((2, 0), 1), 4), (((6, 0), 1), 3), (((0, 0), 1), 3), (((0, 0), 2), 2), (((3, 0), 1), 2), (((11, 0), 1), 2), (((0, 7), 8), 2), (((4, 0), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.83
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 77.69 (abduce 83.94)
Hit samples:  5085  Ave length:  6.97
Symbols:  16 [(0, 1592), (1, 1841), (2, 1735), (3, 1723), (4, 1611), (5, 1682), (6, 1679), (7, 1707), (8, 1651), (9, 1592), (10, 3400), (11, 3384), (12, 1705), (13, 3239), (14, 4463), (15, 2451)]
Head:  [((-1,), 1000), ((1, -1, 1), 996), ((1, 3, 1, -1, 3), 283), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5085 samples for 100 iterations, 0.9367085037371315, 2 epochs, take 29 sec.
Epoch time: 9m 41s
------------------------------
Epoch 72/99 (max_len=15, data=6058)
Train acc: 77.77 (abduce 97.61)
Hit samples:  5913  Ave length:  7.18
Symbols:  16 [(0, 1732), (1, 2075), (2, 2071), (3, 2088), (4, 1994), (5, 2013), (6, 2040), (7, 2077), (8, 2007), (9, 1978), (10, 3971), (11, 3753), (12, 2938), (13, 3498), (14, 5328), (15, 2916)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 370), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 144), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 98)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 8), 32), 3), (((2, 1), 2), 3), (((3, 1), 3), 3), (((6, 1), 6), 3), (((5, 4), 20), 2), (((5, 6), 30), 2), (((9, 9), 81), 2), (((0, 3), 81), 2), (((3, 2), 6), 2), (((7, 9), 63), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 8), (((0, 3), 4), 3), (((2, 0), 1), 3), (((0, 0), 1), 3), (((0, 7), 8), 3), (((0, 6), 3), 2), (((8, 0), 1), 2), (((0, 9), 2), 1), (((6, 4), 24), 1), (((7, 6), 42), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.83
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 77.77 (abduce 83.92)
Hit samples:  5084  Ave length:  6.97
Symbols:  16 [(0, 1592), (1, 1840), (2, 1734), (3, 1723), (4, 1611), (5, 1681), (6, 1679), (7, 1706), (8, 1649), (9, 1591), (10, 3400), (11, 3384), (12, 1698), (13, 3240), (14, 4461), (15, 2451)]
Head:  [((-1,), 1000), ((1, -1, 1), 996), ((1, 3, 1, -1, 3), 283), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5084 samples for 100 iterations, 0.9367099322799097, 2 epochs, take 29 sec.
Epoch time: 9m 49s
------------------------------
Epoch 73/99 (max_len=15, data=6058)
Train acc: 77.79 (abduce 97.52)
Hit samples:  5908  Ave length:  7.18
Symbols:  16 [(0, 1738), (1, 2056), (2, 2075), (3, 2069), (4, 1992), (5, 2016), (6, 2040), (7, 2081), (8, 2012), (9, 1968), (10, 3965), (11, 3742), (12, 2924), (13, 3506), (14, 5323), (15, 2903)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 369), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 142), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 3), (((6, 1), 6), 3), (((9, 6), 54), 2), (((6, 6), 36), 2), (((9, 7), 63), 2), (((3, 1), 3), 2), (((7, 1), 7), 2), (((2, 8), 16), 2), (((5, 3), 15), 2), (((3, 4), 12), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((3, 0), 1), 4), (((1, 0), 1), 4), (((2, 0), 1), 4), (((5, 0), 1), 3), (((0, 0), 1), 3), (((8, 0), 1), 3), (((6, 0), 1), 3), (((0, 9), 2), 2), (((0, 8), 3), 2), (((7, 0), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.83
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 77.79 (abduce 83.91)
Hit samples:  5083  Ave length:  6.97
Symbols:  16 [(0, 1593), (1, 1840), (2, 1734), (3, 1722), (4, 1610), (5, 1680), (6, 1679), (7, 1707), (8, 1648), (9, 1590), (10, 3398), (11, 3384), (12, 1700), (13, 3238), (14, 4461), (15, 2451)]
Head:  [((-1,), 1000), ((1, -1, 1), 996), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5083 samples for 100 iterations, 0.9367856638916325, 2 epochs, take 29 sec.
Epoch time: 9m 56s
------------------------------
Epoch 74/99 (max_len=15, data=6058)
Train acc: 77.79 (abduce 97.59)
Hit samples:  5912  Ave length:  7.18
Symbols:  16 [(0, 1732), (1, 2067), (2, 2073), (3, 2068), (4, 1995), (5, 2016), (6, 2044), (7, 2088), (8, 2007), (9, 1977), (10, 3968), (11, 3741), (12, 2937), (13, 3507), (14, 5328), (15, 2920)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 370), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 144), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 98)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((7, 1), 7), 4), (((3, 8), 24), 3), (((6, 2), 12), 3), (((8, 8), 64), 3), (((2, 9), 18), 2), (((6, 3), 18), 2), (((5, 4), 20), 2), (((2, 1), 2), 2), (((4, 3), 12), 2), (((7, 5), 35), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 6), (((8, 0), 1), 5), (((2, 0), 1), 3), (((0, 7), 8), 3), (((6, 0), 1), 3), (((7, 0), 1), 3), (((3, 0), 1), 3), (((6, 9), 54), 2), (((0, 6), 3), 2), (((5, 0), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.83
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 77.79 (abduce 83.92)
Hit samples:  5084  Ave length:  6.97
Symbols:  16 [(0, 1593), (1, 1841), (2, 1736), (3, 1722), (4, 1610), (5, 1680), (6, 1679), (7, 1709), (8, 1649), (9, 1591), (10, 3398), (11, 3383), (12, 1705), (13, 3240), (14, 4463), (15, 2451)]
Head:  [((-1,), 1000), ((1, -1, 1), 996), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5084 samples for 100 iterations, 0.9367559943582511, 2 epochs, take 29 sec.
Epoch time: 10m 0s
------------------------------
Epoch 75/99 (max_len=15, data=6058)
Train acc: 77.75 (abduce 97.46)
Hit samples:  5904  Ave length:  7.18
Symbols:  16 [(0, 1732), (1, 2071), (2, 2069), (3, 2075), (4, 1981), (5, 2018), (6, 2036), (7, 2081), (8, 2005), (9, 1962), (10, 3954), (11, 3745), (12, 2932), (13, 3491), (14, 5323), (15, 2909)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 112), ((1, -1, 4, 4, 1, 4, 4), 370), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 143), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 112), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 97)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((0, 1), 0), 6), (((3, 1), 3), 3), (((9, 6), 54), 2), (((9, 7), 63), 2), (((4, 8), 32), 2), (((5, 6), 30), 2), (((7, 8), 56), 2), (((4, 3), 12), 2), (((8, 9), 72), 2), (((4, 4), 16), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 7), (((2, 0), 1), 5), (((0, 0), 1), 4), (((5, 0), 1), 3), (((6, 0), 1), 3), (((8, 0), 1), 3), (((0, 3), 4), 3), (((0, 1), 36), 2), (((6, 9), 54), 2), (((3, 0), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.83
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 77.75 (abduce 83.92)
Hit samples:  5084  Ave length:  6.97
Symbols:  16 [(0, 1593), (1, 1841), (2, 1736), (3, 1722), (4, 1608), (5, 1680), (6, 1679), (7, 1709), (8, 1649), (9, 1593), (10, 3399), (11, 3383), (12, 1703), (13, 3241), (14, 4463), (15, 2451)]
Head:  [((-1,), 1000), ((1, -1, 1), 996), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5084 samples for 100 iterations, 0.9368124118476728, 2 epochs, take 29 sec.
Epoch time: 9m 57s
------------------------------
Epoch 76/99 (max_len=15, data=6058)
Train acc: 77.77 (abduce 97.56)
Hit samples:  5910  Ave length:  7.18
Symbols:  16 [(0, 1732), (1, 2068), (2, 2066), (3, 2077), (4, 1989), (5, 2017), (6, 2042), (7, 2079), (8, 2004), (9, 1981), (10, 3958), (11, 3748), (12, 2956), (13, 3481), (14, 5317), (15, 2909)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 370), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 8), 64), 4), (((5, 1), 5), 4), (((4, 3), 12), 3), (((5, 6), 30), 3), (((6, 3), 18), 3), (((7, 2), 14), 3), (((3, 6), 18), 2), (((6, 5), 30), 2), (((2, 8), 16), 2), (((0, 1), 0), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((2, 0), 1), 5), (((8, 0), 1), 5), (((1, 0), 1), 5), (((0, 0), 1), 4), (((0, 8), 3), 3), (((0, 7), 8), 3), (((3, 0), 1), 3), (((7, 0), 1), 3), (((0, 9), 2), 2), (((0, 6), 3), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.83
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 77.77 (abduce 83.92)
Hit samples:  5084  Ave length:  6.97
Symbols:  16 [(0, 1593), (1, 1841), (2, 1736), (3, 1721), (4, 1608), (5, 1681), (6, 1679), (7, 1708), (8, 1650), (9, 1593), (10, 3397), (11, 3383), (12, 1707), (13, 3239), (14, 4463), (15, 2451)]
Head:  [((-1,), 1000), ((1, -1, 1), 996), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5084 samples for 100 iterations, 0.9368688293370945, 2 epochs, take 29 sec.
Epoch time: 9m 38s
------------------------------
Epoch 77/99 (max_len=15, data=6058)
Train acc: 77.74 (abduce 97.52)
Hit samples:  5908  Ave length:  7.18
Symbols:  16 [(0, 1734), (1, 2076), (2, 2075), (3, 2071), (4, 1988), (5, 2015), (6, 2040), (7, 2076), (8, 2006), (9, 1968), (10, 3956), (11, 3745), (12, 2953), (13, 3487), (14, 5318), (15, 2914)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 112), ((1, -1, 4, 4, 1, 4, 4), 369), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 112), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 97)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((7, 1), 7), 3), (((3, 1), 3), 3), (((6, 1), 6), 3), (((6, 2), 12), 3), (((4, 4), 16), 3), (((2, 8), 16), 2), (((2, 1), 2), 2), (((3, 8), 24), 2), (((2, 7), 14), 2), (((0, 1), 0), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 8), (((0, 0), 1), 4), (((3, 0), 1), 3), (((7, 0), 1), 3), (((0, 8), 3), 3), (((2, 0), 1), 3), (((0, 3), 6), 2), (((8, 0), 1), 2), (((0, 3), 4), 2), (((0, 0), 2), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.83
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 77.74 (abduce 83.92)
Hit samples:  5084  Ave length:  6.97
Symbols:  16 [(0, 1593), (1, 1841), (2, 1736), (3, 1722), (4, 1608), (5, 1680), (6, 1679), (7, 1708), (8, 1650), (9, 1593), (10, 3398), (11, 3383), (12, 1706), (13, 3239), (14, 4463), (15, 2451)]
Head:  [((-1,), 1000), ((1, -1, 1), 996), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5084 samples for 100 iterations, 0.9368124118476728, 2 epochs, take 29 sec.
Epoch time: 9m 40s
------------------------------
Epoch 78/99 (max_len=15, data=6058)
Train acc: 77.77 (abduce 97.62)
Hit samples:  5914  Ave length:  7.18
Symbols:  16 [(0, 1722), (1, 2072), (2, 2077), (3, 2080), (4, 1987), (5, 2019), (6, 2037), (7, 2086), (8, 2009), (9, 1987), (10, 3958), (11, 3760), (12, 2947), (13, 3495), (14, 5331), (15, 2907)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 144), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 98)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((3, 1), 3), 6), (((6, 4), 24), 3), (((7, 8), 56), 3), (((5, 9), 45), 2), (((7, 10), 70), 2), (((4, 1), 4), 2), (((4, 7), 28), 2), (((4, 4), 16), 2), (((6, 9), 54), 2), (((6, 1), 6), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 5), (((6, 0), 1), 4), (((2, 0), 1), 4), (((0, 0), 1), 3), (((0, 6), 3), 2), (((0, 8), 1), 2), (((0, 8), 3), 2), (((8, 0), 1), 2), (((11, 0), 1), 2), (((0, 9), 4), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.83
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 77.77 (abduce 83.92)
Hit samples:  5084  Ave length:  6.97
Symbols:  16 [(0, 1591), (1, 1841), (2, 1736), (3, 1722), (4, 1608), (5, 1680), (6, 1679), (7, 1710), (8, 1650), (9, 1593), (10, 3398), (11, 3384), (12, 1703), (13, 3241), (14, 4463), (15, 2451)]
Head:  [((-1,), 1000), ((1, -1, 1), 996), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5084 samples for 100 iterations, 0.9368406205923836, 2 epochs, take 29 sec.
Epoch time: 9m 43s
------------------------------
Epoch 79/99 (max_len=15, data=6058)
Train acc: 77.77 (abduce 97.61)
Hit samples:  5913  Ave length:  7.18
Symbols:  16 [(0, 1722), (1, 2066), (2, 2075), (3, 2079), (4, 1984), (5, 2015), (6, 2044), (7, 2085), (8, 2010), (9, 1989), (10, 3979), (11, 3748), (12, 2953), (13, 3476), (14, 5328), (15, 2910)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 372), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 143), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((0, 1), 0), 4), (((6, 1), 6), 3), (((5, 3), 15), 3), (((4, 7), 28), 3), (((4, 4), 16), 3), (((5, 1), 5), 3), (((3, 8), 24), 3), (((8, 2), 16), 2), (((8, 9), 72), 2), (((7, 8), 56), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 7), (((0, 0), 1), 4), (((2, 0), 1), 3), (((0, 7), 8), 3), (((0, 3), 4), 3), (((5, 0), 1), 2), (((8, 0), 8), 2), (((6, 0), 1), 2), (((0, 8), 1), 2), (((0, 1), 36), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.83
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 77.77 (abduce 83.94)
Hit samples:  5085  Ave length:  6.97
Symbols:  16 [(0, 1591), (1, 1841), (2, 1736), (3, 1722), (4, 1609), (5, 1681), (6, 1679), (7, 1710), (8, 1650), (9, 1594), (10, 3400), (11, 3383), (12, 1704), (13, 3241), (14, 4463), (15, 2451)]
Head:  [((-1,), 1000), ((1, -1, 1), 996), ((1, 3, 1, -1, 3), 283), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5085 samples for 100 iterations, 0.9367931180369482, 2 epochs, take 29 sec.
Percentage of None result: 32.92
              precision    recall  f1-score   support

           0       0.94      1.00      0.97      4016
           1       0.87      0.95      0.90      5142
           2       1.00      0.98      0.99      5321
           3       1.00      0.97      0.98      5241
           4       1.00      1.00      1.00      5279
           5       1.00      0.98      0.99      5383
           6       0.99      0.98      0.98      5427
           7       0.99      0.97      0.98      5462
           8       0.99      1.00      1.00      5453
           9       0.98      1.00      0.99      5476
           +       0.99      1.00      0.99     13199
           -       1.00      0.99      1.00     10734
           *       0.99      1.00      0.99     13491
           /       1.00      1.00      1.00      9876
           (       0.79      0.96      0.87     21081
           )       0.99      0.76      0.86     21081

    accuracy                           0.95    141662
   macro avg       0.97      0.97      0.97    141662
weighted avg       0.96      0.95      0.95    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (     )
0  283    0    0    0    0    0    0    0    0    0    0    0    0    0     0     0
1    0  343    1    0    0    0    0    0    0    0    1    0    0    0    11     5
2    0    1  367    1    0    0    0    1    2    0    0    0    1    0     1     0
3    0    0    0  358    0    0    2    3    0    5    0    0    0    0     0     0
4    0    0    0    0  372    0    0    0    0    0    0    0    0    0     0     0
5    7    0    0    0    0  372    0    0    0    0    0    0    0    0     0     0
6    9    0    0    0    0    0  373    0    0    0    0    0    0    0     0     0
7    0    0    0    0    0    0    0  375    0    0   10    0    0    0     0     0
8    0    0    0    0    0    0    0    0  384    0    0    0    0    0     0     0
9    0    0    0    0    0    0    0    0    0  386    0    0    0    0     0     0
+    0    0    0    0    0    0    0    0    0    0  928    0    0    0     0     3
-    0    0    0    0    0    0    0    0    0    0    2  752    2    0     0     0
*    0    0    0    0    0    0    0    0    0    0    0    0  952    0     0     0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  697     0     0
(    0   52    0    0    0    0    0    0    0    0    0    0    7    0  1428     0
)    0    0    0    0    0    0    0    0    0    0    0    0    0    0   360  1127
result accuracy by length:
1 ( 2%) 97.00
3 ( 2%) 76.00
5 ( 2%) 51.16
7 ( 4%) 41.48
9 ( 4%) 34.67
11 ( 3%) 32.39
13 ( 4%) 38.43
15 ( 4%) 31.68
17 ( 4%) 30.58
19 ( 4%) 30.39
21 ( 4%) 31.31
23 ( 4%) 28.29
25 ( 4%) 25.00
27 ( 4%) 26.11
29 ( 3%) 29.32
31 ( 3%) 19.05
33 ( 2%) 17.14
35 ( 2%) 18.49
37 ( 2%) 23.93
39 ( 3%) 15.13
41 ( 3%) 16.78
43 ( 2%) 16.67
45 ( 2%) 16.96
47 ( 2%) 16.67
49 ( 2%) 14.08
51 ( 2%) 18.18
53 ( 2%) 12.69
55 ( 2%) 12.61
57 ( 2%) 13.99
59 ( 2%) 16.82
61 ( 1%)  6.25
63 ( 0%)  5.71
65 ( 0%) 11.11
67 ( 0%)  0.00
result accuracy by symbol:
( (91%) 24.11
) (91%) 24.11
* (87%) 19.32
+ (84%) 24.28
- (77%) 26.96
/ (76%) 25.33
0 (52%) 27.73
1 (60%) 24.16
2 (61%) 22.46
3 (62%) 22.72
4 (61%) 22.29
5 (62%) 22.20
6 (62%) 22.25
7 (63%) 22.18
8 (64%) 22.04
9 (63%) 22.70
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 90.00
2 ( 0%) 100.00
3 ( 0%) 100.00
4 ( 0%) 100.00
5 ( 0%) 90.00
6 ( 0%) 90.00
7 ( 0%) 100.00
8 ( 0%) 100.00
9 ( 0%) 100.00
result accuracy by result:
0 (21%) 56.86
1 (10%) 34.83
2 ( 4%) 46.97
3 ( 2%) 48.15
4 ( 2%) 39.85
5 ( 2%) 47.00
6 ( 2%) 42.61
7 ( 2%) 46.90
8 ( 2%) 35.04
9 ( 1%) 47.67
result accuracy by generalization:
1 (22.45%) 54.36
2 (22.96%) 44.71
3 (22.53%)  1.90
4 (15.82%) 24.77
5 (16.24%)  5.15
error cases:
1 ( [-1] [-1] 1 None
6 0 [-1] [-1] 6 0
5 0 [-1] [-1] 5 0
5*9 5*9 [1, -1, 1] [1, -1, 1] 45 0
9*1 9*1 [1, -1, 1] [1, -1, 1] 9 0
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 0
6*4 6*4 [1, -1, 1] [1, -1, 1] 24 0
3*5 3*5 [1, -1, 1] [1, -1, 1] 15 0
5*5 5*5 [1, -1, 1] [1, -1, 1] 25 0
2*4 2*4 [1, -1, 1] [1, -1, 1] 8 4
5*3 5*3 [1, -1, 1] [1, -1, 1] 15 0
7*9 7*9 [1, -1, 1] [1, -1, 1] 63 0
8*1 8*1 [1, -1, 1] [1, -1, 1] 8 0
6*1 6*1 [1, -1, 1] [1, -1, 1] 6 0
3*2 3*2 [1, -1, 1] [1, -1, 1] 6 0
3*3 3*3 [1, -1, 1] [1, -1, 1] 9 0
6*3 6*3 [1, -1, 1] [1, -1, 1] 18 0
8*2 8*2 [1, -1, 1] [1, -1, 1] 16 0
7*7 7*7 [1, -1, 1] [1, -1, 1] 49 0
3-2 3-1 [1, -1, 1] [1, -1, 1] 1 2
val (Perception Acc=95.04, Head Acc=100.00, Result Acc=27.65)
Epoch time: 10m 39s
------------------------------
Epoch 80/99 (max_len=inf, data=11170)
Train acc: 62.14 (abduce 89.16)
Hit samples:  9959  Ave length:  13.85
Symbols:  16 [(0, 4876), (1, 5922), (2, 5833), (3, 5710), (4, 5590), (5, 5678), (6, 5622), (7, 5601), (8, 5568), (9, 5474), (10, 13149), (11, 12285), (12, 9548), (13, 10933), (14, 23340), (15, 12766)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 370), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 98)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 7), (((9, 0), 1), 3), (((8, 0), 1), 3), (((6, 0), 1), 3), (((0, 3), 4), 3), (((0, 0), 1), 3), (((0, 9), 1), 2), (((4, 1), 0), 2), (((8, 7), 1), 2), (((15, 1), 24), 2)]
Update grammar with invented programs and set frontiers to none.
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0)))
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.90
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 62.14 (abduce 78.67)
Hit samples:  8787  Ave length:  14.05
Symbols:  16 [(0, 4631), (1, 5509), (2, 5153), (3, 4985), (4, 4827), (5, 4985), (6, 4889), (7, 4923), (8, 4984), (9, 4761), (10, 11859), (11, 11510), (12, 6963), (13, 10528), (14, 21308), (15, 11664)]
Head:  [((-1,), 1000), ((1, -1, 1), 996), ((1, 3, 1, -1, 3), 283), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 8787 samples for 100 iterations, 0.9290810583176087, 1 epochs, take 50 sec.
Epoch time: 70m 33s
------------------------------
Epoch 81/99 (max_len=inf, data=11170)
Train acc: 63.22 (abduce 90.73)
Hit samples:  10135  Ave length:  14.02
Symbols:  16 [(0, 5016), (1, 6132), (2, 6002), (3, 5845), (4, 5702), (5, 5877), (6, 5755), (7, 5756), (8, 5716), (9, 5654), (10, 13403), (11, 12698), (12, 9972), (13, 11248), (14, 24127), (15, 13220)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 370), ((2, 2, 5, 2, 2, -1, 5), 140), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 144), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 98)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 5), (((3, 0), 1), 3), (((0, 0), 1), 3), (((2, 1), 1), 3), (((0, 11), 2), 2), (((2, 0), 1), 2), (((3, 1), 1), 2), (((0, 1), 36), 2), (((8, 0), 8), 2), (((8, 0), 3), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0)))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.94
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.90
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 63.22 (abduce 79.18)
Hit samples:  8844  Ave length:  14.12
Symbols:  16 [(0, 4677), (1, 5588), (2, 5194), (3, 5031), (4, 4837), (5, 5056), (6, 4942), (7, 4979), (8, 5036), (9, 4828), (10, 11928), (11, 11619), (12, 7088), (13, 10689), (14, 21563), (15, 11821)]
Head:  [((-1,), 1000), ((1, -1, 1), 996), ((1, 3, 1, -1, 3), 283), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 316), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 8844 samples for 100 iterations, 0.9303629200166565, 1 epochs, take 51 sec.
Epoch time: 64m 12s
------------------------------
Epoch 82/99 (max_len=inf, data=11170)
Train acc: 64.06 (abduce 91.59)
Hit samples:  10231  Ave length:  14.12
Symbols:  16 [(0, 5110), (1, 6257), (2, 6057), (3, 5910), (4, 5803), (5, 5953), (6, 5857), (7, 5831), (8, 5834), (9, 5719), (10, 13607), (11, 12833), (12, 10310), (13, 11350), (14, 24600), (15, 13464)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 140), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 98)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 5), (((5, 0), 1), 4), (((0, 0), 1), 3), (((0, 2), 6), 2), (((0, 1), 6), 2), (((0, 3), 4), 2), (((8, 0), 1), 2), (((0, 3), 1), 2), (((0, 0), 12), 1), (((5, 0), 3), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0)))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.94
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.90
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 64.06 (abduce 79.41)
Hit samples:  8870  Ave length:  14.14
Symbols:  16 [(0, 4686), (1, 5603), (2, 5216), (3, 5043), (4, 4876), (5, 5073), (6, 4972), (7, 4991), (8, 5080), (9, 4839), (10, 11956), (11, 11613), (12, 7252), (13, 10688), (14, 21654), (15, 11904)]
Head:  [((-1,), 1000), ((1, -1, 1), 996), ((1, 3, 1, -1, 3), 283), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 317), ((2, 2, 5, 2, 2, -1, 5), 109), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 8870 samples for 100 iterations, 0.9309503690831115, 1 epochs, take 51 sec.
Epoch time: 60m 31s
------------------------------
Epoch 83/99 (max_len=inf, data=11170)
Train acc: 64.67 (abduce 92.25)
Hit samples:  10304  Ave length:  14.19
Symbols:  16 [(0, 5205), (1, 6313), (2, 6116), (3, 5959), (4, 5875), (5, 5989), (6, 5914), (7, 5904), (8, 5936), (9, 5753), (10, 13727), (11, 12948), (12, 10525), (13, 11454), (14, 24943), (15, 13657)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 372), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 100)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-13 (int -> int -> int), Samples: 100,  [(((3, 0), 1), 4), (((1, 0), 1), 3), (((8, 0), 1), 2), (((6, 0), 1), 2), (((0, 4), 1), 2), (((0, 0), 1), 2), (((9, 0), 3), 1), (((0, 1), 21), 1), (((19, 4), 64), 1), (((0, 9), 2), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0)))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.94
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.90
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 64.67 (abduce 79.53)
Hit samples:  8884  Ave length:  14.17
Symbols:  16 [(0, 4714), (1, 5605), (2, 5242), (3, 5047), (4, 4896), (5, 5083), (6, 4987), (7, 5008), (8, 5114), (9, 4834), (10, 12008), (11, 11634), (12, 7268), (13, 10736), (14, 21751), (15, 11945)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 316), ((2, 2, 5, 2, 2, -1, 5), 110), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 8884 samples for 100 iterations, 0.9311522816829796, 1 epochs, take 51 sec.
Epoch time: 58m 6s
------------------------------
Epoch 84/99 (max_len=inf, data=11170)
Train acc: 64.95 (abduce 92.74)
Hit samples:  10359  Ave length:  14.22
Symbols:  16 [(0, 5223), (1, 6400), (2, 6152), (3, 5983), (4, 5897), (5, 6033), (6, 5964), (7, 5969), (8, 5985), (9, 5796), (10, 13789), (11, 13052), (12, 10678), (13, 11524), (14, 25110), (15, 13750)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 372), ((2, 2, 5, 2, 2, -1, 5), 140), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 100)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 6), (((6, 0), 1), 4), (((0, 3), 4), 4), (((0, 0), 1), 3), (((9, 0), 1), 3), (((3, 0), 1), 3), (((7, 4), 1), 2), (((8, 0), 1), 2), (((0, 4), 2), 2), (((0, 0), 9), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0)))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.94
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.90
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 64.95 (abduce 79.61)
Hit samples:  8892  Ave length:  14.18
Symbols:  16 [(0, 4722), (1, 5631), (2, 5244), (3, 5058), (4, 4893), (5, 5093), (6, 4997), (7, 5017), (8, 5117), (9, 4840), (10, 12003), (11, 11642), (12, 7297), (13, 10778), (14, 21780), (15, 11962)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 316), ((2, 2, 5, 2, 2, -1, 5), 110), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 8892 samples for 100 iterations, 0.9314529562003268, 1 epochs, take 51 sec.
Epoch time: 60m 45s
------------------------------
Epoch 85/99 (max_len=inf, data=11170)
Train acc: 65.30 (abduce 93.14)
Hit samples:  10404  Ave length:  14.26
Symbols:  16 [(0, 5273), (1, 6442), (2, 6201), (3, 6025), (4, 5947), (5, 6029), (6, 6005), (7, 6004), (8, 6037), (9, 5824), (10, 13851), (11, 13113), (12, 10779), (13, 11640), (14, 25331), (15, 13863)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 100)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-13 (int -> int -> int), Samples: 100,  [(((8, 0), 1), 5), (((5, 0), 1), 4), (((1, 0), 1), 3), (((2, 0), 1), 3), (((6, 0), 1), 3), (((2, 1), 1), 3), (((3, 0), 1), 2), (((0, 1), 36), 2), (((0, 6), 2), 2), (((0, 3), 5), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0)))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.94
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.90
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 65.30 (abduce 79.78)
Hit samples:  8911  Ave length:  14.19
Symbols:  16 [(0, 4726), (1, 5654), (2, 5259), (3, 5071), (4, 4924), (5, 5093), (6, 5012), (7, 5030), (8, 5139), (9, 4851), (10, 12028), (11, 11669), (12, 7334), (13, 10817), (14, 21862), (15, 11996)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 316), ((2, 2, 5, 2, 2, -1, 5), 110), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 8911 samples for 100 iterations, 0.9312695212114024, 1 epochs, take 52 sec.
Epoch time: 58m 17s
------------------------------
Epoch 86/99 (max_len=inf, data=11170)
Train acc: 65.15 (abduce 92.90)
Hit samples:  10377  Ave length:  14.23
Symbols:  16 [(0, 5221), (1, 6443), (2, 6170), (3, 5990), (4, 5914), (5, 6017), (6, 6000), (7, 5973), (8, 6017), (9, 5811), (10, 13748), (11, 13093), (12, 10787), (13, 11551), (14, 25180), (15, 13788)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 372), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 98)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 7), (((5, 0), 1), 4), (((0, 0), 1), 4), (((0, 5), 4), 2), (((2, 0), 1), 2), (((7, 0), 1), 2), (((3, 1), 0), 2), (((0, 6), 2), 2), (((8, 0), 1), 2), (((0, 3), 12), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0)))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.94
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.90
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 65.15 (abduce 79.74)
Hit samples:  8907  Ave length:  14.19
Symbols:  16 [(0, 4712), (1, 5650), (2, 5260), (3, 5070), (4, 4913), (5, 5100), (6, 5020), (7, 5011), (8, 5144), (9, 4854), (10, 11989), (11, 11669), (12, 7365), (13, 10804), (14, 21840), (15, 12002)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 316), ((2, 2, 5, 2, 2, -1, 5), 110), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 8907 samples for 100 iterations, 0.9317816823967786, 1 epochs, take 51 sec.
Epoch time: 61m 14s
------------------------------
Epoch 87/99 (max_len=inf, data=11170)
Train acc: 65.46 (abduce 93.31)
Hit samples:  10423  Ave length:  14.27
Symbols:  16 [(0, 5262), (1, 6463), (2, 6214), (3, 6029), (4, 5960), (5, 6060), (6, 6030), (7, 5998), (8, 6061), (9, 5858), (10, 13854), (11, 13161), (12, 10861), (13, 11636), (14, 25391), (15, 13905)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 374), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 7), (((2, 0), 1), 3), (((5, 0), 1), 3), (((2, 1), 1), 2), (((6, 0), 1), 2), (((1, 7), 0), 2), (((3, 0), 1), 2), (((4, 0), 0), 2), (((7, 2), 0), 2), (((0, 1), 18), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0)))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.94
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.90
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 65.46 (abduce 79.84)
Hit samples:  8918  Ave length:  14.21
Symbols:  16 [(0, 4725), (1, 5661), (2, 5265), (3, 5083), (4, 4923), (5, 5110), (6, 5030), (7, 5022), (8, 5151), (9, 4867), (10, 12018), (11, 11692), (12, 7374), (13, 10835), (14, 21897), (15, 12031)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 316), ((2, 2, 5, 2, 2, -1, 5), 110), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 8918 samples for 100 iterations, 0.9316409333459632, 1 epochs, take 52 sec.
Epoch time: 60m 47s
------------------------------
Epoch 88/99 (max_len=inf, data=11170)
Train acc: 65.56 (abduce 93.35)
Hit samples:  10427  Ave length:  14.28
Symbols:  16 [(0, 5250), (1, 6462), (2, 6228), (3, 6038), (4, 5940), (5, 6080), (6, 6027), (7, 6006), (8, 6056), (9, 5887), (10, 13880), (11, 13141), (12, 10886), (13, 11640), (14, 25419), (15, 13921)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 10), (((0, 0), 1), 6), (((0, 7), 8), 3), (((2, 0), 1), 3), (((3, 0), 1), 3), (((0, 6), 3), 3), (((5, 0), 1), 2), (((0, 2), 9), 2), (((0, 3), 4), 2), (((8, 0), 8), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0)))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.94
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.90
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 65.56 (abduce 79.74)
Hit samples:  8907  Ave length:  14.2
Symbols:  16 [(0, 4715), (1, 5644), (2, 5258), (3, 5081), (4, 4903), (5, 5104), (6, 5019), (7, 5017), (8, 5140), (9, 4869), (10, 11987), (11, 11656), (12, 7377), (13, 10823), (14, 21849), (15, 11997)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 316), ((2, 2, 5, 2, 2, -1, 5), 110), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 8907 samples for 100 iterations, 0.9313898401600772, 1 epochs, take 51 sec.
Epoch time: 61m 23s
------------------------------
Epoch 89/99 (max_len=inf, data=11170)
Train acc: 65.53 (abduce 93.29)
Hit samples:  10421  Ave length:  14.27
Symbols:  16 [(0, 5253), (1, 6438), (2, 6215), (3, 6020), (4, 5950), (5, 6073), (6, 6030), (7, 6003), (8, 6060), (9, 5887), (10, 13856), (11, 13139), (12, 10878), (13, 11635), (14, 25383), (15, 13905)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 372), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 7), (((0, 0), 1), 4), (((2, 0), 1), 4), (((5, 0), 2), 2), (((0, 0), 2), 2), (((3, 1), 1), 2), (((0, 7), 1), 2), (((9, 0), 1), 2), (((4, 0), 1), 2), (((5, 0), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0)))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.94
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.90
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 65.53 (abduce 79.73)
Hit samples:  8906  Ave length:  14.19
Symbols:  16 [(0, 4716), (1, 5633), (2, 5259), (3, 5072), (4, 4905), (5, 5106), (6, 5017), (7, 5019), (8, 5143), (9, 4869), (10, 11971), (11, 11659), (12, 7366), (13, 10837), (14, 21842), (15, 11994)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 316), ((2, 2, 5, 2, 2, -1, 5), 110), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 8906 samples for 100 iterations, 0.9314679450667679, 1 epochs, take 51 sec.
Percentage of None result: 38.73
              precision    recall  f1-score   support

           0       0.97      1.00      0.98      4016
           1       0.77      0.97      0.86      5142
           2       1.00      0.99      1.00      5321
           3       1.00      0.98      0.99      5241
           4       1.00      1.00      1.00      5279
           5       1.00      0.98      0.99      5383
           6       1.00      1.00      1.00      5427
           7       0.99      0.97      0.98      5462
           8       1.00      1.00      1.00      5453
           9       0.98      1.00      0.99      5476
           +       0.99      1.00      0.99     13199
           -       1.00      1.00      1.00     10734
           *       0.99      1.00      1.00     13491
           /       1.00      1.00      1.00      9876
           (       0.80      0.94      0.86     21081
           )       1.00      0.76      0.86     21081

    accuracy                           0.95    141662
   macro avg       0.97      0.97      0.97    141662
weighted avg       0.96      0.95      0.95    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (     )
0  283    0    0    0    0    0    0    0    0    0    0    0    0    0     0     0
1    1  350    0    0    0    0    0    0    0    0    0    0    0    1     8     2
2    0    1  373    0    0    0    0    0    0    0    0    0    0    0     1     0
3    0    0    0  361    0    0    0    3    0    5    0    0    0    0     0     0
4    0    0    0    0  372    0    0    0    0    0    0    0    0    0     0     0
5    7    0    0    0    0  372    0    0    0    0    0    0    0    0     0     0
6    0    0    0    0    0    0  383    0    0    0    0    0    0    0     0     0
7    0    0    0    0    0    0    0  375    0    0   10    0    0    0     0     0
8    0    0    0    0    0    0    0    0  384    0    0    0    0    0     0     0
9    0    0    0    0    0    0    0    0    0  386    0    0    0    0     0     0
+    0    3    0    0    0    0    0    0    0    0  928    0    0    0     0     0
-    0    0    0    0    0    0    0    0    0    0    2  755    0    0     0     0
*    0    0    0    0    0    0    0    0    0    0    0    0  952    0     0     0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  697     0     0
(    0   82    0    0    0    0    0    0    0    0    0    0    7    0  1398     0
)    0   15    0    0    0    0    0    0    0    0    0    0    0    0   345  1127
result accuracy by length:
1 ( 2%) 99.00
3 ( 2%) 77.00
5 ( 2%) 51.16
7 ( 4%) 40.61
9 ( 4%) 37.19
11 ( 3%) 30.11
13 ( 4%) 38.89
15 ( 4%) 30.20
17 ( 4%) 30.58
19 ( 4%) 27.94
21 ( 4%) 28.28
23 ( 4%) 26.34
25 ( 4%) 21.50
27 ( 4%) 21.67
29 ( 3%) 27.75
31 ( 3%) 16.07
33 ( 2%) 12.14
35 ( 2%) 16.44
37 ( 2%) 18.80
39 ( 3%) 13.16
41 ( 3%) 16.78
43 ( 2%) 11.59
45 ( 2%) 14.29
47 ( 2%) 12.88
49 ( 2%)  7.75
51 ( 2%) 18.18
53 ( 2%)  9.70
55 ( 2%)  9.24
57 ( 2%) 11.89
59 ( 2%) 11.21
61 ( 1%)  3.12
63 ( 0%)  2.86
65 ( 0%) 11.11
67 ( 0%) 33.33
result accuracy by symbol:
( (91%) 21.77
) (91%) 21.77
* (87%) 17.11
+ (84%) 21.81
- (77%) 24.30
/ (76%) 22.85
0 (52%) 24.73
1 (60%) 21.65
2 (61%) 20.27
3 (62%) 20.39
4 (61%) 20.10
5 (62%) 20.02
6 (62%) 20.03
7 (63%) 19.50
8 (64%) 19.55
9 (63%) 19.92
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 100.00
2 ( 0%) 100.00
3 ( 0%) 100.00
4 ( 0%) 100.00
5 ( 0%) 90.00
6 ( 0%) 100.00
7 ( 0%) 100.00
8 ( 0%) 100.00
9 ( 0%) 100.00
result accuracy by result:
0 (21%) 50.57
1 (10%) 33.52
2 ( 4%) 44.44
3 ( 2%) 46.67
4 ( 2%) 34.59
5 ( 2%) 45.00
6 ( 2%) 42.61
7 ( 2%) 46.02
8 ( 2%) 34.19
9 ( 1%) 46.51
result accuracy by generalization:
1 (22.45%) 53.09
2 (22.96%) 41.16
3 (22.53%)  1.81
4 (15.82%) 19.74
5 (16.24%)  4.27
error cases:
5 0 [-1] [-1] 5 0
5*9 5*9 [1, -1, 1] [1, -1, 1] 45 0
9*1 9*1 [1, -1, 1] [1, -1, 1] 9 0
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 0
6*4 6*4 [1, -1, 1] [1, -1, 1] 24 0
3*5 3*5 [1, -1, 1] [1, -1, 1] 15 0
5*5 5*5 [1, -1, 1] [1, -1, 1] 25 0
2*4 2*4 [1, -1, 1] [1, -1, 1] 8 4
5*3 5*3 [1, -1, 1] [1, -1, 1] 15 0
7*9 7*9 [1, -1, 1] [1, -1, 1] 63 0
8*1 8*1 [1, -1, 1] [1, -1, 1] 8 0
6*1 6*1 [1, -1, 1] [1, -1, 1] 6 0
3*2 3*2 [1, -1, 1] [1, -1, 1] 6 0
3*3 3*3 [1, -1, 1] [1, -1, 1] 9 0
6*3 6*3 [1, -1, 1] [1, -1, 1] 18 0
8*2 8*2 [1, -1, 1] [1, -1, 1] 16 0
7*7 7*7 [1, -1, 1] [1, -1, 1] 49 0
7+5 ++5 [1, -1, 1] [1, -1, 1] 12 None
8*3 8*3 [1, -1, 1] [1, -1, 1] 24 0
0*1 0*1 [1, -1, 1] [1, -1, 1] 0 1
val (Perception Acc=95.02, Head Acc=100.00, Result Acc=25.59)
Epoch time: 63m 1s
------------------------------
Epoch 90/99 (max_len=inf, data=11170)
Train acc: 65.45 (abduce 93.20)
Hit samples:  10410  Ave length:  14.26
Symbols:  16 [(0, 5241), (1, 6421), (2, 6192), (3, 6027), (4, 5939), (5, 6060), (6, 6019), (7, 5979), (8, 6043), (9, 5893), (10, 13796), (11, 13091), (12, 10898), (13, 11619), (14, 25328), (15, 13862)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 374), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 6), (((3, 0), 1), 4), (((2, 1), 1), 4), (((5, 0), 1), 3), (((8, 0), 8), 3), (((7, 0), 1), 3), (((8, 0), 1), 3), (((0, 9), 2), 2), (((5, 1), 1), 2), (((0, 0), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0)))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.94
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.90
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 65.45 (abduce 79.74)
Hit samples:  8907  Ave length:  14.19
Symbols:  16 [(0, 4715), (1, 5628), (2, 5255), (3, 5077), (4, 4905), (5, 5107), (6, 5018), (7, 5015), (8, 5146), (9, 4874), (10, 11973), (11, 11667), (12, 7386), (13, 10807), (14, 21851), (15, 11989)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 316), ((2, 2, 5, 2, 2, -1, 5), 110), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 8907 samples for 100 iterations, 0.9316367778630362, 1 epochs, take 51 sec.
Epoch time: 60m 4s
------------------------------
Epoch 91/99 (max_len=inf, data=11170)
Train acc: 65.76 (abduce 93.46)
Hit samples:  10440  Ave length:  14.28
Symbols:  16 [(0, 5266), (1, 6459), (2, 6227), (3, 6059), (4, 5969), (5, 6085), (6, 6050), (7, 6023), (8, 6043), (9, 5885), (10, 13897), (11, 13125), (12, 10935), (13, 11669), (14, 25490), (15, 13944)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 377), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 9), (((7, 0), 1), 5), (((3, 0), 1), 3), (((3, 1), 1), 2), (((2, 1), 1), 2), (((0, 13), 2), 2), (((4, 0), 0), 2), (((8, 0), 8), 2), (((4, 0), 1), 2), (((8, 0), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0)))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.94
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.90
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 65.76 (abduce 79.79)
Hit samples:  8913  Ave length:  14.2
Symbols:  16 [(0, 4717), (1, 5643), (2, 5270), (3, 5082), (4, 4917), (5, 5111), (6, 5027), (7, 5024), (8, 5133), (9, 4876), (10, 11999), (11, 11660), (12, 7400), (13, 10828), (14, 21890), (15, 12006)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 316), ((2, 2, 5, 2, 2, -1, 5), 110), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 8913 samples for 100 iterations, 0.9314678906330234, 1 epochs, take 52 sec.
Epoch time: 59m 51s
------------------------------
Epoch 92/99 (max_len=inf, data=11170)
Train acc: 65.83 (abduce 93.58)
Hit samples:  10453  Ave length:  14.3
Symbols:  16 [(0, 5276), (1, 6482), (2, 6249), (3, 6067), (4, 5968), (5, 6123), (6, 6060), (7, 6021), (8, 6055), (9, 5900), (10, 13931), (11, 13161), (12, 10964), (13, 11692), (14, 25558), (15, 13980)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 375), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 10), (((8, 0), 1), 3), (((0, 0), 1), 3), (((7, 0), 1), 3), (((16, 2), 14), 2), (((1, 7), 0), 2), (((0, 1), 1), 2), (((0, 1), 8), 2), (((6, 0), 1), 2), (((3, 0), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0)))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.94
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.90
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 65.83 (abduce 79.85)
Hit samples:  8919  Ave length:  14.2
Symbols:  16 [(0, 4721), (1, 5649), (2, 5275), (3, 5084), (4, 4914), (5, 5124), (6, 5032), (7, 5024), (8, 5134), (9, 4883), (10, 11999), (11, 11658), (12, 7416), (13, 10848), (14, 21903), (15, 12015)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 316), ((2, 2, 5, 2, 2, -1, 5), 110), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 8919 samples for 100 iterations, 0.9314645679236495, 1 epochs, take 52 sec.
Epoch time: 58m 58s
------------------------------
Epoch 93/99 (max_len=inf, data=11170)
Train acc: 65.70 (abduce 93.40)
Hit samples:  10433  Ave length:  14.28
Symbols:  16 [(0, 5242), (1, 6459), (2, 6223), (3, 6045), (4, 5952), (5, 6092), (6, 6045), (7, 6015), (8, 6028), (9, 5908), (10, 13872), (11, 13121), (12, 10925), (13, 11658), (14, 25371), (15, 14001)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-13 (int -> int -> int), Samples: 100,  [(((7, 0), 1), 4), (((5, 0), 1), 3), (((1, 0), 1), 3), (((3, 0), 1), 3), (((2, 0), 1), 3), (((9, 0), 1), 2), (((6, 0), 1), 2), (((4, 0), 0), 2), (((4, 0), 1), 2), (((7, 6), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0)))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.94
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.90
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 65.70 (abduce 79.83)
Hit samples:  8917  Ave length:  14.21
Symbols:  16 [(0, 4718), (1, 5646), (2, 5275), (3, 5084), (4, 4907), (5, 5123), (6, 5029), (7, 5035), (8, 5136), (9, 4886), (10, 12002), (11, 11666), (12, 7407), (13, 10847), (14, 21834), (15, 12096)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 316), ((2, 2, 5, 2, 2, -1, 5), 110), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 8917 samples for 100 iterations, 0.9319999052813538, 1 epochs, take 52 sec.
Epoch time: 59m 42s
------------------------------
Epoch 94/99 (max_len=inf, data=11170)
Train acc: 65.91 (abduce 93.59)
Hit samples:  10454  Ave length:  14.3
Symbols:  16 [(0, 5265), (1, 6484), (2, 6231), (3, 6060), (4, 5975), (5, 6112), (6, 6060), (7, 6022), (8, 6050), (9, 5935), (10, 13929), (11, 13154), (12, 10968), (13, 11689), (14, 25474), (15, 14048)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 6), (((0, 0), 1), 4), (((5, 0), 1), 3), (((8, 0), 1), 3), (((0, 7), 1), 2), (((9, 0), 1), 2), (((3, 2), 1), 2), (((10, 0), 1), 1), (((5, 1), 4), 1), (((0, 1), 3), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0)))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.94
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.91
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 65.91 (abduce 79.86)
Hit samples:  8920  Ave length:  14.21
Symbols:  16 [(0, 4718), (1, 5651), (2, 5271), (3, 5085), (4, 4917), (5, 5125), (6, 5034), (7, 5027), (8, 5135), (9, 4895), (10, 12017), (11, 11676), (12, 7408), (13, 10837), (14, 21851), (15, 12101)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 316), ((2, 2, 5, 2, 2, -1, 5), 110), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 8920 samples for 100 iterations, 0.9318332439170638, 1 epochs, take 52 sec.
Epoch time: 59m 29s
------------------------------
Epoch 95/99 (max_len=inf, data=11170)
Train acc: 65.98 (abduce 93.70)
Hit samples:  10466  Ave length:  14.3
Symbols:  16 [(0, 5290), (1, 6489), (2, 6259), (3, 6070), (4, 5978), (5, 6111), (6, 6061), (7, 6046), (8, 6063), (9, 5916), (10, 13944), (11, 13188), (12, 11012), (13, 11673), (14, 25517), (15, 14089)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 375), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 99)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 4), (((0, 0), 1), 4), (((5, 0), 1), 3), (((1, 1), 0), 2), (((4, 0), 1), 2), (((2, 0), 1), 2), (((2, 1), 1), 2), (((6, 0), 2), 2), (((8, 0), 1), 2), (((7, 0), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0)))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.94
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.90
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 65.98 (abduce 79.87)
Hit samples:  8922  Ave length:  14.22
Symbols:  16 [(0, 4725), (1, 5655), (2, 5281), (3, 5088), (4, 4919), (5, 5130), (6, 5033), (7, 5040), (8, 5138), (9, 4883), (10, 12035), (11, 11678), (12, 7440), (13, 10817), (14, 21862), (15, 12112)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 316), ((2, 2, 5, 2, 2, -1, 5), 110), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 8922 samples for 100 iterations, 0.9319830332082374, 1 epochs, take 52 sec.
Epoch time: 58m 22s
------------------------------
Epoch 96/99 (max_len=inf, data=11170)
Train acc: 65.79 (abduce 93.39)
Hit samples:  10432  Ave length:  14.28
Symbols:  16 [(0, 5263), (1, 6459), (2, 6223), (3, 6045), (4, 5954), (5, 6096), (6, 6048), (7, 6008), (8, 6035), (9, 5885), (10, 13824), (11, 13144), (12, 10988), (13, 11628), (14, 25379), (15, 13989)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 98)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-13 (int -> int -> int), Samples: 100,  [(((2, 0), 1), 5), (((1, 0), 1), 5), (((0, 0), 1), 5), (((8, 0), 1), 4), (((0, 1), 18), 3), (((4, 0), 1), 2), (((6, 0), 1), 2), (((0, 4), 1), 1), (((5, 1), 3), 1), (((4, 1), 0), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0)))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.94
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.90
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 65.79 (abduce 79.86)
Hit samples:  8920  Ave length:  14.21
Symbols:  16 [(0, 4720), (1, 5648), (2, 5275), (3, 5087), (4, 4917), (5, 5126), (6, 5038), (7, 5041), (8, 5143), (9, 4876), (10, 11985), (11, 11688), (12, 7447), (13, 10831), (14, 21850), (15, 12102)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 315), ((2, 2, 5, 2, 2, -1, 5), 110), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 8920 samples for 100 iterations, 0.9323599476233297, 1 epochs, take 52 sec.
Epoch time: 59m 28s
------------------------------
Epoch 97/99 (max_len=inf, data=11170)
Train acc: 65.95 (abduce 93.61)
Hit samples:  10456  Ave length:  14.3
Symbols:  16 [(0, 5263), (1, 6487), (2, 6241), (3, 6057), (4, 5978), (5, 6127), (6, 6081), (7, 6026), (8, 6051), (9, 5899), (10, 13858), (11, 13192), (12, 11028), (13, 11676), (14, 25476), (15, 14068)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 374), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 98)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-13 (int -> int -> int), Samples: 100,  [(((8, 0), 1), 5), (((6, 0), 1), 5), (((0, 0), 1), 4), (((1, 0), 1), 4), (((2, 0), 1), 4), (((0, 0), 2), 2), (((0, 3), 5), 2), (((7, 2), 0), 2), (((0, 7), 2), 2), (((7, 0), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0)))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.94
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.91
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 65.95 (abduce 79.91)
Hit samples:  8926  Ave length:  14.21
Symbols:  16 [(0, 4719), (1, 5656), (2, 5280), (3, 5092), (4, 4920), (5, 5134), (6, 5043), (7, 5038), (8, 5146), (9, 4883), (10, 12009), (11, 11700), (12, 7450), (13, 10826), (14, 21868), (15, 12118)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 316), ((2, 2, 5, 2, 2, -1, 5), 110), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 8926 samples for 100 iterations, 0.9322283696663042, 1 epochs, take 52 sec.
Epoch time: 58m 8s
------------------------------
Epoch 98/99 (max_len=inf, data=11170)
Train acc: 65.26 (abduce 92.78)
Hit samples:  10364  Ave length:  14.26
Symbols:  16 [(0, 5217), (1, 6333), (2, 6212), (3, 6007), (4, 5910), (5, 6042), (6, 6024), (7, 5960), (8, 5987), (9, 5849), (10, 13705), (11, 13004), (12, 10954), (13, 11517), (14, 25175), (15, 13900)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168), ((1, 3, 1, -1, 3), 362), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 368), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 112), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 97)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 9), (((0, 0), 1), 3), (((0, 0), 2), 3), (((0, 9), 4), 2), (((0, 1), 3), 2), (((3, 0), 1), 2), (((0, 8), 3), 2), (((4, 0), 0), 2), (((8, 0), 1), 2), (((0, 2), 5), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0)))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.94
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.90
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 65.26 (abduce 79.73)
Hit samples:  8906  Ave length:  14.2
Symbols:  16 [(0, 4710), (1, 5633), (2, 5268), (3, 5078), (4, 4911), (5, 5111), (6, 5020), (7, 5024), (8, 5124), (9, 4865), (10, 11957), (11, 11654), (12, 7455), (13, 10772), (14, 21788), (15, 12074)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 316), ((2, 2, 5, 2, 2, -1, 5), 110), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 8906 samples for 100 iterations, 0.9323020467558761, 1 epochs, take 51 sec.
Epoch time: 58m 42s
------------------------------
Epoch 99/99 (max_len=inf, data=11170)
Train acc: 65.67 (abduce 93.21)
Hit samples:  10411  Ave length:  14.26
Symbols:  16 [(0, 5243), (1, 6450), (2, 6230), (3, 6007), (4, 5941), (5, 6069), (6, 6033), (7, 5992), (8, 6018), (9, 5862), (10, 13783), (11, 13063), (12, 10992), (13, 11596), (14, 25208), (15, 14016)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 375), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 98)]
Semantics: 16/13/1 (total/solved/learn).
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 0), 1), 6), (((2, 0), 1), 5), (((0, 0), 1), 4), (((5, 0), 1), 3), (((0, 4), 1), 2), (((0, 2), 5), 2), (((0, 1), 18), 2), (((11, 0), 1), 2), (((3, 0), 1), 2), (((0, 7), 8), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0)))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0)))
Rescoring 1 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (incr $1) (decr0 $0))))))))) 0.94
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (if0 $1 $0 (decr0 $1))) $0 0))) 0.90
Symbol-13: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $1 $1 (incr ($2 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (decr0 ($2 $1 (decr0 $0)))))))))) $1 $0) $0))))))))) 0.95
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 65.67 (abduce 79.76)
Hit samples:  8909  Ave length:  14.21
Symbols:  16 [(0, 4708), (1, 5642), (2, 5283), (3, 5071), (4, 4910), (5, 5115), (6, 5029), (7, 5024), (8, 5140), (9, 4865), (10, 11974), (11, 11650), (12, 7474), (13, 10780), (14, 21764), (15, 12126)]
Head:  [((-1,), 1000), ((1, -1, 1), 995), ((1, 3, 1, -1, 3), 282), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 316), ((2, 2, 5, 2, 2, -1, 5), 110), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 100), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 8909 samples for 100 iterations, 0.9325984749713563, 1 epochs, take 52 sec.
Percentage of None result: 36.29
              precision    recall  f1-score   support

           0       0.97      1.00      0.98      4016
           1       0.79      0.95      0.86      5142
           2       1.00      0.99      0.99      5321
           3       1.00      0.98      0.99      5241
           4       1.00      1.00      1.00      5279
           5       1.00      0.98      0.99      5383
           6       1.00      0.97      0.99      5427
           7       0.99      0.95      0.97      5462
           8       1.00      1.00      1.00      5453
           9       0.96      1.00      0.98      5476
           +       0.99      1.00      0.99     13199
           -       1.00      1.00      1.00     10734
           *       0.99      1.00      1.00     13491
           /       1.00      1.00      1.00      9876
           (       0.80      0.94      0.86     21081
           )       1.00      0.76      0.86     21081

    accuracy                           0.95    141662
   macro avg       0.97      0.97      0.97    141662
weighted avg       0.96      0.95      0.95    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (     )
0  283    0    0    0    0    0    0    0    0    0    0    0    0    0     0     0
1    1  344    1    0    0    0    0    0    0    0    1    1    0    1     8     4
2    0    1  371    0    0    0    0    1    0    0    0    0    0    0     1     0
3    0    0    0  361    0    0    0    3    0    5    0    0    0    0     0     0
4    0    0    0    0  372    0    0    0    0    0    0    0    0    0     0     0
5    7    0    0    0    0  372    0    0    0    0    0    0    0    0     0     0
6    0    0    0    0    0    0  373    0    0    9    0    0    0    0     0     0
7    0   10    0    0    0    0    0  364    0    0   10    0    0    0     0     0
8    0    0    0    0    0    0    0    0  384    0    0    0    0    0     0     0
9    0    0    0    0    0    0    0    0    0  386    0    0    0    0     0     0
+    0    3    0    0    0    0    0    0    0    0  928    0    0    0     0     0
-    0    0    0    0    0    0    0    0    0    0    2  755    0    0     0     0
*    0    0    0    0    0    0    0    0    0    0    0    0  952    0     0     0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  697     0     0
(    0   74    0    0    0    0    0    0    0    0    0    0    7    0  1405     0
)    0    0    0    0    0    0    0    0    0    0    0    0    0    0   353  1134
result accuracy by length:
1 ( 2%) 98.00
3 ( 2%) 77.00
5 ( 2%) 51.16
7 ( 4%) 40.17
9 ( 4%) 36.18
11 ( 3%) 31.25
13 ( 4%) 38.89
15 ( 4%) 31.19
17 ( 4%) 30.58
19 ( 4%) 28.92
21 ( 4%) 29.29
23 ( 4%) 25.37
25 ( 4%) 21.50
27 ( 4%) 24.14
29 ( 3%) 29.84
31 ( 3%) 17.26
33 ( 2%) 14.29
35 ( 2%) 16.44
37 ( 2%) 21.37
39 ( 3%) 13.16
41 ( 3%) 16.78
43 ( 2%) 13.04
45 ( 2%) 16.07
47 ( 2%) 14.39
49 ( 2%)  9.86
51 ( 2%) 17.42
53 ( 2%) 11.19
55 ( 2%)  8.40
57 ( 2%) 13.29
59 ( 2%) 14.95
61 ( 1%)  4.69
63 ( 0%)  8.57
65 ( 0%) 11.11
67 ( 0%)  0.00
result accuracy by symbol:
( (91%) 22.62
) (91%) 22.62
* (87%) 18.07
+ (84%) 22.65
- (77%) 25.20
/ (76%) 23.86
0 (52%) 25.70
1 (60%) 22.62
2 (61%) 20.96
3 (62%) 21.28
4 (61%) 20.80
5 (62%) 20.93
6 (62%) 20.88
7 (63%) 20.25
8 (64%) 20.61
9 (63%) 21.14
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 100.00
2 ( 0%) 100.00
3 ( 0%) 100.00
4 ( 0%) 100.00
5 ( 0%) 90.00
6 ( 0%) 100.00
7 ( 0%) 90.00
8 ( 0%) 100.00
9 ( 0%) 100.00
result accuracy by result:
0 (21%) 53.33
1 (10%) 34.64
2 ( 4%) 46.46
3 ( 2%) 46.67
4 ( 2%) 35.34
5 ( 2%) 46.00
6 ( 2%) 43.48
7 ( 2%) 42.48
8 ( 2%) 34.19
9 ( 1%) 47.67
result accuracy by generalization:
1 (22.45%) 53.27
2 (22.96%) 42.58
3 (22.53%)  1.90
4 (15.82%) 21.42
5 (16.24%)  4.77
error cases:
7 1 [-1] [-1] 7 1
5 0 [-1] [-1] 5 0
5*9 5*9 [1, -1, 1] [1, -1, 1] 45 0
9*1 9*1 [1, -1, 1] [1, -1, 1] 9 0
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 0
6*4 6*4 [1, -1, 1] [1, -1, 1] 24 0
3*5 3*5 [1, -1, 1] [1, -1, 1] 15 0
5*5 5*5 [1, -1, 1] [1, -1, 1] 25 0
2*4 2*4 [1, -1, 1] [1, -1, 1] 8 4
5*3 5*3 [1, -1, 1] [1, -1, 1] 15 0
7*9 7*9 [1, -1, 1] [1, -1, 1] 63 0
8*1 8*1 [1, -1, 1] [1, -1, 1] 8 0
6*1 6*1 [1, -1, 1] [1, -1, 1] 6 0
3*2 3*2 [1, -1, 1] [1, -1, 1] 6 0
3*3 3*3 [1, -1, 1] [1, -1, 1] 9 0
6*3 6*3 [1, -1, 1] [1, -1, 1] 18 0
8*2 8*2 [1, -1, 1] [1, -1, 1] 16 0
7*7 7*7 [1, -1, 1] [1, -1, 1] 49 0
7+5 ++5 [1, -1, 1] [1, -1, 1] 12 None
8*3 8*3 [1, -1, 1] [1, -1, 1] 24 0
val (Perception Acc=94.90, Head Acc=100.00, Result Acc=26.33)
Epoch time: 62m 23s
Percentage of None result: 9.80
              precision    recall  f1-score   support

           0       0.97      1.00      0.99      4016
           1       0.87      0.97      0.92      5142
           2       1.00      0.99      0.99      5321
           3       1.00      0.98      0.99      5241
           4       1.00      1.00      1.00      5279
           5       1.00      0.98      0.99      5383
           6       1.00      0.97      0.99      5427
           7       0.99      0.96      0.98      5462
           8       1.00      1.00      1.00      5453
           9       0.96      1.00      0.98      5476
           +       0.97      1.00      0.98     13199
           -       1.00      1.00      1.00     10734
           *       0.99      0.96      0.98     13491
           /       0.98      1.00      0.99      9876
           (       0.80      0.97      0.88     21081
           )       0.99      0.76      0.86     21081

    accuracy                           0.95    141662
   macro avg       0.97      0.97      0.97    141662
weighted avg       0.96      0.95      0.95    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (     )
0  283    0    0    0    0    0    0    0    0    0    0    0    0    0     0     0
1    0  352    1    0    0    0    0    0    0    0    0    0    0    0     3     3
2    0    2  371    0    0    0    0    1    0    0    0    0    0    0     0     0
3    0    0    0  360    0    0    0    2    0    5    0    0    0    0     0     0
4    0    0    0    0  372    0    0    0    0    0    0    0    0    0     0     0
5    6    0    0    0    0  373    0    0    0    0    0    0    0    0     0     0
6    0    0    0    0    0    0  373    0    0    9    0    0    0    0     0     0
7    0   10    0    0    0    0    0  371    0    0    3    0    0    0     0     0
8    0    0    0    0    0    0    0    0  384    0    0    0    0    0     0     0
9    0    0    0    0    0    0    0    0    0  386    0    0    0    0     0     0
+    0    2    0    0    0    0    0    0    0    0  928    0    0    0     0     0
-    0    0    0    0    0    0    0    0    0    0    2  754    0    0     0     0
*    0    0    0    0    0    0    0    0    0    0   22    0  914   14     0     0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  696     0     0
(    0   35    0    0    0    0    0    0    0    0    0    0    4    0  1443     4
)    0    0    0    0    0    0    0    0    0    0    0    0    0    0   353  1134
result accuracy by length:
1 ( 2%) 98.00
3 ( 2%) 78.00
5 ( 2%) 51.94
7 ( 4%) 42.79
9 ( 4%) 43.72
11 ( 3%) 36.36
13 ( 4%) 43.06
15 ( 4%) 39.60
17 ( 4%) 39.81
19 ( 4%) 41.18
21 ( 4%) 38.89
23 ( 4%) 38.54
25 ( 4%) 31.00
27 ( 4%) 37.44
29 ( 3%) 44.50
31 ( 3%) 32.14
33 ( 2%) 25.71
35 ( 2%) 28.77
37 ( 2%) 34.19
39 ( 3%) 26.32
41 ( 3%) 28.19
43 ( 2%) 26.81
45 ( 2%) 25.00
47 ( 2%) 28.79
49 ( 2%) 26.06
51 ( 2%) 31.82
53 ( 2%) 26.12
55 ( 2%) 21.85
57 ( 2%) 22.38
59 ( 2%) 23.36
61 ( 1%) 20.31
63 ( 0%) 11.43
65 ( 0%) 22.22
67 ( 0%) 33.33
result accuracy by symbol:
( (91%) 33.56
) (91%) 33.56
* (87%) 28.06
+ (84%) 33.40
- (77%) 36.80
/ (76%) 35.95
0 (52%) 37.85
1 (60%) 34.64
2 (61%) 32.76
3 (62%) 32.62
4 (61%) 32.40
5 (62%) 31.84
6 (62%) 31.69
7 (63%) 31.35
8 (64%) 31.08
9 (63%) 31.64
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 100.00
2 ( 0%) 100.00
3 ( 0%) 100.00
4 ( 0%) 100.00
5 ( 0%) 90.00
6 ( 0%) 100.00
7 ( 0%) 90.00
8 ( 0%) 100.00
9 ( 0%) 100.00
result accuracy by result:
0 (21%) 74.10
1 (10%) 56.74
2 ( 4%) 58.59
3 ( 2%) 61.48
4 ( 2%) 48.87
5 ( 2%) 59.00
6 ( 2%) 53.91
7 ( 2%) 58.41
8 ( 2%) 41.03
9 ( 1%) 62.79
result accuracy by generalization:
1 (22.45%) 63.45
2 (22.96%) 55.20
3 (22.53%)  5.71
4 (15.82%) 42.19
5 (16.24%)  9.42
error cases:
7 1 [-1] [-1] 7 1
5 0 [-1] [-1] 5 0
5*9 5*9 [1, -1, 1] [1, -1, 1] 45 0
9*1 9*1 [1, -1, 1] [1, -1, 1] 9 0
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 0
6*4 6*4 [1, -1, 1] [1, -1, 1] 24 0
3*5 3*5 [1, -1, 1] [1, -1, 1] 15 0
5*5 5*5 [1, -1, 1] [1, -1, 1] 25 0
2*4 2*4 [1, -1, 1] [1, -1, 1] 8 4
5*3 5*3 [1, -1, 1] [1, -1, 1] 15 0
7*9 7*9 [1, -1, 1] [1, -1, 1] 63 0
8*1 8*1 [1, -1, 1] [1, -1, 1] 8 0
6*1 6*1 [1, -1, 1] [1, -1, 1] 6 0
3*2 3*2 [1, -1, 1] [1, -1, 1] 6 0
3*3 3*3 [1, -1, 1] [1, -1, 1] 9 0
6*3 6*3 [1, -1, 1] [1, -1, 1] 18 0
8*2 8*2 [1, -1, 1] [1, -1, 1] 16 0
7*7 7*7 [1, -1, 1] [1, -1, 1] 49 0
8*3 8*3 [1, -1, 1] [1, -1, 1] 24 0
0*1 0*1 [1, -1, 1] [1, -1, 1] 0 1
val (Perception Acc=95.03, Head Acc=100.00, Result Acc=36.41)
------------------------------
Evaluate on test set...
Percentage of None result: 11.80
              precision    recall  f1-score   support

           0       0.98      0.99      0.99     39465
           1       0.85      0.96      0.91     51797
           2       1.00      0.99      0.99     52546
           3       0.99      1.00      0.99     52953
           4       1.00      0.99      0.99     53234
           5       1.00      0.99      1.00     53430
           6       0.99      0.99      0.99     53860
           7       1.00      0.97      0.98     54695
           8       0.98      0.99      0.98     54671
           9       0.99      0.99      0.99     54909
           +       0.97      0.99      0.98    131914
           -       1.00      1.00      1.00    108556
           *       0.99      0.95      0.97    132837
           /       0.97      0.98      0.98     99343
           (       0.78      0.99      0.87    210691
           )       0.99      0.72      0.83    210691

    accuracy                           0.94   1415592
   macro avg       0.97      0.97      0.97   1415592
weighted avg       0.95      0.94      0.94   1415592

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (     )
0  277    0    0    0    0    0    0    0    0    0    0    0    0    0     0     0
1    0  352    1    0    0    0    0    0    0    0    0    0    0    0     5     3
2    0    3  366    0    0    0    0    0    0    0    0    0    0    0     0     0
3    0    0    0  372    0    0    0    0    0    0    0    0    0    0     0     0
4    0    0    0    0  373    0    0    0    0    1    1    0    0    0     0     0
5    0    1    0    0    0  375    0    0    0    0    0    0    0    0     0     0
6    2    0    0    0    0    0  375    0    2    0    0    0    0    0     0     0
7    0    6    0    0    0    0    0  374    0    0    3    0    0    0     1     0
8    2    0    0    0    0    0    0    0  380    2    0    0    0    0     0     0
9    0    0    0    2    0    0    0    0    2  382    0    0    0    0     0     0
+    0    0    0    0    0    0    0    1    0    0  926    0    2    0     0     0
-    0    0    0    0    0    0    0    0    0    0    0  763    1    0     0     0
*    0    8    0    0    0    0    0    0    0    0   19    0  892   17     0     0
/    0   14    0    0    0    0    0    0    0    0    1    0    0  685     0     0
(    0   15    0    0    0    0    1    0    0    0    0    1    0    0  1467     1
)    0    9    0    0    0    0    0    0    0    0    0    0    0    0   412  1066
result accuracy by length:
1 ( 2%) 98.90
3 ( 2%) 79.66
5 ( 2%) 53.65
7 ( 4%) 49.22
9 ( 4%) 45.37
11 ( 4%) 42.20
13 ( 4%) 43.55
15 ( 4%) 42.47
17 ( 4%) 41.12
19 ( 4%) 40.20
21 ( 4%) 39.67
23 ( 4%) 40.69
25 ( 4%) 37.02
27 ( 4%) 37.07
29 ( 3%) 37.83
31 ( 3%) 35.08
33 ( 2%) 31.33
35 ( 2%) 28.68
37 ( 2%) 29.20
39 ( 2%) 28.74
41 ( 2%) 25.16
43 ( 2%) 28.92
45 ( 2%) 25.67
47 ( 2%) 24.50
49 ( 2%) 26.63
51 ( 2%) 26.18
53 ( 2%) 22.07
55 ( 2%) 24.22
57 ( 2%) 23.18
59 ( 2%) 23.76
61 ( 1%) 20.61
63 ( 0%) 22.60
65 ( 0%) 20.66
67 ( 0%) 31.03
69 ( 0%) 27.27
71 ( 0%) 50.00
result accuracy by symbol:
( (91%) 34.27
) (91%) 34.27
* (87%) 28.63
+ (84%) 34.21
- (78%) 37.42
/ (77%) 36.43
0 (51%) 38.69
1 (60%) 34.70
2 (61%) 33.59
3 (62%) 33.35
4 (62%) 32.64
5 (62%) 32.32
6 (62%) 32.36
7 (63%) 32.17
8 (63%) 32.18
9 (63%) 31.71
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 96.00
2 ( 0%) 98.00
3 ( 0%) 99.00
4 ( 0%) 100.00
5 ( 0%) 100.00
6 ( 0%) 99.00
7 ( 0%) 99.00
8 ( 0%) 99.00
9 ( 0%) 99.00
result accuracy by result:
0 (21%) 75.60
1 (11%) 57.39
2 ( 3%) 55.15
3 ( 3%) 56.26
4 ( 2%) 53.35
5 ( 2%) 56.99
6 ( 2%) 51.96
7 ( 2%) 60.46
8 ( 2%) 53.88
9 ( 2%) 58.37
result accuracy by generalization:
1 (22.84%) 65.73
2 (23.00%) 56.42
3 (22.36%)  6.40
4 (15.84%) 41.24
5 (15.95%)  9.14
error cases:
7 1 [-1] [-1] 7 1
1 6 [-1] [-1] 1 6
1 ) [-1] [-1] 1 None
1 7 [-1] [-1] 1 7
1 7 [-1] [-1] 1 7
6 0 [-1] [-1] 6 0
3 9 [-1] [-1] 3 9
9 3 [-1] [-1] 9 3
2 1 [-1] [-1] 2 1
2 1 [-1] [-1] 2 1
8 0 [-1] [-1] 8 0
5*9 5*9 [1, -1, 1] [1, -1, 1] 45 0
5*9 5*9 [1, -1, 1] [1, -1, 1] 45 0
5*9 5*9 [1, -1, 1] [1, -1, 1] 45 0
9*1 9*1 [1, -1, 1] [1, -1, 1] 9 0
9*1 9*1 [1, -1, 1] [1, -1, 1] 9 0
9*1 9*1 [1, -1, 1] [1, -1, 1] 9 0
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 0
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 0
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 0
test (Perception Acc=94.34, Head Acc=100.00, Result Acc=37.41)
