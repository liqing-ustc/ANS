CUDA is available?: True
using cuda?: True
train: 11170 val: 4900 test: 48910
Add 4200 samples for class 0, acc 0.90.
Add 3818 samples for class 1, acc 0.87.
Add 3145 samples for class 2, acc 0.92.
Add 6081 samples for class 3, acc 0.96.
Add 4537 samples for class 4, acc 0.70.
Add 4312 samples for class 5, acc 0.97.
Add 5997 samples for class 6, acc 0.99.
Add 3607 samples for class 7, acc 0.86.
Add 5694 samples for class 8, acc 0.95.
Add 3959 samples for class 9, acc 0.98.
Add 3883 samples for class 10, acc 0.90.
Add 17552 samples for class 11, acc 0.82.
Add 12698 samples for class 12, acc 1.00.
Add 12003 samples for class 13, acc 0.94.
Add 18163 samples for class 14, acc 0.87.
Add 3162 samples for class 15, acc 0.89.
Namespace(curriculum=True, epochs=100, epochs_eval=10, excludes='!', fewshot=-1, output_dir='./outputs/exp_syntax_curriculum/seed_1/', perception=False, perception_pretrain='data/perception-pretrain/model.pth.tar_78.2_match', resume=None, seed=1, semantics=False, syntax=True)
ClusteringModel(
  (backbone): ResNet(
    (conv1): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  )
  (cluster_head): ModuleList(
    (0): Linear(in_features=512, out_features=16, bias=True)
  )
)
use ground-truth syntax.
Symbol-00: None 0.00
Symbol-01: None 0.00
Symbol-02: None 0.00
Symbol-03: None 0.00
Symbol-04: None 0.00
Symbol-05: None 0.00
Symbol-06: None 0.00
Symbol-07: None 0.00
Symbol-08: None 0.00
Symbol-09: None 0.00
Symbol-10: None 0.00
Symbol-11: None 0.00
Symbol-12: None 0.00
Symbol-13: None 0.00
Symbol-14: None 0.00
Symbol-15: None 0.00
Curriculum: [(0, 1), (1, 3), (20, 7), (40, 11), (60, 15), (80, inf)]
Percentage of None result: 100.00
              precision    recall  f1-score   support

           0       0.94      0.90      0.92      4016
           1       0.72      0.53      0.61      5142
           2       0.88      0.66      0.75      5321
           3       0.86      0.96      0.91      5241
           4       0.71      0.73      0.72      5279
           5       0.96      0.94      0.95      5383
           6       0.94      0.98      0.96      5427
           7       0.56      0.73      0.64      5462
           8       0.93      0.86      0.89      5453
           9       0.92      0.73      0.81      5476
           +       0.93      0.53      0.68     13199
           -       0.70      1.00      0.82     10734
           *       1.00      1.00      1.00     13491
           /       0.89      1.00      0.94      9876
           (       0.73      0.95      0.83     21081
           )       0.85      0.67      0.75     21081

    accuracy                           0.83    141662
   macro avg       0.85      0.82      0.82    141662
weighted avg       0.84      0.83      0.82    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (    )
0  255    0    0    0    3    0    0    0   25    0    0    0    0    0     0    0
1    0  192    1    0    1    0    0    3    0    0    0    3    0    0    32  129
2    1   16  247    2    1    2    1    1    0   18    0    1    3   77     1    0
3    0    0    3  354    3    3    0    0    0    5    0    0    0    0     0    0
4    0    0    0    0  272    0    0   58    0    0   22   18    0    0     0    0
5   15    0    7    0    0  357    0    0    0    0    0    0    0    0     0    0
6    0    0    0    0    0    9  373    0    0    0    0    0    0    0     0    0
7    0   41   20    0    0    0    0  281    0    0   10   20    0   10     0    0
8    0    0    0   53    0    0    0    0  331    0    0    0    0    0     0    0
9    0   10    0    0   94    0    0    0    0  282    0    0    0    0     0    0
+    0    0    0    0    0    0    0  153    0    0  493  280    0    0     0    3
-    0    0    0    0    0    0    0    0    0    0    2  755    0    0     0    0
*    0    0    0    0    0    0    0    0    0    0    0    0  952    0     0    0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  697     0    0
(    0    7    0    0    7    0   14    0    0    0    0    0    0    0  1420   37
)    0    0    0    0    0    0    7    0    0    0    0    0    0    0   488  992
result accuracy by length:
1 ( 2%)  0.00
3 ( 2%)  0.00
5 ( 2%)  0.00
7 ( 4%)  0.00
9 ( 4%)  0.00
11 ( 3%)  0.00
13 ( 4%)  0.00
15 ( 4%)  0.00
17 ( 4%)  0.00
19 ( 4%)  0.00
21 ( 4%)  0.00
23 ( 4%)  0.00
25 ( 4%)  0.00
27 ( 4%)  0.00
29 ( 3%)  0.00
31 ( 3%)  0.00
33 ( 2%)  0.00
35 ( 2%)  0.00
37 ( 2%)  0.00
39 ( 3%)  0.00
41 ( 3%)  0.00
43 ( 2%)  0.00
45 ( 2%)  0.00
47 ( 2%)  0.00
49 ( 2%)  0.00
51 ( 2%)  0.00
53 ( 2%)  0.00
55 ( 2%)  0.00
57 ( 2%)  0.00
59 ( 2%)  0.00
61 ( 1%)  0.00
63 ( 0%)  0.00
65 ( 0%)  0.00
67 ( 0%)  0.00
result accuracy by symbol:
( (91%)  0.00
) (91%)  0.00
* (87%)  0.00
+ (84%)  0.00
- (77%)  0.00
/ (76%)  0.00
0 (52%)  0.00
1 (60%)  0.00
2 (61%)  0.00
3 (62%)  0.00
4 (61%)  0.00
5 (62%)  0.00
6 (62%)  0.00
7 (63%)  0.00
8 (64%)  0.00
9 (63%)  0.00
result accuracy by digit:
0 ( 0%)  0.00
1 ( 0%)  0.00
2 ( 0%)  0.00
3 ( 0%)  0.00
4 ( 0%)  0.00
5 ( 0%)  0.00
6 ( 0%)  0.00
7 ( 0%)  0.00
8 ( 0%)  0.00
9 ( 0%)  0.00
result accuracy by result:
0 (21%)  0.00
1 (10%)  0.00
2 ( 4%)  0.00
3 ( 2%)  0.00
4 ( 2%)  0.00
5 ( 2%)  0.00
6 ( 2%)  0.00
7 ( 2%)  0.00
8 ( 2%)  0.00
9 ( 1%)  0.00
result accuracy by generalization:
1 (22.45%)  0.00
2 (22.96%)  0.00
3 (22.53%)  0.00
4 (15.82%)  0.00
5 (16.24%)  0.00
error cases:
7 7 [-1] [-1] 7 None
7 7 [-1] [-1] 7 None
7 7 [-1] [-1] 7 None
7 7 [-1] [-1] 7 None
7 1 [-1] [-1] 7 None
7 1 [-1] [-1] 7 None
7 2 [-1] [-1] 7 None
7 7 [-1] [-1] 7 None
7 7 [-1] [-1] 7 None
7 7 [-1] [-1] 7 None
1 ) [-1] [-1] 1 None
1 ( [-1] [-1] 1 None
1 ) [-1] [-1] 1 None
1 1 [-1] [-1] 1 None
1 ( [-1] [-1] 1 None
1 1 [-1] [-1] 1 None
1 1 [-1] [-1] 1 None
1 1 [-1] [-1] 1 None
1 1 [-1] [-1] 1 None
1 ( [-1] [-1] 1 None
val (Perception Acc=82.59, Head Acc=100.00, Result Acc=0.00)
------------------------------
Epoch 0/99 (max_len=1, data=1000)
Train acc: 0.00 (abduce 100.00)
Hit samples:  1000  Ave length:  1.0
Symbols:  16 [(0, 81), (1, 76), (2, 81), (3, 107), (4, 90), (5, 89), (6, 101), (7, 89), (8, 106), (9, 74), (10, 18), (11, 13), (12, 1), (13, 32), (14, 7), (15, 35)]
Head:  [((-1,), 1000)]
Semantics: 16/0/14 (total/solved/learn).
Symbol-00 (int), Samples:  81,  [(((), 0), 76), (((), 5), 2), (((), 7), 1), (((), 3), 1), (((), 2), 1)]
Symbol-01 (int), Samples:  76,  [(((), 1), 59), (((), 7), 12), (((), 9), 2), (((), 4), 1), (((), 3), 1), (((), 2), 1)]
Symbol-02 (int), Samples:  81,  [(((), 2), 65), (((), 5), 5), (((), 7), 3), (((), 3), 3), (((), 8), 2), (((), 1), 1), (((), 0), 1), (((), 6), 1)]
Symbol-03 (int), Samples: 100,  [(((), 3), 86), (((), 8), 7), (((), 5), 7)]
Symbol-04 (int), Samples:  90,  [(((), 4), 60), (((), 9), 28), (((), 0), 1), (((), 6), 1)]
Symbol-05 (int), Samples:  89,  [(((), 5), 81), (((), 0), 3), (((), 7), 1), (((), 3), 1), (((), 9), 1), (((), 2), 1), (((), 8), 1)]
Symbol-06 (int), Samples: 100,  [(((), 6), 96), (((), 3), 1), (((), 0), 1), (((), 7), 1), (((), 2), 1)]
Symbol-07 (int), Samples:  89,  [(((), 7), 66), (((), 4), 23)]
Symbol-08 (int), Samples: 100,  [(((), 8), 85), (((), 0), 15)]
Symbol-09 (int), Samples:  74,  [(((), 9), 69), (((), 2), 5)]
Symbol-10 (int), Samples:  18,  [(((), 4), 14), (((), 7), 4)]
Symbol-11 (int), Samples:  13,  [(((), 7), 9), (((), 4), 2), (((), 0), 1), (((), 2), 1)]
Symbol-13 (int), Samples:  32,  [(((), 2), 25), (((), 5), 5), (((), 7), 1), (((), 3), 1)]
Symbol-15 (int), Samples:  35,  [(((), 1), 34), (((), 7), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
Symbol-00: 0 0 0.94
Symbol-01: 1 (incr 0) 0.78
Symbol-02: 2 (incr (incr 0)) 0.80
Symbol-03: 3 (incr (incr (incr 0))) 0.86
Symbol-04: 4 (incr (incr (incr (incr 0)))) 0.67
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 0.91
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 0.96
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 0.74
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 0.84
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 0.93
Symbol-10: None 0.00
Symbol-11: None 0.00
Symbol-12: None 0.00
Symbol-13: None 0.00
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 75.98 (abduce 100.00)
Hit samples:  1000  Ave length:  1.0
Symbols:  10 [(0, 100), (1, 100), (2, 100), (3, 100), (4, 100), (5, 100), (6, 100), (7, 100), (8, 100), (9, 100)]
Head:  [((-1,), 1000)]
Learn perception with 1000 samples for 100 iterations, 1.0, 0.9334375, 3200, 16 epochs, take 26 sec.
Epoch time: 0m 50s
------------------------------
Epoch 1/99 (max_len=3, data=2170)
Train acc: 45.68 (abduce 97.10)
Hit samples:  2107  Ave length:  2.05
Symbols:  15 [(0, 307), (1, 322), (2, 322), (3, 340), (4, 347), (5, 333), (6, 327), (7, 329), (8, 322), (9, 298), (10, 193), (11, 359), (12, 286), (13, 227), (15, 9)]
Head:  [((-1,), 1000), ((1, -1, 1), 1107)]
Semantics: 16/10/4 (total/solved/learn).
Symbol-10 (int -> int -> int), Samples: 100,  [(((4, 4), 8), 2), (((8, 7), 15), 2), (((5, 7), 12), 2), (((3, 3), 6), 2), (((6, 1), 7), 2), (((3, 6), 9), 2), (((1, 6), 7), 2), (((2, 4), 6), 2), (((4, 7), 16), 2), (((5, 2), 7), 2)]
Symbol-11 (int -> int -> int), Samples: 100,  [(((1, 4), 0), 3), (((8, 8), 0), 3), (((8, 1), 7), 2), (((9, 4), 13), 2), (((1, 1), 0), 2), (((5, 2), 3), 2), (((3, 6), 0), 2), (((2, 4), 0), 2), (((7, 8), 0), 2), (((0, 1), 0), 2)]
Symbol-12 (int -> int -> int), Samples: 100,  [(((1, 7), 7), 3), (((7, 5), 35), 3), (((0, 3), 0), 3), (((5, 2), 10), 3), (((1, 3), 3), 2), (((8, 4), 32), 2), (((6, 0), 0), 2), (((8, 1), 8), 2), (((4, 1), 4), 2), (((0, 7), 0), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((2, 7), 1), 3), (((1, 6), 1), 3), (((2, 8), 1), 3), (((6, 9), 1), 2), (((5, 3), 2), 2), (((2, 5), 1), 2), (((6, 3), 2), 2), (((7, 9), 1), 2), (((5, 2), 3), 2), (((7, 1), 7), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
Rescoring 14 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 0.99
Symbol-04: 4 (incr (incr (incr (incr 0)))) 0.99
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.89
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.77
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.23
Symbol-13: fn (lambda (lambda (if0 $1 0 (if0 (decr0 $0) $1 (incr 0))))) 0.67
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 76.50 (abduce 88.20)
Hit samples:  1914  Ave length:  1.96
Symbols:  15 [(0, 306), (1, 334), (2, 287), (3, 274), (4, 267), (5, 270), (6, 277), (7, 268), (8, 276), (9, 268), (10, 270), (11, 337), (12, 126), (13, 180), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 914)]
Learn perception with 1914 samples for 100 iterations, 0.9609834313201496, 0.9537080774681153, 4234, 13 epochs, take 27 sec.
Epoch time: 10m 39s
------------------------------
Epoch 2/99 (max_len=3, data=2170)
Train acc: 87.21 (abduce 99.82)
Hit samples:  2166  Ave length:  2.08
Symbols:  14 [(0, 309), (1, 346), (2, 325), (3, 330), (4, 336), (5, 335), (6, 343), (7, 335), (8, 341), (9, 333), (10, 283), (11, 319), (12, 297), (13, 266)]
Head:  [((-1,), 1000), ((1, -1, 1), 1166)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 9), 72), 3), (((9, 3), 27), 3), (((3, 8), 24), 3), (((6, 9), 54), 3), (((4, 5), 20), 3), (((3, 5), 15), 3), (((2, 7), 14), 3), (((5, 6), 30), 3), (((4, 8), 32), 3), (((4, 9), 36), 3)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 7), 2), 4), (((3, 3), 1), 3), (((6, 3), 2), 3), (((8, 4), 2), 3), (((8, 3), 3), 3), (((5, 9), 1), 3), (((4, 3), 2), 3), (((7, 3), 3), 3), (((6, 2), 3), 3), (((5, 4), 2), 3)]
Update grammar with invented programs and set frontiers to none.
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.98
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.99
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.39
Symbol-13: fn (lambda (lambda (if0 $1 0 (if0 (decr0 $0) $1 (incr 0))))) 0.69
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 87.21 (abduce 89.31)
Hit samples:  1938  Ave length:  1.97
Symbols:  15 [(0, 310), (1, 340), (2, 290), (3, 275), (4, 276), (5, 273), (6, 281), (7, 275), (8, 279), (9, 276), (10, 285), (11, 340), (12, 126), (13, 186), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 938)]
Learn perception with 1938 samples for 100 iterations, 0.9593602517042475, 0.9530232558139535, 4300, 12 epochs, take 24 sec.
Epoch time: 10m 44s
------------------------------
Epoch 3/99 (max_len=3, data=2170)
Train acc: 88.31 (abduce 99.91)
Hit samples:  2168  Ave length:  2.08
Symbols:  15 [(0, 310), (1, 344), (2, 331), (3, 327), (4, 333), (5, 334), (6, 344), (7, 333), (8, 342), (9, 337), (10, 284), (11, 322), (12, 294), (13, 267), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((2, 9), 18), 3), (((8, 8), 64), 3), (((9, 5), 45), 3), (((4, 4), 16), 3), (((7, 8), 56), 3), (((9, 3), 27), 3), (((3, 9), 27), 3), (((7, 7), 49), 3), (((5, 2), 10), 3), (((4, 8), 32), 3)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 7), 2), 4), (((8, 7), 2), 3), (((3, 2), 2), 3), (((4, 3), 2), 3), (((5, 2), 3), 3), (((7, 6), 2), 3), (((6, 4), 2), 3), (((7, 3), 3), 3), (((5, 4), 2), 3), (((5, 3), 2), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.43
Symbol-13: fn (lambda (lambda (if0 $1 0 (if0 (decr0 $0) $1 (incr 0))))) 0.70
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 88.31 (abduce 89.35)
Hit samples:  1939  Ave length:  1.97
Symbols:  15 [(0, 310), (1, 340), (2, 290), (3, 275), (4, 277), (5, 273), (6, 282), (7, 275), (8, 279), (9, 276), (10, 285), (11, 341), (12, 126), (13, 186), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 939)]
Learn perception with 1939 samples for 100 iterations, 0.9588682211160597, 0.9523588194283058, 4303, 12 epochs, take 25 sec.
Epoch time: 5m 47s
------------------------------
Epoch 4/99 (max_len=3, data=2170)
Train acc: 88.31 (abduce 99.86)
Hit samples:  2167  Ave length:  2.08
Symbols:  15 [(0, 310), (1, 342), (2, 331), (3, 327), (4, 334), (5, 333), (6, 344), (7, 333), (8, 342), (9, 336), (10, 284), (11, 322), (12, 295), (13, 265), (15, 3)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 4), 16), 3), (((2, 8), 16), 3), (((5, 5), 25), 3), (((7, 9), 63), 3), (((5, 7), 35), 3), (((8, 8), 64), 3), (((5, 2), 10), 3), (((8, 7), 56), 3), (((8, 9), 72), 3), (((5, 4), 20), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 7), 2), 4), (((9, 4), 3), 3), (((6, 3), 2), 3), (((6, 2), 3), 3), (((7, 6), 2), 3), (((5, 2), 3), 3), (((8, 4), 2), 3), (((9, 5), 2), 3), (((8, 3), 3), 3), (((9, 2), 5), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.42
Symbol-13: fn (lambda (lambda (if0 $1 0 (if0 (decr0 $0) $1 (incr 0))))) 0.70
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 88.31 (abduce 89.35)
Hit samples:  1939  Ave length:  1.97
Symbols:  15 [(0, 310), (1, 340), (2, 290), (3, 275), (4, 277), (5, 273), (6, 282), (7, 275), (8, 279), (9, 276), (10, 285), (11, 341), (12, 126), (13, 186), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 939)]
Learn perception with 1939 samples for 100 iterations, 0.9588682211160597, 0.9495700673948408, 4303, 12 epochs, take 24 sec.
Epoch time: 5m 48s
------------------------------
Epoch 5/99 (max_len=3, data=2170)
Train acc: 88.31 (abduce 99.91)
Hit samples:  2168  Ave length:  2.08
Symbols:  15 [(0, 310), (1, 345), (2, 331), (3, 327), (4, 336), (5, 333), (6, 344), (7, 331), (8, 342), (9, 336), (10, 284), (11, 322), (12, 296), (13, 265), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 7), 42), 3), (((9, 7), 63), 3), (((8, 8), 64), 3), (((3, 8), 24), 3), (((6, 8), 48), 3), (((8, 6), 48), 3), (((8, 4), 32), 3), (((3, 4), 12), 3), (((7, 4), 28), 3), (((9, 9), 81), 3)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 7), 2), 4), (((9, 5), 2), 3), (((7, 3), 3), 3), (((4, 3), 2), 3), (((5, 4), 2), 3), (((5, 3), 2), 3), (((6, 3), 2), 3), (((3, 2), 2), 3), (((8, 4), 2), 3), (((9, 4), 3), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.42
Symbol-13: fn (lambda (lambda (if0 $1 0 (if0 (decr0 $0) $1 (incr 0))))) 0.70
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 88.31 (abduce 89.35)
Hit samples:  1939  Ave length:  1.97
Symbols:  15 [(0, 310), (1, 340), (2, 290), (3, 275), (4, 277), (5, 273), (6, 282), (7, 275), (8, 279), (9, 276), (10, 285), (11, 341), (12, 126), (13, 186), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 939)]
Learn perception with 1939 samples for 100 iterations, 0.9588682211160597, 0.9495700673948408, 4303, 12 epochs, take 25 sec.
Epoch time: 5m 49s
------------------------------
Epoch 6/99 (max_len=3, data=2170)
Train acc: 88.17 (abduce 99.86)
Hit samples:  2167  Ave length:  2.08
Symbols:  15 [(0, 310), (1, 339), (2, 332), (3, 327), (4, 335), (5, 333), (6, 344), (7, 332), (8, 342), (9, 336), (10, 284), (11, 324), (12, 295), (13, 263), (15, 5)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 5), 20), 3), (((6, 3), 18), 3), (((4, 9), 36), 3), (((3, 5), 15), 3), (((6, 9), 54), 3), (((5, 8), 40), 3), (((9, 7), 63), 3), (((5, 7), 35), 3), (((9, 9), 81), 2), (((8, 3), 24), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((5, 2), 3), 3), (((8, 7), 2), 3), (((8, 4), 2), 3), (((7, 6), 2), 3), (((6, 2), 3), 3), (((5, 4), 2), 3), (((5, 3), 2), 3), (((9, 4), 3), 3), (((6, 3), 2), 3), (((7, 3), 3), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.42
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.80
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 89.47 (abduce 91.06)
Hit samples:  1976  Ave length:  1.99
Symbols:  15 [(0, 310), (1, 339), (2, 295), (3, 284), (4, 289), (5, 285), (6, 294), (7, 281), (8, 289), (9, 285), (10, 285), (11, 326), (12, 146), (13, 218), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 976)]
Learn perception with 1976 samples for 100 iterations, 0.9587576374745418, 0.9527397260273973, 4380, 12 epochs, take 25 sec.
Epoch time: 5m 51s
------------------------------
Epoch 7/99 (max_len=3, data=2170)
Train acc: 90.02 (abduce 99.82)
Hit samples:  2166  Ave length:  2.08
Symbols:  15 [(0, 310), (1, 339), (2, 331), (3, 327), (4, 335), (5, 333), (6, 345), (7, 330), (8, 342), (9, 339), (10, 284), (11, 321), (12, 310), (13, 250), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 1166)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 7), 56), 3), (((6, 3), 18), 3), (((7, 7), 49), 3), (((9, 3), 27), 3), (((9, 6), 54), 3), (((5, 7), 35), 3), (((2, 8), 16), 3), (((5, 2), 10), 3), (((8, 4), 32), 2), (((9, 4), 36), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 7), 2), 5), (((5, 2), 3), 3), (((2, 1), 2), 3), (((5, 9), 1), 3), (((4, 1), 4), 3), (((8, 3), 3), 3), (((0, 4), 0), 3), (((8, 1), 8), 3), (((9, 1), 9), 3), (((9, 4), 3), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.43
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.86
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 90.02 (abduce 91.24)
Hit samples:  1980  Ave length:  1.99
Symbols:  15 [(0, 310), (1, 339), (2, 299), (3, 285), (4, 291), (5, 286), (6, 294), (7, 281), (8, 289), (9, 285), (10, 285), (11, 325), (12, 150), (13, 219), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 980)]
Learn perception with 1980 samples for 100 iterations, 0.9571065989847716, 0.9503190519598906, 4388, 12 epochs, take 25 sec.
Epoch time: 5m 51s
------------------------------
Epoch 8/99 (max_len=3, data=2170)
Train acc: 90.15 (abduce 99.86)
Hit samples:  2167  Ave length:  2.08
Symbols:  15 [(0, 310), (1, 340), (2, 331), (3, 328), (4, 337), (5, 334), (6, 344), (7, 329), (8, 341), (9, 339), (10, 283), (11, 322), (12, 310), (13, 251), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((9, 6), 54), 3), (((5, 6), 30), 3), (((8, 8), 64), 3), (((5, 7), 35), 3), (((4, 4), 16), 3), (((3, 9), 27), 2), (((7, 4), 28), 2), (((2, 8), 16), 2), (((6, 3), 18), 2), (((5, 2), 10), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((0, 3), 0), 4), (((7, 9), 1), 3), (((4, 1), 4), 3), (((3, 4), 1), 3), (((7, 3), 3), 3), (((8, 3), 3), 3), (((5, 2), 3), 3), (((4, 3), 2), 3), (((9, 4), 3), 3), (((8, 1), 8), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.44
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.86
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 90.15 (abduce 91.24)
Hit samples:  1980  Ave length:  1.99
Symbols:  15 [(0, 310), (1, 339), (2, 299), (3, 285), (4, 291), (5, 286), (6, 294), (7, 281), (8, 289), (9, 285), (10, 285), (11, 325), (12, 150), (13, 219), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 980)]
Learn perception with 1980 samples for 100 iterations, 0.9571065989847716, 0.9514585232452142, 4388, 12 epochs, take 25 sec.
Epoch time: 5m 50s
------------------------------
Epoch 9/99 (max_len=3, data=2170)
Train acc: 90.25 (abduce 99.86)
Hit samples:  2167  Ave length:  2.08
Symbols:  15 [(0, 310), (1, 340), (2, 331), (3, 328), (4, 336), (5, 334), (6, 344), (7, 329), (8, 341), (9, 340), (10, 284), (11, 328), (12, 319), (13, 235), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((9, 4), 36), 3), (((9, 7), 63), 3), (((8, 8), 64), 3), (((6, 8), 48), 3), (((4, 9), 36), 3), (((9, 8), 72), 3), (((3, 6), 18), 3), (((2, 9), 18), 3), (((9, 3), 27), 3), (((8, 2), 16), 3)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 6), 1), 4), (((3, 2), 2), 4), (((0, 2), 0), 4), (((1, 4), 1), 3), (((7, 3), 3), 3), (((9, 4), 3), 3), (((3, 6), 1), 3), (((7, 7), 1), 3), (((8, 3), 3), 3), (((4, 4), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.99
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.44
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.88
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 90.25 (abduce 91.24)
Hit samples:  1980  Ave length:  1.99
Symbols:  15 [(0, 310), (1, 339), (2, 299), (3, 285), (4, 291), (5, 286), (6, 294), (7, 281), (8, 289), (9, 285), (10, 285), (11, 325), (12, 151), (13, 218), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 980)]
Learn perception with 1980 samples for 100 iterations, 0.9568527918781726, 0.9509915659904262, 4387, 12 epochs, take 25 sec.
Percentage of None result: 50.14
              precision    recall  f1-score   support

           0       0.97      0.99      0.98      4016
           1       0.61      0.89      0.72      5142
           2       0.99      0.94      0.96      5321
           3       0.97      0.98      0.98      5241
           4       0.99      0.98      0.98      5279
           5       1.00      0.98      0.99      5383
           6       0.97      1.00      0.98      5427
           7       0.98      0.97      0.98      5462
           8       0.99      0.97      0.98      5453
           9       0.97      1.00      0.99      5476
           +       0.98      0.98      0.98     13199
           -       0.97      1.00      0.98     10734
           *       1.00      1.00      1.00     13491
           /       1.00      1.00      1.00      9876
           (       0.76      0.93      0.84     21081
           )       0.97      0.63      0.76     21081

    accuracy                           0.92    141662
   macro avg       0.94      0.95      0.94    141662
weighted avg       0.93      0.92      0.92    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (    )
0  280    0    0    0    0    0    0    0    3    0    0    0    0    0     0    0
1    0  321    2    0    1    0    0    0    0    0    1    0    0    0     5   30
2    0    6  352    0    1    1    4    0    2    3    0    0    1    1     1    0
3    0    0    3  363    0    0    0    0    0    2    0    0    0    0     0    0
4    0    0    0    0  363    0    0    0    0    4    4    0    0    0     0    0
5    7    0    0    0    0  372    0    0    0    0    0    0    0    0     0    0
6    0    0    0    0    0    0  383    0    0    0    0    0    0    0     0    0
7    0    0    0    0    0    0    0  375    0    0   10    0    0    0     0    0
8    0    0    0   10    0    0    0    0  374    0    0    0    0    0     0    0
9    0    0    0    0    0    0    0    0    0  386    0    0    0    0     0    0
+    0    3    0    0    0    0    0    0    0    0  911   17    0    0     0    0
-    0    0    0    0    0    0    0    0    0    0    2  755    0    0     0    0
*    0    0    0    0    0    0    0    0    0    0    0    0  952    0     0    0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  697     0    0
(    0   82    0    0    0    0    7    0    0    0    0    7    0    0  1390    0
)    0  112    0    0    0    0    0    7    0    0    0    0    0    0   428  939
result accuracy by length:
1 ( 2%) 98.00
3 ( 2%) 72.00
5 ( 2%) 47.29
7 ( 4%) 32.31
9 ( 4%) 37.69
11 ( 3%) 25.57
13 ( 4%) 29.17
15 ( 4%) 24.26
17 ( 4%) 20.39
19 ( 4%) 22.06
21 ( 4%) 18.69
23 ( 4%) 15.61
25 ( 4%) 17.00
27 ( 4%) 17.24
29 ( 3%) 10.47
31 ( 3%) 13.10
33 ( 2%) 10.00
35 ( 2%)  8.22
37 ( 2%) 11.97
39 ( 3%)  9.21
41 ( 3%) 12.75
43 ( 2%)  8.70
45 ( 2%)  8.93
47 ( 2%)  3.79
49 ( 2%)  5.63
51 ( 2%)  7.58
53 ( 2%)  7.46
55 ( 2%)  6.72
57 ( 2%)  5.59
59 ( 2%)  6.54
61 ( 1%)  1.56
63 ( 0%)  5.71
65 ( 0%)  0.00
67 ( 0%)  0.00
result accuracy by symbol:
( (91%) 15.47
) (91%) 15.47
* (87%) 12.65
+ (84%) 15.63
- (77%) 17.17
/ (76%) 16.72
0 (52%) 16.76
1 (60%) 15.06
2 (61%) 14.78
3 (62%) 15.21
4 (61%) 14.03
5 (62%) 14.62
6 (62%) 13.75
7 (63%) 13.85
8 (64%) 13.57
9 (63%) 13.86
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 100.00
2 ( 0%) 100.00
3 ( 0%) 100.00
4 ( 0%) 90.00
5 ( 0%) 90.00
6 ( 0%) 100.00
7 ( 0%) 100.00
8 ( 0%) 100.00
9 ( 0%) 100.00
result accuracy by result:
0 (21%) 32.76
1 (10%) 35.58
2 ( 4%) 40.91
3 ( 2%) 28.15
4 ( 2%) 23.31
5 ( 2%) 41.00
6 ( 2%) 33.04
7 ( 2%) 32.74
8 ( 2%) 24.79
9 ( 1%) 41.86
result accuracy by generalization:
1 (22.45%) 42.64
2 (22.96%) 29.87
3 (22.53%)  3.53
4 (15.82%) 10.84
5 (16.24%)  3.77
error cases:
4 9 [-1] [-1] 4 9
5 0 [-1] [-1] 5 0
5*9 5*9 [1, -1, 1] [1, -1, 1] 45 5
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 4
6*4 6*4 [1, -1, 1] [1, -1, 1] 24 6
9*0 9*0 [1, -1, 1] [1, -1, 1] 0 9
3*5 3*5 [1, -1, 1] [1, -1, 1] 15 3
5*5 5*5 [1, -1, 1] [1, -1, 1] 25 5
2*4 2*4 [1, -1, 1] [1, -1, 1] 8 4
5*3 5*3 [1, -1, 1] [1, -1, 1] 15 5
7*9 7*9 [1, -1, 1] [1, -1, 1] 63 7
7/2 7/2 [1, -1, 1] [1, -1, 1] 4 2
1*4 )*4 [1, -1, 1] [1, -1, 1] 4 None
1+8 )+8 [1, -1, 1] [1, -1, 1] 9 None
3*2 3*2 [1, -1, 1] [1, -1, 1] 6 3
8/3 8/3 [1, -1, 1] [1, -1, 1] 3 2
3*3 3*3 [1, -1, 1] [1, -1, 1] 9 3
6*3 6*3 [1, -1, 1] [1, -1, 1] 18 6
8*2 8*2 [1, -1, 1] [1, -1, 1] 16 8
7/3 7/3 [1, -1, 1] [1, -1, 1] 3 2
val (Perception Acc=92.20, Head Acc=100.00, Result Acc=19.55)
Epoch time: 6m 23s
------------------------------
Epoch 10/99 (max_len=3, data=2170)
Train acc: 90.29 (abduce 99.86)
Hit samples:  2167  Ave length:  2.08
Symbols:  15 [(0, 310), (1, 340), (2, 331), (3, 328), (4, 336), (5, 334), (6, 344), (7, 329), (8, 341), (9, 340), (10, 284), (11, 326), (12, 325), (13, 231), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((5, 2), 10), 3), (((4, 9), 36), 3), (((3, 8), 24), 3), (((2, 9), 18), 3), (((2, 8), 16), 3), (((3, 5), 15), 3), (((3, 9), 27), 2), (((6, 8), 48), 2), (((5, 9), 45), 2), (((5, 6), 30), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((5, 5), 1), 5), (((8, 9), 1), 4), (((3, 7), 1), 4), (((4, 3), 2), 4), (((2, 6), 1), 4), (((3, 4), 1), 3), (((7, 3), 3), 3), (((8, 3), 3), 3), (((9, 4), 3), 3), (((9, 2), 5), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.99
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.45
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.89
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 90.29 (abduce 91.24)
Hit samples:  1980  Ave length:  1.99
Symbols:  15 [(0, 310), (1, 339), (2, 299), (3, 285), (4, 291), (5, 286), (6, 294), (7, 281), (8, 289), (9, 285), (10, 285), (11, 325), (12, 152), (13, 217), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 980)]
Learn perception with 1980 samples for 100 iterations, 0.9565989847715736, 0.9500683994528044, 4386, 12 epochs, take 25 sec.
Epoch time: 5m 49s
------------------------------
Epoch 11/99 (max_len=3, data=2170)
Train acc: 90.10 (abduce 99.77)
Hit samples:  2165  Ave length:  2.08
Symbols:  15 [(0, 309), (1, 335), (2, 332), (3, 328), (4, 337), (5, 334), (6, 344), (7, 329), (8, 341), (9, 339), (10, 286), (11, 324), (12, 329), (13, 225), (15, 3)]
Head:  [((-1,), 1000), ((1, -1, 1), 1165)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((5, 9), 45), 3), (((4, 5), 20), 3), (((9, 4), 36), 3), (((6, 7), 42), 3), (((9, 5), 45), 3), (((4, 9), 36), 3), (((3, 8), 24), 3), (((5, 8), 40), 3), (((7, 8), 56), 3), (((8, 7), 56), 3)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((2, 4), 1), 3), (((8, 3), 3), 3), (((9, 7), 2), 3), (((2, 6), 1), 3), (((5, 5), 1), 3), (((9, 4), 3), 3), (((7, 3), 3), 3), (((5, 2), 2), 3), (((8, 4), 2), 3), (((2, 8), 1), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.44
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.89
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 90.10 (abduce 91.29)
Hit samples:  1981  Ave length:  1.99
Symbols:  15 [(0, 311), (1, 339), (2, 299), (3, 285), (4, 291), (5, 286), (6, 294), (7, 282), (8, 289), (9, 285), (10, 286), (11, 325), (12, 152), (13, 217), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 981)]
Learn perception with 1981 samples for 100 iterations, 0.9561247780877504, 0.9482797903850535, 4389, 12 epochs, take 25 sec.
Epoch time: 5m 53s
------------------------------
Epoch 12/99 (max_len=3, data=2170)
Train acc: 90.11 (abduce 99.82)
Hit samples:  2166  Ave length:  2.08
Symbols:  15 [(0, 310), (1, 334), (2, 333), (3, 328), (4, 336), (5, 334), (6, 344), (7, 330), (8, 341), (9, 338), (10, 287), (11, 324), (12, 310), (13, 244), (15, 5)]
Head:  [((-1,), 1000), ((1, -1, 1), 1166)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((9, 4), 36), 3), (((7, 7), 49), 3), (((3, 6), 18), 3), (((9, 9), 81), 3), (((4, 5), 20), 3), (((7, 8), 56), 3), (((9, 5), 45), 3), (((8, 8), 64), 3), (((4, 9), 36), 3), (((5, 8), 40), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((2, 4), 1), 5), (((7, 8), 1), 3), (((9, 4), 3), 3), (((7, 3), 3), 3), (((7, 5), 2), 3), (((4, 1), 4), 3), (((8, 3), 3), 3), (((6, 8), 1), 2), (((6, 2), 3), 2), (((7, 1), 7), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.44
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.86
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 90.11 (abduce 91.29)
Hit samples:  1981  Ave length:  1.99
Symbols:  15 [(0, 311), (1, 339), (2, 299), (3, 285), (4, 291), (5, 286), (6, 294), (7, 282), (8, 289), (9, 285), (10, 286), (11, 325), (12, 152), (13, 217), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 981)]
Learn perception with 1981 samples for 100 iterations, 0.9561247780877504, 0.9478241057188426, 4389, 12 epochs, take 25 sec.
Epoch time: 5m 50s
------------------------------
Epoch 13/99 (max_len=3, data=2170)
Train acc: 90.29 (abduce 99.86)
Hit samples:  2167  Ave length:  2.08
Symbols:  15 [(0, 310), (1, 339), (2, 332), (3, 328), (4, 335), (5, 334), (6, 344), (7, 329), (8, 342), (9, 340), (10, 286), (11, 322), (12, 325), (13, 233), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 6), 48), 3), (((5, 6), 30), 3), (((8, 5), 40), 3), (((3, 6), 18), 3), (((6, 8), 48), 3), (((9, 5), 45), 3), (((5, 3), 15), 3), (((2, 7), 14), 3), (((4, 7), 28), 2), (((4, 4), 16), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 8), 1), 4), (((5, 2), 3), 3), (((9, 7), 2), 3), (((9, 4), 3), 3), (((7, 3), 3), 3), (((9, 5), 2), 3), (((8, 3), 3), 3), (((2, 1), 2), 3), (((0, 8), 0), 3), (((3, 4), 1), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.45
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.88
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 90.29 (abduce 91.29)
Hit samples:  1981  Ave length:  1.99
Symbols:  15 [(0, 311), (1, 339), (2, 299), (3, 285), (4, 291), (5, 286), (6, 294), (7, 282), (8, 289), (9, 285), (10, 286), (11, 325), (12, 152), (13, 217), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 981)]
Learn perception with 1981 samples for 100 iterations, 0.9561247780877504, 0.9514695830485305, 4389, 12 epochs, take 25 sec.
Epoch time: 5m 50s
------------------------------
Epoch 14/99 (max_len=3, data=2170)
Train acc: 90.25 (abduce 99.86)
Hit samples:  2167  Ave length:  2.08
Symbols:  15 [(0, 311), (1, 338), (2, 331), (3, 328), (4, 335), (5, 334), (6, 344), (7, 329), (8, 342), (9, 340), (10, 287), (11, 322), (12, 312), (13, 245), (15, 3)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((9, 5), 45), 3), (((8, 4), 32), 3), (((8, 3), 24), 3), (((9, 8), 72), 3), (((7, 4), 28), 3), (((3, 8), 24), 3), (((4, 7), 28), 3), (((4, 9), 36), 3), (((5, 8), 40), 2), (((5, 6), 30), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 7), 2), 4), (((8, 3), 3), 3), (((8, 9), 1), 3), (((9, 6), 2), 3), (((7, 3), 3), 3), (((3, 4), 1), 3), (((9, 4), 3), 3), (((5, 2), 3), 3), (((5, 3), 2), 3), (((3, 1), 3), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.44
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.87
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 90.25 (abduce 91.29)
Hit samples:  1981  Ave length:  1.99
Symbols:  15 [(0, 311), (1, 339), (2, 299), (3, 285), (4, 291), (5, 286), (6, 294), (7, 282), (8, 289), (9, 285), (10, 286), (11, 325), (12, 152), (13, 217), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 981)]
Learn perception with 1981 samples for 100 iterations, 0.9561247780877504, 0.9501025290498974, 4389, 12 epochs, take 25 sec.
Epoch time: 5m 50s
------------------------------
Epoch 15/99 (max_len=3, data=2170)
Train acc: 90.29 (abduce 99.91)
Hit samples:  2168  Ave length:  2.08
Symbols:  15 [(0, 311), (1, 340), (2, 331), (3, 328), (4, 335), (5, 334), (6, 344), (7, 331), (8, 341), (9, 340), (10, 284), (11, 324), (12, 323), (13, 236), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 4), 16), 3), (((9, 3), 27), 3), (((8, 6), 48), 3), (((4, 3), 12), 3), (((7, 5), 35), 3), (((9, 5), 45), 3), (((3, 4), 12), 3), (((8, 4), 32), 3), (((9, 7), 63), 3), (((3, 8), 24), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 5), 2), 3), (((4, 4), 1), 3), (((6, 7), 1), 3), (((5, 5), 1), 3), (((9, 4), 3), 3), (((8, 3), 3), 3), (((7, 3), 3), 3), (((9, 2), 5), 2), (((9, 3), 3), 2), (((8, 7), 2), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.45
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.88
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 90.29 (abduce 91.29)
Hit samples:  1981  Ave length:  1.99
Symbols:  15 [(0, 311), (1, 339), (2, 299), (3, 285), (4, 291), (5, 286), (6, 294), (7, 282), (8, 289), (9, 285), (10, 286), (11, 325), (12, 152), (13, 217), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 981)]
Learn perception with 1981 samples for 100 iterations, 0.9561247780877504, 0.9475962633857371, 4389, 12 epochs, take 25 sec.
Epoch time: 5m 51s
------------------------------
Epoch 16/99 (max_len=3, data=2170)
Train acc: 90.20 (abduce 99.86)
Hit samples:  2167  Ave length:  2.08
Symbols:  15 [(0, 311), (1, 339), (2, 331), (3, 328), (4, 335), (5, 334), (6, 344), (7, 331), (8, 341), (9, 339), (10, 287), (11, 322), (12, 337), (13, 220), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((2, 8), 16), 3), (((7, 9), 63), 3), (((7, 5), 35), 3), (((5, 3), 15), 3), (((8, 6), 48), 3), (((4, 5), 20), 3), (((2, 9), 18), 2), (((8, 8), 64), 2), (((5, 4), 20), 2), (((6, 2), 12), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((0, 8), 0), 3), (((8, 8), 1), 3), (((0, 3), 0), 3), (((2, 9), 1), 3), (((0, 1), 0), 3), (((8, 3), 3), 3), (((6, 9), 1), 3), (((9, 4), 3), 3), (((7, 3), 3), 3), (((6, 6), 1), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.45
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.90
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 90.20 (abduce 91.29)
Hit samples:  1981  Ave length:  1.99
Symbols:  15 [(0, 311), (1, 339), (2, 299), (3, 285), (4, 291), (5, 286), (6, 294), (7, 282), (8, 289), (9, 285), (10, 286), (11, 325), (12, 152), (13, 217), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 981)]
Learn perception with 1981 samples for 100 iterations, 0.9561247780877504, 0.9516974253816359, 4389, 12 epochs, take 26 sec.
Epoch time: 5m 50s
------------------------------
Epoch 17/99 (max_len=3, data=2170)
Train acc: 90.20 (abduce 99.86)
Hit samples:  2167  Ave length:  2.08
Symbols:  15 [(0, 311), (1, 339), (2, 331), (3, 328), (4, 336), (5, 333), (6, 344), (7, 329), (8, 341), (9, 340), (10, 283), (11, 322), (12, 319), (13, 242), (15, 3)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 5), 40), 3), (((8, 8), 64), 3), (((8, 9), 72), 3), (((7, 9), 63), 3), (((5, 4), 20), 3), (((8, 7), 56), 3), (((4, 4), 16), 3), (((5, 7), 35), 3), (((4, 3), 12), 3), (((6, 9), 54), 3)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((6, 9), 1), 4), (((5, 2), 3), 3), (((8, 3), 3), 3), (((9, 4), 3), 3), (((3, 4), 1), 3), (((7, 8), 1), 3), (((7, 3), 3), 3), (((4, 1), 4), 3), (((0, 9), 0), 2), (((5, 4), 2), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.45
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.87
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 90.20 (abduce 91.29)
Hit samples:  1981  Ave length:  1.99
Symbols:  15 [(0, 311), (1, 339), (2, 299), (3, 285), (4, 291), (5, 286), (6, 294), (7, 282), (8, 289), (9, 285), (10, 286), (11, 325), (12, 152), (13, 217), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 981)]
Learn perception with 1981 samples for 100 iterations, 0.9561247780877504, 0.9501025290498974, 4389, 12 epochs, take 25 sec.
Epoch time: 5m 50s
------------------------------
Epoch 18/99 (max_len=3, data=2170)
Train acc: 90.29 (abduce 99.86)
Hit samples:  2167  Ave length:  2.08
Symbols:  15 [(0, 311), (1, 339), (2, 332), (3, 328), (4, 336), (5, 334), (6, 344), (7, 329), (8, 341), (9, 339), (10, 287), (11, 322), (12, 324), (13, 233), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 1167)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((5, 7), 35), 3), (((4, 8), 32), 3), (((4, 5), 20), 3), (((9, 5), 45), 3), (((4, 4), 16), 3), (((9, 9), 81), 3), (((8, 5), 40), 3), (((8, 9), 72), 3), (((7, 9), 63), 3), (((6, 2), 12), 3)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((1, 2), 1), 7), (((0, 1), 0), 4), (((9, 4), 3), 3), (((8, 3), 3), 3), (((2, 8), 1), 3), (((7, 3), 3), 3), (((2, 4), 1), 3), (((2, 6), 1), 3), (((5, 2), 3), 3), (((0, 4), 0), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.44
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.88
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 90.29 (abduce 91.29)
Hit samples:  1981  Ave length:  1.99
Symbols:  15 [(0, 311), (1, 339), (2, 299), (3, 285), (4, 291), (5, 286), (6, 294), (7, 282), (8, 289), (9, 285), (10, 286), (11, 325), (12, 152), (13, 217), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 981)]
Learn perception with 1981 samples for 100 iterations, 0.9561247780877504, 0.949419002050581, 4389, 12 epochs, take 26 sec.
Epoch time: 5m 54s
------------------------------
Epoch 19/99 (max_len=3, data=2170)
Train acc: 90.34 (abduce 99.91)
Hit samples:  2168  Ave length:  2.08
Symbols:  15 [(0, 311), (1, 339), (2, 332), (3, 328), (4, 336), (5, 334), (6, 344), (7, 330), (8, 341), (9, 340), (10, 287), (11, 322), (12, 325), (13, 233), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 5), 30), 3), (((7, 8), 56), 3), (((8, 6), 48), 3), (((6, 3), 18), 3), (((3, 8), 24), 3), (((4, 9), 36), 3), (((3, 4), 12), 3), (((4, 4), 16), 3), (((2, 9), 18), 3), (((4, 8), 32), 3)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((4, 4), 1), 5), (((0, 4), 0), 4), (((9, 9), 1), 4), (((5, 2), 3), 3), (((8, 3), 3), 3), (((1, 2), 1), 3), (((9, 4), 3), 3), (((7, 3), 3), 3), (((1, 3), 1), 3), (((3, 6), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 1.00
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 1.00
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.45
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.88
Symbol-14: None 0.00
Symbol-15: None 0.00
Train acc: 90.34 (abduce 91.29)
Hit samples:  1981  Ave length:  1.99
Symbols:  15 [(0, 311), (1, 339), (2, 299), (3, 285), (4, 291), (5, 286), (6, 294), (7, 282), (8, 289), (9, 285), (10, 286), (11, 325), (12, 152), (13, 217), (15, 2)]
Head:  [((-1,), 1000), ((1, -1, 1), 981)]
Learn perception with 1981 samples for 100 iterations, 0.9561247780877504, 0.9496468443836865, 4389, 12 epochs, take 25 sec.
Percentage of None result: 41.80
              precision    recall  f1-score   support

           0       0.97      0.99      0.98      4016
           1       0.69      0.83      0.76      5142
           2       0.99      0.95      0.97      5321
           3       0.97      0.98      0.97      5241
           4       0.99      0.98      0.98      5279
           5       1.00      0.98      0.99      5383
           6       0.97      1.00      0.98      5427
           7       1.00      1.00      1.00      5462
           8       0.99      0.97      0.98      5453
           9       0.98      1.00      0.99      5476
           +       0.99      0.97      0.98     13199
           -       0.96      1.00      0.98     10734
           *       1.00      1.00      1.00     13491
           /       1.00      1.00      1.00      9876
           (       0.77      0.95      0.85     21081
           )       0.96      0.68      0.80     21081

    accuracy                           0.93    141662
   macro avg       0.95      0.95      0.95    141662
weighted avg       0.94      0.93      0.93    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (     )
0  280    0    0    0    0    0    0    0    3    0    0    0    0    0     0     0
1    0  302    1    0    0    0    1    1    0    0    0    0    0    0    12    44
2    0    4  356    0    0    0    3    0    2    3    0    0    2    1     1     0
3    0    0    3  361    0    0    0    0    0    5    0    0    0    0     0     0
4    0    4    0    0  363    0    0    0    0    0    4    0    0    0     0     0
5    7    0    0    0    0  372    0    0    0    0    0    0    0    0     0     0
6    0    0    0    0    0    0  383    0    0    0    0    0    0    0     0     0
7    0    0    0    0    0    0    0  385    0    0    0    0    0    0     0     0
8    0    0    0   10    0    0    0    0  374    0    0    0    0    0     0     0
9    0    0    0    0    0    0    0    0    0  386    0    0    0    0     0     0
+    0    3    0    0    3    0    0    0    0    0  900   23    0    0     0     0
-    0    0    0    0    0    0    0    0    0    0    2  755    0    0     0     0
*    0    0    0    0    0    0    0    0    0    0    0    0  952    0     0     0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  697     0     0
(    0   52    0    0    0    0    7    0    0    0    0    7    0    0  1420     0
)    0   67    0    0    0    0    0    0    0    0    0    0    0    0   405  1014
result accuracy by length:
1 ( 2%) 98.00
3 ( 2%) 72.00
5 ( 2%) 44.19
7 ( 4%) 33.62
9 ( 4%) 38.19
11 ( 3%) 28.41
13 ( 4%) 31.48
15 ( 4%) 27.72
17 ( 4%) 24.76
19 ( 4%) 24.51
21 ( 4%) 22.22
23 ( 4%) 20.98
25 ( 4%) 17.00
27 ( 4%) 23.15
29 ( 3%) 13.61
31 ( 3%) 15.48
33 ( 2%) 13.57
35 ( 2%) 12.33
37 ( 2%) 16.24
39 ( 3%) 10.53
41 ( 3%) 14.77
43 ( 2%) 12.32
45 ( 2%)  9.82
47 ( 2%)  6.82
49 ( 2%) 10.56
51 ( 2%) 12.88
53 ( 2%) 11.19
55 ( 2%)  6.72
57 ( 2%)  8.39
59 ( 2%)  9.35
61 ( 1%)  4.69
63 ( 0%) 14.29
65 ( 0%)  0.00
67 ( 0%)  0.00
result accuracy by symbol:
( (91%) 18.55
) (91%) 18.55
* (87%) 15.28
+ (84%) 18.61
- (77%) 20.39
/ (76%) 19.97
0 (52%) 19.88
1 (60%) 17.70
2 (61%) 17.81
3 (62%) 18.46
4 (61%) 17.01
5 (62%) 17.51
6 (62%) 16.79
7 (63%) 17.11
8 (64%) 16.43
9 (63%) 16.73
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 90.00
2 ( 0%) 100.00
3 ( 0%) 100.00
4 ( 0%) 100.00
5 ( 0%) 90.00
6 ( 0%) 100.00
7 ( 0%) 100.00
8 ( 0%) 100.00
9 ( 0%) 100.00
result accuracy by result:
0 (21%) 39.05
1 (10%) 41.39
2 ( 4%) 45.45
3 ( 2%) 34.07
4 ( 2%) 27.82
5 ( 2%) 41.00
6 ( 2%) 33.91
7 ( 2%) 36.28
8 ( 2%) 24.79
9 ( 1%) 46.51
result accuracy by generalization:
1 (22.45%) 45.64
2 (22.96%) 33.96
3 (22.53%)  4.26
4 (15.82%) 14.97
5 (16.24%)  5.53
error cases:
1 ( [-1] [-1] 1 None
5 0 [-1] [-1] 5 0
5*9 5*9 [1, -1, 1] [1, -1, 1] 45 5
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 4
6*4 6*4 [1, -1, 1] [1, -1, 1] 24 6
9*0 9*0 [1, -1, 1] [1, -1, 1] 0 9
3*5 3*5 [1, -1, 1] [1, -1, 1] 15 3
5*5 5*5 [1, -1, 1] [1, -1, 1] 25 5
2*4 2*4 [1, -1, 1] [1, -1, 1] 8 4
8-1 8-) [1, -1, 1] [1, -1, 1] 7 None
5*3 5*3 [1, -1, 1] [1, -1, 1] 15 5
7*9 7*9 [1, -1, 1] [1, -1, 1] 63 7
7/2 7/2 [1, -1, 1] [1, -1, 1] 4 2
3*2 3*2 [1, -1, 1] [1, -1, 1] 6 3
8/3 8/3 [1, -1, 1] [1, -1, 1] 3 2
3*3 3*3 [1, -1, 1] [1, -1, 1] 9 3
6*3 6*3 [1, -1, 1] [1, -1, 1] 18 6
8*2 8*2 [1, -1, 1] [1, -1, 1] 16 8
2-1 2-) [1, -1, 1] [1, -1, 1] 1 None
7/3 7/3 [1, -1, 1] [1, -1, 1] 3 2
val (Perception Acc=93.06, Head Acc=100.00, Result Acc=22.27)
Epoch time: 6m 18s
------------------------------
Epoch 20/99 (max_len=7, data=3387)
Train acc: 76.88 (abduce 96.46)
Hit samples:  3267  Ave length:  3.46
Symbols:  16 [(0, 590), (1, 642), (2, 688), (3, 717), (4, 716), (5, 683), (6, 696), (7, 722), (8, 697), (9, 679), (10, 925), (11, 983), (12, 970), (13, 681), (14, 597), (15, 307)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168), ((1, 3, 1, -1, 3), 342), ((1, -1, 3, 1, 3), 110), ((1, -1, 4, 4, 1, 4, 4), 327), ((2, 2, 5, 2, 2, -1, 5), 124), ((1, 3, 1, -1, 5, 3, 5), 87), ((1, 3, 1, 5, 3, -1, 5), 76), ((1, 5, 3, 1, 3, -1, 5), 19), ((1, -1, 3, 5, 3, 1, 5), 14)]
Semantics: 16/10/4 (total/solved/learn).
Symbol-10 (int -> int -> int), Samples: 100,  [(((7, 2), 10), 2), (((7, 4), 32), 2), (((6, 9), 57), 2), (((6, 3), 6), 1), (((1, 6), 8), 1), (((3, 7), 55), 1), (((0, 2), 3), 1), (((2, 2), 3), 1), (((8, 8), 80), 1), (((1, 3), 3), 1)]
Symbol-11 (int -> int -> int), Samples: 100,  [(((2, 1), 2), 2), (((9, 6), 0), 2), (((6, 4), 0), 2), (((8, 3), 0), 2), (((8, 6), 0), 2), (((9, 3), 0), 2), (((2, 0), 9), 1), (((13, 7), 0), 1), (((15, 9), 15), 1), (((2, 6), 3), 1)]
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 4), 16), 3), (((7, 7), 49), 3), (((8, 0), 0), 3), (((9, 7), 63), 2), (((3, 8), 24), 2), (((6, 7), 42), 2), (((1, 2), 1), 2), (((5, 0), 0), 2), (((6, 3), 18), 2), (((7, 9), 63), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((5, 2), 3), 5), (((8, 1), 8), 5), (((4, 1), 4), 4), (((9, 3), 3), 4), (((7, 3), 3), 4), (((8, 3), 3), 3), (((9, 1), 9), 3), (((9, 4), 3), 3), (((9, 2), 5), 2), (((8, 2), 4), 2)]
Update grammar with invented programs and set frontiers to none.
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.87
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.90
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.63
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.88
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 76.88 (abduce 86.33)
Hit samples:  2924  Ave length:  3.34
Symbols:  16 [(0, 587), (1, 668), (2, 620), (3, 599), (4, 589), (5, 564), (6, 593), (7, 605), (8, 575), (9, 557), (10, 843), (11, 981), (12, 541), (13, 668), (14, 510), (15, 278)]
Head:  [((-1,), 1000), ((1, -1, 1), 981), ((1, 3, 1, -1, 3), 285), ((1, -1, 3, 1, 3), 98), ((1, -1, 4, 4, 1, 4, 4), 298), ((2, 2, 5, 2, 2, -1, 5), 95), ((1, 3, 1, 5, 3, -1, 5), 70), ((1, 3, 1, -1, 5, 3, 5), 69), ((1, 5, 3, 1, 3, -1, 5), 15), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2924 samples for 100 iterations, 0.9430353855594191, 6 epochs, take 26 sec.
Epoch time: 10m 43s
------------------------------
Epoch 21/99 (max_len=7, data=3387)
Train acc: 82.60 (abduce 99.06)
Hit samples:  3355  Ave length:  3.54
Symbols:  16 [(0, 619), (1, 720), (2, 729), (3, 729), (4, 728), (5, 692), (6, 732), (7, 744), (8, 715), (9, 702), (10, 975), (11, 1028), (12, 947), (13, 801), (14, 659), (15, 341)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 362), ((1, -1, 3, 1, 3), 112), ((1, -1, 4, 4, 1, 4, 4), 363), ((2, 2, 5, 2, 2, -1, 5), 136), ((1, 3, 1, -1, 5, 3, 5), 89), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 17)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((7, 6), 42), 3), (((7, 4), 28), 3), (((4, 8), 32), 3), (((6, 5), 30), 3), (((4, 7), 28), 3), (((7, 5), 35), 2), (((5, 8), 40), 2), (((5, 9), 45), 2), (((4, 3), 12), 2), (((4, 4), 16), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((8, 1), 8), 5), (((4, 1), 4), 5), (((9, 1), 9), 5), (((9, 4), 3), 5), (((5, 2), 3), 4), (((9, 3), 3), 4), (((7, 3), 3), 4), (((7, 1), 7), 3), (((6, 1), 6), 3), (((8, 3), 3), 3)]
Update grammar with invented programs and set frontiers to none.
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.93
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.68
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.87
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 82.60 (abduce 86.77)
Hit samples:  2939  Ave length:  3.36
Symbols:  16 [(0, 591), (1, 682), (2, 625), (3, 598), (4, 598), (5, 565), (6, 598), (7, 610), (8, 578), (9, 561), (10, 854), (11, 982), (12, 540), (13, 691), (14, 521), (15, 283)]
Head:  [((-1,), 1000), ((1, -1, 1), 981), ((1, 3, 1, -1, 3), 287), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 302), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 71), ((1, 5, 3, 1, 3, -1, 5), 15), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2939 samples for 100 iterations, 0.943707603523337, 6 epochs, take 26 sec.
Epoch time: 10m 48s
------------------------------
Epoch 22/99 (max_len=7, data=3387)
Train acc: 83.29 (abduce 99.17)
Hit samples:  3359  Ave length:  3.54
Symbols:  16 [(0, 620), (1, 730), (2, 744), (3, 724), (4, 724), (5, 697), (6, 720), (7, 743), (8, 715), (9, 709), (10, 976), (11, 1025), (12, 985), (13, 775), (14, 659), (15, 345)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 361), ((1, -1, 3, 1, 3), 112), ((1, -1, 4, 4, 1, 4, 4), 366), ((2, 2, 5, 2, 2, -1, 5), 135), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 17)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((3, 8), 24), 3), (((8, 4), 32), 3), (((9, 4), 36), 3), (((8, 6), 48), 3), (((5, 5), 25), 3), (((6, 8), 48), 3), (((4, 4), 16), 3), (((4, 9), 36), 2), (((3, 7), 21), 2), (((7, 3), 21), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 6), (((9, 4), 3), 5), (((5, 2), 3), 5), (((4, 1), 4), 4), (((7, 3), 3), 4), (((8, 1), 8), 4), (((9, 3), 3), 4), (((6, 2), 3), 3), (((7, 1), 7), 3), (((8, 3), 3), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.69
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.89
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 83.29 (abduce 86.80)
Hit samples:  2940  Ave length:  3.36
Symbols:  16 [(0, 590), (1, 682), (2, 628), (3, 599), (4, 598), (5, 568), (6, 596), (7, 610), (8, 577), (9, 561), (10, 853), (11, 979), (12, 546), (13, 691), (14, 522), (15, 284)]
Head:  [((-1,), 1000), ((1, -1, 1), 981), ((1, 3, 1, -1, 3), 287), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 303), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 71), ((1, 5, 3, 1, 3, -1, 5), 15), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2940 samples for 100 iterations, 0.9432416025900445, 6 epochs, take 26 sec.
Epoch time: 5m 52s
------------------------------
Epoch 23/99 (max_len=7, data=3387)
Train acc: 83.88 (abduce 99.26)
Hit samples:  3362  Ave length:  3.54
Symbols:  16 [(0, 623), (1, 734), (2, 742), (3, 728), (4, 726), (5, 698), (6, 724), (7, 744), (8, 713), (9, 701), (10, 981), (11, 1027), (12, 967), (13, 794), (14, 658), (15, 346)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 367), ((2, 2, 5, 2, 2, -1, 5), 134), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 17)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((7, 5), 35), 5), (((3, 8), 24), 4), (((4, 6), 24), 3), (((5, 2), 10), 3), (((9, 7), 63), 3), (((7, 8), 56), 3), (((4, 8), 32), 3), (((2, 8), 16), 3), (((9, 4), 36), 3), (((3, 6), 18), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 6), (((9, 4), 3), 5), (((5, 2), 3), 5), (((8, 1), 8), 4), (((9, 3), 3), 4), (((7, 1), 7), 4), (((4, 1), 4), 4), (((7, 3), 3), 4), (((8, 3), 3), 3), (((6, 2), 3), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.70
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.89
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 83.88 (abduce 86.80)
Hit samples:  2940  Ave length:  3.36
Symbols:  16 [(0, 590), (1, 682), (2, 629), (3, 599), (4, 598), (5, 568), (6, 596), (7, 610), (8, 576), (9, 561), (10, 853), (11, 978), (12, 542), (13, 696), (14, 522), (15, 284)]
Head:  [((-1,), 1000), ((1, -1, 1), 981), ((1, 3, 1, -1, 3), 287), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 303), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 71), ((1, 5, 3, 1, 3, -1, 5), 15), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2940 samples for 100 iterations, 0.9436462970457304, 6 epochs, take 26 sec.
Epoch time: 5m 49s
------------------------------
Epoch 24/99 (max_len=7, data=3387)
Train acc: 84.03 (abduce 99.32)
Hit samples:  3364  Ave length:  3.54
Symbols:  16 [(0, 625), (1, 734), (2, 742), (3, 727), (4, 730), (5, 699), (6, 729), (7, 737), (8, 713), (9, 703), (10, 987), (11, 1022), (12, 961), (13, 803), (14, 659), (15, 349)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 369), ((2, 2, 5, 2, 2, -1, 5), 134), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 17)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((3, 8), 24), 7), (((4, 5), 20), 3), (((5, 8), 40), 3), (((4, 8), 32), 3), (((9, 7), 63), 3), (((7, 4), 28), 3), (((6, 4), 24), 3), (((7, 8), 56), 2), (((5, 7), 35), 2), (((6, 8), 48), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 4), 3), 5), (((9, 1), 9), 5), (((5, 2), 3), 5), (((8, 1), 8), 4), (((4, 1), 4), 4), (((9, 3), 3), 4), (((7, 3), 3), 4), (((7, 1), 7), 4), (((8, 3), 3), 3), (((5, 1), 5), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.70
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.89
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 84.03 (abduce 86.80)
Hit samples:  2940  Ave length:  3.36
Symbols:  16 [(0, 590), (1, 682), (2, 628), (3, 599), (4, 599), (5, 568), (6, 597), (7, 610), (8, 576), (9, 560), (10, 853), (11, 975), (12, 541), (13, 700), (14, 522), (15, 284)]
Head:  [((-1,), 1000), ((1, -1, 1), 981), ((1, 3, 1, -1, 3), 287), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 303), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 71), ((1, 5, 3, 1, 3, -1, 5), 15), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2940 samples for 100 iterations, 0.943949817887495, 6 epochs, take 26 sec.
Epoch time: 5m 53s
------------------------------
Epoch 25/99 (max_len=7, data=3387)
Train acc: 84.30 (abduce 99.32)
Hit samples:  3364  Ave length:  3.54
Symbols:  16 [(0, 624), (1, 734), (2, 737), (3, 729), (4, 730), (5, 697), (6, 729), (7, 742), (8, 713), (9, 704), (10, 982), (11, 1022), (12, 920), (13, 849), (14, 662), (15, 346)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 369), ((2, 2, 5, 2, 2, -1, 5), 134), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 17)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 7), 28), 5), (((5, 2), 10), 3), (((8, 2), 16), 3), (((7, 5), 35), 3), (((8, 6), 48), 3), (((8, 8), 64), 3), (((8, 4), 32), 3), (((4, 4), 16), 2), (((9, 8), 72), 2), (((6, 8), 48), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 6), (((5, 2), 3), 5), (((9, 4), 3), 5), (((6, 1), 6), 5), (((4, 1), 4), 5), (((7, 1), 7), 4), (((8, 1), 8), 4), (((9, 3), 3), 4), (((5, 1), 5), 4), (((7, 3), 3), 4)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.69
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.88
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 84.30 (abduce 86.86)
Hit samples:  2942  Ave length:  3.36
Symbols:  16 [(0, 590), (1, 683), (2, 628), (3, 599), (4, 600), (5, 569), (6, 597), (7, 613), (8, 576), (9, 561), (10, 854), (11, 978), (12, 535), (13, 707), (14, 524), (15, 284)]
Head:  [((-1,), 1000), ((1, -1, 1), 981), ((1, 3, 1, -1, 3), 287), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 304), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 71), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2942 samples for 100 iterations, 0.9445342493433017, 6 epochs, take 26 sec.
Epoch time: 5m 53s
------------------------------
Epoch 26/99 (max_len=7, data=3387)
Train acc: 84.21 (abduce 99.38)
Hit samples:  3366  Ave length:  3.55
Symbols:  16 [(0, 624), (1, 735), (2, 736), (3, 728), (4, 732), (5, 697), (6, 731), (7, 747), (8, 713), (9, 702), (10, 987), (11, 1023), (12, 930), (13, 837), (14, 664), (15, 348)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 134), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 17)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((9, 7), 63), 4), (((2, 9), 18), 3), (((4, 7), 28), 3), (((8, 5), 40), 3), (((5, 3), 15), 2), (((6, 3), 18), 2), (((3, 2), 12), 2), (((9, 9), 81), 2), (((7, 8), 56), 2), (((4, 5), 20), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 4), 3), 5), (((4, 1), 4), 5), (((5, 2), 3), 5), (((9, 1), 9), 5), (((6, 1), 6), 5), (((7, 1), 7), 4), (((9, 3), 3), 4), (((8, 1), 8), 4), (((5, 1), 5), 4), (((7, 3), 3), 4)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.69
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.88
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 84.21 (abduce 86.89)
Hit samples:  2943  Ave length:  3.37
Symbols:  16 [(0, 591), (1, 683), (2, 628), (3, 599), (4, 600), (5, 570), (6, 597), (7, 613), (8, 576), (9, 562), (10, 854), (11, 978), (12, 538), (13, 706), (14, 526), (15, 284)]
Head:  [((-1,), 1000), ((1, -1, 1), 981), ((1, 3, 1, -1, 3), 287), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 305), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 71), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2943 samples for 100 iterations, 0.9442705704189803, 6 epochs, take 26 sec.
Epoch time: 5m 54s
------------------------------
Epoch 27/99 (max_len=7, data=3387)
Train acc: 84.33 (abduce 99.38)
Hit samples:  3366  Ave length:  3.55
Symbols:  16 [(0, 624), (1, 735), (2, 737), (3, 729), (4, 730), (5, 699), (6, 730), (7, 745), (8, 713), (9, 703), (10, 983), (11, 1019), (12, 931), (13, 844), (14, 664), (15, 348)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 134), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 17)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((3, 8), 24), 4), (((8, 9), 72), 3), (((9, 7), 63), 3), (((4, 4), 16), 3), (((7, 4), 28), 3), (((6, 2), 12), 2), (((2, 6), 12), 2), (((5, 8), 40), 2), (((8, 8), 64), 2), (((6, 5), 30), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 5), (((4, 1), 4), 5), (((6, 1), 6), 5), (((5, 2), 3), 5), (((9, 4), 3), 5), (((7, 1), 7), 4), (((7, 3), 3), 4), (((9, 3), 3), 4), (((5, 1), 5), 4), (((8, 1), 8), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.69
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.88
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 84.33 (abduce 86.89)
Hit samples:  2943  Ave length:  3.37
Symbols:  16 [(0, 591), (1, 683), (2, 628), (3, 599), (4, 600), (5, 570), (6, 597), (7, 613), (8, 576), (9, 562), (10, 854), (11, 977), (12, 539), (13, 706), (14, 526), (15, 284)]
Head:  [((-1,), 1000), ((1, -1, 1), 981), ((1, 3, 1, -1, 3), 287), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 305), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 71), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2943 samples for 100 iterations, 0.9443715295305402, 6 epochs, take 26 sec.
Epoch time: 5m 54s
------------------------------
Epoch 28/99 (max_len=7, data=3387)
Train acc: 84.24 (abduce 99.38)
Hit samples:  3366  Ave length:  3.55
Symbols:  16 [(0, 625), (1, 734), (2, 733), (3, 726), (4, 729), (5, 701), (6, 729), (7, 748), (8, 713), (9, 707), (10, 988), (11, 1023), (12, 930), (13, 836), (14, 665), (15, 347)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 370), ((2, 2, 5, 2, 2, -1, 5), 135), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 17)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((3, 8), 24), 4), (((4, 5), 20), 4), (((7, 5), 35), 4), (((6, 6), 36), 3), (((4, 8), 32), 3), (((9, 7), 63), 3), (((5, 2), 10), 3), (((4, 6), 24), 2), (((5, 6), 30), 2), (((9, 3), 27), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((6, 1), 6), 5), (((9, 1), 9), 5), (((5, 2), 3), 5), (((9, 4), 3), 5), (((4, 1), 4), 5), (((8, 1), 8), 4), (((9, 3), 3), 4), (((7, 1), 7), 4), (((5, 1), 5), 4), (((7, 3), 3), 4)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.69
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.88
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 84.24 (abduce 86.89)
Hit samples:  2943  Ave length:  3.37
Symbols:  16 [(0, 591), (1, 683), (2, 628), (3, 599), (4, 600), (5, 570), (6, 597), (7, 613), (8, 576), (9, 562), (10, 854), (11, 978), (12, 538), (13, 706), (14, 526), (15, 284)]
Head:  [((-1,), 1000), ((1, -1, 1), 981), ((1, 3, 1, -1, 3), 287), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 305), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 71), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2943 samples for 100 iterations, 0.9442705704189803, 6 epochs, take 26 sec.
Epoch time: 5m 55s
------------------------------
Epoch 29/99 (max_len=7, data=3387)
Train acc: 84.32 (abduce 99.41)
Hit samples:  3367  Ave length:  3.55
Symbols:  16 [(0, 627), (1, 734), (2, 739), (3, 728), (4, 732), (5, 701), (6, 729), (7, 746), (8, 711), (9, 701), (10, 983), (11, 1024), (12, 930), (13, 842), (14, 667), (15, 347)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 135), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 17)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((5, 2), 10), 3), (((4, 5), 20), 3), (((3, 8), 24), 3), (((8, 9), 72), 3), (((7, 5), 35), 3), (((9, 6), 54), 3), (((6, 6), 36), 3), (((4, 6), 24), 3), (((8, 5), 40), 3), (((7, 3), 21), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 6), (((5, 2), 3), 5), (((4, 1), 4), 5), (((6, 1), 6), 5), (((9, 4), 3), 5), (((7, 1), 7), 4), (((8, 1), 8), 4), (((7, 3), 3), 4), (((5, 1), 5), 4), (((9, 3), 3), 4)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.69
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.88
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 84.32 (abduce 86.89)
Hit samples:  2943  Ave length:  3.37
Symbols:  16 [(0, 591), (1, 683), (2, 628), (3, 599), (4, 600), (5, 570), (6, 597), (7, 613), (8, 576), (9, 562), (10, 854), (11, 978), (12, 537), (13, 707), (14, 526), (15, 284)]
Head:  [((-1,), 1000), ((1, -1, 1), 981), ((1, 3, 1, -1, 3), 287), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 305), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 71), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2943 samples for 100 iterations, 0.9443715295305402, 6 epochs, take 26 sec.
Percentage of None result: 34.22
              precision    recall  f1-score   support

           0       0.97      0.99      0.98      4016
           1       0.74      0.96      0.84      5142
           2       1.00      0.96      0.98      5321
           3       0.97      0.97      0.97      5241
           4       0.99      1.00      1.00      5279
           5       1.00      1.00      1.00      5383
           6       1.00      1.00      1.00      5427
           7       0.97      0.97      0.97      5462
           8       0.99      0.97      0.98      5453
           9       0.99      1.00      0.99      5476
           +       0.99      1.00      0.99     13199
           -       0.99      1.00      0.99     10734
           *       1.00      1.00      1.00     13491
           /       1.00      1.00      1.00      9876
           (       0.75      0.93      0.83     21081
           )       1.00      0.68      0.81     21081

    accuracy                           0.94    141662
   macro avg       0.96      0.96      0.96    141662
weighted avg       0.95      0.94      0.93    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (     )
0  280    0    0    0    0    0    0    0    3    0    0    0    0    0     0     0
1    0  349    1    0    1    0    0    0    0    0    1    1    0    0     5     3
2    1    4  359    0    1    0    0    2    1    1    0    0    1    0     2     0
3    6    0    0  357    0    0    0    3    0    2    0    0    0    0     0     0
4    0    0    0    0  372    0    0    0    0    0    0    0    0    0     0     0
5    0    0    0    0    0  379    0    0    0    0    0    0    0    0     0     0
6    0    0    0    0    0    0  383    0    0    0    0    0    0    0     0     0
7    0    0    0    0    0    0    0  375    0    0   10    0    0    0     0     0
8    0    0    0   10    0    0    0    0  374    0    0    0    0    0     0     0
9    0    0    0    0    0    0    0    0    0  386    0    0    0    0     0     0
+    0    3    0    0    0    0    0    0    0    0  928    0    0    0     0     0
-    0    0    0    0    0    0    0    0    0    0    2  755    0    0     0     0
*    0    0    0    0    0    0    0    0    0    0    0    0  952    0     0     0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  697     0     0
(    0   82    0    0    0    0    0    7    0    0    0    7    0    0  1390     0
)    0   30    0    0    0    0    0    0    0    0    0    0    0    0   450  1007
result accuracy by length:
1 ( 2%) 99.00
3 ( 2%) 75.00
5 ( 2%) 48.84
7 ( 4%) 35.81
9 ( 4%) 39.20
11 ( 3%) 33.52
13 ( 4%) 35.19
15 ( 4%) 28.22
17 ( 4%) 29.13
19 ( 4%) 25.98
21 ( 4%) 27.27
23 ( 4%) 22.44
25 ( 4%) 23.00
27 ( 4%) 26.11
29 ( 3%) 17.80
31 ( 3%) 17.26
33 ( 2%) 15.00
35 ( 2%) 13.01
37 ( 2%) 17.09
39 ( 3%) 11.84
41 ( 3%) 19.46
43 ( 2%) 13.04
45 ( 2%) 14.29
47 ( 2%) 10.61
49 ( 2%) 10.56
51 ( 2%) 12.12
53 ( 2%) 11.94
55 ( 2%) 10.92
57 ( 2%) 13.29
59 ( 2%) 13.08
61 ( 1%)  7.81
63 ( 0%) 11.43
65 ( 0%) 22.22
67 ( 0%) 33.33
result accuracy by symbol:
( (91%) 21.19
) (91%) 21.19
* (87%) 17.60
+ (84%) 21.40
- (77%) 23.44
/ (76%) 22.58
0 (52%) 22.81
1 (60%) 21.69
2 (61%) 20.00
3 (62%) 20.49
4 (61%) 19.67
5 (62%) 20.35
6 (62%) 19.31
7 (63%) 19.47
8 (64%) 19.08
9 (63%) 19.35
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 90.00
2 ( 0%) 100.00
3 ( 0%) 100.00
4 ( 0%) 100.00
5 ( 0%) 100.00
6 ( 0%) 100.00
7 ( 0%) 100.00
8 ( 0%) 100.00
9 ( 0%) 100.00
result accuracy by result:
0 (21%) 43.24
1 (10%) 48.31
2 ( 4%) 47.98
3 ( 2%) 34.07
4 ( 2%) 28.57
5 ( 2%) 44.00
6 ( 2%) 44.35
7 ( 2%) 38.94
8 ( 2%) 27.35
9 ( 1%) 50.00
result accuracy by generalization:
1 (22.45%) 49.00
2 (22.96%) 38.31
3 (22.53%)  4.89
4 (15.82%) 18.45
5 (16.24%)  7.16
error cases:
1 ( [-1] [-1] 1 None
5*9 5*9 [1, -1, 1] [1, -1, 1] 45 5
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 4
6*4 6*4 [1, -1, 1] [1, -1, 1] 24 6
9*0 9*0 [1, -1, 1] [1, -1, 1] 0 9
3*5 3*5 [1, -1, 1] [1, -1, 1] 15 3
5*5 5*5 [1, -1, 1] [1, -1, 1] 25 5
2*4 2*4 [1, -1, 1] [1, -1, 1] 8 4
5*3 5*3 [1, -1, 1] [1, -1, 1] 15 5
7*9 7*9 [1, -1, 1] [1, -1, 1] 63 7
7/2 7/2 [1, -1, 1] [1, -1, 1] 4 2
3*2 3*2 [1, -1, 1] [1, -1, 1] 6 3
8/3 8/3 [1, -1, 1] [1, -1, 1] 3 2
3*3 3*3 [1, -1, 1] [1, -1, 1] 9 3
6*3 6*3 [1, -1, 1] [1, -1, 1] 18 6
8*2 8*2 [1, -1, 1] [1, -1, 1] 16 8
7/3 7/3 [1, -1, 1] [1, -1, 1] 3 2
7*7 7*7 [1, -1, 1] [1, -1, 1] 49 7
3-2 3-4 [1, -1, 1] [1, -1, 1] 1 0
7+5 ++5 [1, -1, 1] [1, -1, 1] 12 None
val (Perception Acc=93.50, Head Acc=100.00, Result Acc=24.98)
Epoch time: 6m 16s
------------------------------
Epoch 30/99 (max_len=7, data=3387)
Train acc: 84.29 (abduce 99.41)
Hit samples:  3367  Ave length:  3.55
Symbols:  16 [(0, 626), (1, 735), (2, 738), (3, 729), (4, 730), (5, 701), (6, 731), (7, 742), (8, 711), (9, 705), (10, 983), (11, 1020), (12, 942), (13, 834), (14, 666), (15, 348)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 135), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 17)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((7, 4), 28), 4), (((6, 9), 54), 3), (((8, 2), 16), 3), (((6, 7), 42), 3), (((6, 8), 48), 3), (((8, 7), 56), 3), (((4, 8), 32), 3), (((3, 8), 24), 2), (((6, 6), 36), 2), (((5, 4), 20), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 6), (((4, 1), 4), 5), (((5, 2), 3), 5), (((9, 4), 3), 5), (((6, 1), 6), 5), (((9, 3), 3), 4), (((7, 1), 7), 4), (((7, 3), 3), 4), (((8, 1), 8), 4), (((8, 3), 3), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.69
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.88
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 84.29 (abduce 86.89)
Hit samples:  2943  Ave length:  3.37
Symbols:  16 [(0, 591), (1, 683), (2, 628), (3, 599), (4, 600), (5, 570), (6, 597), (7, 613), (8, 576), (9, 562), (10, 854), (11, 977), (12, 538), (13, 707), (14, 526), (15, 284)]
Head:  [((-1,), 1000), ((1, -1, 1), 981), ((1, 3, 1, -1, 3), 287), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 305), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 71), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2943 samples for 100 iterations, 0.9444724886421, 6 epochs, take 26 sec.
Epoch time: 5m 56s
------------------------------
Epoch 31/99 (max_len=7, data=3387)
Train acc: 84.33 (abduce 99.41)
Hit samples:  3367  Ave length:  3.55
Symbols:  16 [(0, 626), (1, 734), (2, 736), (3, 730), (4, 732), (5, 700), (6, 729), (7, 743), (8, 713), (9, 705), (10, 983), (11, 1020), (12, 934), (13, 842), (14, 666), (15, 348)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 135), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 17)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 5), 40), 3), (((8, 2), 16), 3), (((5, 4), 20), 3), (((4, 5), 20), 3), (((4, 4), 16), 3), (((4, 7), 28), 3), (((9, 4), 36), 3), (((6, 6), 36), 3), (((2, 9), 18), 2), (((3, 8), 24), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 6), (((9, 4), 3), 5), (((6, 1), 6), 5), (((5, 2), 3), 5), (((4, 1), 4), 5), (((7, 3), 3), 4), (((8, 1), 8), 4), (((9, 3), 3), 4), (((7, 1), 7), 4), (((5, 1), 5), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.69
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.88
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 84.33 (abduce 86.89)
Hit samples:  2943  Ave length:  3.37
Symbols:  16 [(0, 591), (1, 683), (2, 628), (3, 599), (4, 600), (5, 570), (6, 597), (7, 613), (8, 576), (9, 562), (10, 854), (11, 977), (12, 538), (13, 707), (14, 526), (15, 284)]
Head:  [((-1,), 1000), ((1, -1, 1), 981), ((1, 3, 1, -1, 3), 287), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 305), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 71), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2943 samples for 100 iterations, 0.9444724886421, 6 epochs, take 26 sec.
Epoch time: 5m 55s
------------------------------
Epoch 32/99 (max_len=7, data=3387)
Train acc: 84.30 (abduce 99.41)
Hit samples:  3367  Ave length:  3.55
Symbols:  16 [(0, 623), (1, 734), (2, 739), (3, 729), (4, 730), (5, 701), (6, 731), (7, 748), (8, 711), (9, 702), (10, 983), (11, 1020), (12, 940), (13, 836), (14, 665), (15, 349)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 135), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 17)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 6), 36), 5), (((5, 2), 10), 5), (((3, 8), 24), 3), (((9, 9), 81), 3), (((7, 4), 28), 2), (((8, 4), 32), 2), (((6, 7), 42), 2), (((9, 8), 72), 2), (((8, 7), 56), 2), (((9, 7), 63), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 6), (((5, 2), 3), 5), (((9, 4), 3), 5), (((6, 1), 6), 5), (((9, 3), 3), 4), (((7, 3), 3), 4), (((7, 1), 7), 4), (((8, 1), 8), 4), (((4, 1), 4), 4), (((6, 2), 3), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.69
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.88
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 84.30 (abduce 86.92)
Hit samples:  2944  Ave length:  3.37
Symbols:  16 [(0, 591), (1, 683), (2, 628), (3, 599), (4, 600), (5, 570), (6, 597), (7, 615), (8, 576), (9, 562), (10, 855), (11, 977), (12, 538), (13, 707), (14, 526), (15, 284)]
Head:  [((-1,), 1000), ((1, -1, 1), 982), ((1, 3, 1, -1, 3), 287), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 305), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 71), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2944 samples for 100 iterations, 0.9442874444893016, 6 epochs, take 26 sec.
Epoch time: 5m 53s
------------------------------
Epoch 33/99 (max_len=7, data=3387)
Train acc: 84.21 (abduce 99.38)
Hit samples:  3366  Ave length:  3.55
Symbols:  16 [(0, 625), (1, 734), (2, 736), (3, 726), (4, 732), (5, 701), (6, 731), (7, 746), (8, 713), (9, 701), (10, 984), (11, 1019), (12, 965), (13, 809), (14, 664), (15, 348)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 134), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 17)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 6), 36), 5), (((5, 8), 40), 3), (((9, 3), 27), 3), (((9, 7), 63), 3), (((6, 8), 48), 3), (((3, 8), 24), 3), (((6, 9), 54), 3), (((7, 5), 35), 3), (((8, 5), 40), 3), (((7, 7), 49), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 5), (((5, 2), 3), 5), (((9, 4), 3), 5), (((9, 3), 3), 4), (((4, 1), 4), 4), (((6, 1), 6), 4), (((7, 1), 7), 4), (((8, 1), 8), 4), (((7, 3), 3), 4), (((5, 1), 5), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.70
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.89
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 84.21 (abduce 86.92)
Hit samples:  2944  Ave length:  3.37
Symbols:  16 [(0, 591), (1, 683), (2, 628), (3, 599), (4, 600), (5, 570), (6, 597), (7, 615), (8, 576), (9, 562), (10, 855), (11, 977), (12, 541), (13, 704), (14, 526), (15, 284)]
Head:  [((-1,), 1000), ((1, -1, 1), 982), ((1, 3, 1, -1, 3), 287), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 305), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 71), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2944 samples for 100 iterations, 0.943984658861526, 6 epochs, take 26 sec.
Epoch time: 5m 52s
------------------------------
Epoch 34/99 (max_len=7, data=3387)
Train acc: 84.30 (abduce 99.41)
Hit samples:  3367  Ave length:  3.55
Symbols:  16 [(0, 624), (1, 735), (2, 736), (3, 728), (4, 732), (5, 701), (6, 731), (7, 747), (8, 713), (9, 701), (10, 984), (11, 1020), (12, 945), (13, 830), (14, 665), (15, 349)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 135), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 17)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((7, 8), 56), 5), (((4, 7), 28), 4), (((8, 2), 16), 3), (((5, 2), 10), 3), (((6, 8), 48), 3), (((3, 5), 15), 3), (((4, 3), 12), 3), (((9, 9), 81), 3), (((3, 8), 24), 3), (((6, 7), 42), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 6), (((9, 4), 3), 5), (((5, 2), 3), 5), (((6, 1), 6), 5), (((9, 3), 3), 4), (((4, 1), 4), 4), (((8, 1), 8), 4), (((7, 3), 3), 4), (((7, 1), 7), 4), (((6, 2), 3), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.69
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.88
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 84.30 (abduce 86.92)
Hit samples:  2944  Ave length:  3.37
Symbols:  16 [(0, 591), (1, 683), (2, 628), (3, 599), (4, 600), (5, 570), (6, 597), (7, 615), (8, 576), (9, 562), (10, 855), (11, 977), (12, 539), (13, 706), (14, 526), (15, 284)]
Head:  [((-1,), 1000), ((1, -1, 1), 982), ((1, 3, 1, -1, 3), 287), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 305), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 71), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2944 samples for 100 iterations, 0.9441865159467098, 6 epochs, take 26 sec.
Epoch time: 5m 52s
------------------------------
Epoch 35/99 (max_len=7, data=3387)
Train acc: 84.39 (abduce 99.41)
Hit samples:  3367  Ave length:  3.55
Symbols:  16 [(0, 625), (1, 734), (2, 736), (3, 730), (4, 732), (5, 700), (6, 728), (7, 747), (8, 713), (9, 703), (10, 984), (11, 1020), (12, 924), (13, 851), (14, 665), (15, 349)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 135), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 17)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 6), 36), 4), (((4, 4), 16), 4), (((8, 7), 56), 3), (((9, 4), 36), 3), (((4, 6), 24), 3), (((3, 7), 21), 3), (((5, 3), 15), 3), (((2, 6), 12), 3), (((5, 8), 40), 3), (((7, 8), 56), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 6), (((8, 1), 8), 5), (((5, 2), 3), 5), (((9, 4), 3), 5), (((6, 1), 6), 5), (((7, 1), 7), 4), (((9, 3), 3), 4), (((5, 1), 5), 4), (((7, 3), 3), 4), (((4, 1), 4), 4)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.69
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.88
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 84.39 (abduce 86.92)
Hit samples:  2944  Ave length:  3.37
Symbols:  16 [(0, 591), (1, 683), (2, 628), (3, 599), (4, 600), (5, 570), (6, 597), (7, 615), (8, 576), (9, 562), (10, 855), (11, 977), (12, 537), (13, 708), (14, 526), (15, 284)]
Head:  [((-1,), 1000), ((1, -1, 1), 982), ((1, 3, 1, -1, 3), 287), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 305), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 71), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2944 samples for 100 iterations, 0.9443883730318934, 6 epochs, take 26 sec.
Epoch time: 5m 53s
------------------------------
Epoch 36/99 (max_len=7, data=3387)
Train acc: 84.35 (abduce 99.41)
Hit samples:  3367  Ave length:  3.55
Symbols:  16 [(0, 624), (1, 734), (2, 737), (3, 729), (4, 730), (5, 701), (6, 731), (7, 746), (8, 711), (9, 705), (10, 984), (11, 1020), (12, 932), (13, 843), (14, 665), (15, 349)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 135), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 17)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 8), 48), 4), (((7, 3), 21), 3), (((3, 8), 24), 3), (((9, 7), 63), 3), (((3, 7), 21), 3), (((8, 6), 48), 3), (((7, 8), 56), 2), (((6, 2), 12), 2), (((4, 4), 16), 2), (((4, 3), 12), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 6), (((9, 4), 3), 5), (((4, 1), 4), 5), (((8, 1), 8), 5), (((5, 2), 3), 5), (((6, 1), 6), 5), (((7, 1), 7), 4), (((7, 3), 3), 4), (((9, 3), 3), 4), (((5, 1), 5), 4)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.69
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.88
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 84.35 (abduce 86.92)
Hit samples:  2944  Ave length:  3.37
Symbols:  16 [(0, 591), (1, 683), (2, 628), (3, 599), (4, 600), (5, 570), (6, 597), (7, 615), (8, 576), (9, 562), (10, 855), (11, 977), (12, 537), (13, 708), (14, 526), (15, 284)]
Head:  [((-1,), 1000), ((1, -1, 1), 982), ((1, 3, 1, -1, 3), 287), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 305), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 71), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2944 samples for 100 iterations, 0.9443883730318934, 6 epochs, take 26 sec.
Epoch time: 5m 52s
------------------------------
Epoch 37/99 (max_len=7, data=3387)
Train acc: 84.38 (abduce 99.41)
Hit samples:  3367  Ave length:  3.55
Symbols:  16 [(0, 626), (1, 734), (2, 736), (3, 728), (4, 732), (5, 700), (6, 729), (7, 747), (8, 713), (9, 703), (10, 984), (11, 1020), (12, 926), (13, 849), (14, 666), (15, 348)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 135), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 17)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((3, 8), 24), 4), (((9, 3), 27), 3), (((8, 5), 40), 3), (((2, 6), 12), 3), (((6, 7), 42), 3), (((7, 4), 28), 3), (((6, 9), 54), 3), (((8, 2), 16), 3), (((8, 3), 24), 2), (((4, 9), 36), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 6), (((4, 1), 4), 5), (((5, 2), 3), 5), (((8, 1), 8), 5), (((9, 4), 3), 5), (((6, 1), 6), 5), (((7, 1), 7), 4), (((9, 3), 3), 4), (((7, 3), 3), 4), (((5, 1), 5), 4)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.69
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.88
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 84.38 (abduce 86.92)
Hit samples:  2944  Ave length:  3.37
Symbols:  16 [(0, 591), (1, 683), (2, 628), (3, 599), (4, 600), (5, 570), (6, 597), (7, 615), (8, 576), (9, 562), (10, 855), (11, 977), (12, 536), (13, 709), (14, 526), (15, 284)]
Head:  [((-1,), 1000), ((1, -1, 1), 982), ((1, 3, 1, -1, 3), 287), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 305), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 71), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2944 samples for 100 iterations, 0.9444893015744853, 6 epochs, take 26 sec.
Epoch time: 5m 53s
------------------------------
Epoch 38/99 (max_len=7, data=3387)
Train acc: 84.39 (abduce 99.44)
Hit samples:  3368  Ave length:  3.55
Symbols:  16 [(0, 624), (1, 735), (2, 741), (3, 728), (4, 730), (5, 700), (6, 729), (7, 747), (8, 711), (9, 706), (10, 985), (11, 1020), (12, 925), (13, 851), (14, 669), (15, 347)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 136), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 17)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((3, 8), 24), 3), (((6, 6), 36), 3), (((4, 5), 20), 3), (((5, 8), 40), 3), (((4, 3), 12), 3), (((8, 6), 48), 3), (((5, 6), 30), 2), (((9, 6), 54), 2), (((8, 4), 32), 2), (((6, 7), 42), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((8, 1), 8), 5), (((9, 4), 3), 5), (((6, 1), 6), 5), (((9, 1), 9), 5), (((5, 2), 3), 5), (((4, 1), 4), 5), (((7, 3), 3), 4), (((5, 1), 5), 4), (((9, 3), 3), 4), (((7, 1), 7), 4)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.69
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.88
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 84.39 (abduce 86.92)
Hit samples:  2944  Ave length:  3.37
Symbols:  16 [(0, 591), (1, 683), (2, 628), (3, 599), (4, 600), (5, 570), (6, 597), (7, 615), (8, 576), (9, 562), (10, 855), (11, 977), (12, 537), (13, 708), (14, 526), (15, 284)]
Head:  [((-1,), 1000), ((1, -1, 1), 982), ((1, 3, 1, -1, 3), 287), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 305), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 71), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2944 samples for 100 iterations, 0.9443883730318934, 6 epochs, take 26 sec.
Epoch time: 5m 54s
------------------------------
Epoch 39/99 (max_len=7, data=3387)
Train acc: 84.39 (abduce 99.41)
Hit samples:  3367  Ave length:  3.55
Symbols:  16 [(0, 625), (1, 734), (2, 739), (3, 730), (4, 732), (5, 699), (6, 728), (7, 747), (8, 713), (9, 701), (10, 984), (11, 1020), (12, 924), (13, 851), (14, 667), (15, 347)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 135), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, 5, 3, -1, 5), 87), ((1, 5, 3, 1, 3, -1, 5), 20), ((1, -1, 3, 5, 3, 1, 5), 17)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((5, 8), 40), 4), (((9, 4), 36), 4), (((6, 6), 36), 3), (((6, 8), 48), 3), (((4, 7), 28), 3), (((7, 4), 28), 2), (((6, 3), 18), 2), (((3, 4), 12), 2), (((7, 8), 56), 2), (((4, 6), 24), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((6, 1), 6), 5), (((8, 1), 8), 5), (((9, 1), 9), 5), (((9, 4), 3), 5), (((5, 2), 3), 5), (((5, 1), 5), 4), (((7, 1), 7), 4), (((9, 3), 3), 4), (((7, 3), 3), 4), (((4, 1), 4), 4)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.69
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.88
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 84.39 (abduce 86.92)
Hit samples:  2944  Ave length:  3.37
Symbols:  16 [(0, 591), (1, 683), (2, 628), (3, 599), (4, 600), (5, 570), (6, 597), (7, 615), (8, 576), (9, 562), (10, 855), (11, 977), (12, 537), (13, 708), (14, 526), (15, 284)]
Head:  [((-1,), 1000), ((1, -1, 1), 982), ((1, 3, 1, -1, 3), 287), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 305), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 5, 3, 5), 71), ((1, 5, 3, 1, 3, -1, 5), 16), ((1, -1, 3, 5, 3, 1, 5), 13)]
Learn perception with 2944 samples for 100 iterations, 0.9443883730318934, 6 epochs, take 26 sec.
Percentage of None result: 33.08
              precision    recall  f1-score   support

           0       0.96      0.99      0.97      4016
           1       0.76      0.96      0.85      5142
           2       1.00      0.96      0.98      5321
           3       0.97      0.97      0.97      5241
           4       1.00      1.00      1.00      5279
           5       1.00      0.98      0.99      5383
           6       1.00      1.00      1.00      5427
           7       0.97      0.97      0.97      5462
           8       0.99      0.97      0.98      5453
           9       0.98      1.00      0.99      5476
           +       0.99      1.00      0.99     13199
           -       0.99      1.00      0.99     10734
           *       1.00      1.00      1.00     13491
           /       1.00      1.00      1.00      9876
           (       0.75      0.93      0.83     21081
           )       0.99      0.68      0.80     21081

    accuracy                           0.93    141662
   macro avg       0.96      0.96      0.96    141662
weighted avg       0.95      0.93      0.93    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (     )
0  280    0    0    0    0    0    0    0    3    0    0    0    0    0     0     0
1    0  349    1    0    0    0    0    0    0    1    1    1    0    0     4     4
2    1    4  359    0    1    0    1    1    1    1    0    0    1    0     2     0
3    3    0    0  357    0    0    0    3    0    5    0    0    0    0     0     0
4    0    0    0    0  372    0    0    0    0    0    0    0    0    0     0     0
5    7    0    0    0    0  372    0    0    0    0    0    0    0    0     0     0
6    0    0    0    0    0    0  383    0    0    0    0    0    0    0     0     0
7    0    0    0    0    0    0    0  375    0    0   10    0    0    0     0     0
8    0    0    0   10    0    0    0    0  374    0    0    0    0    0     0     0
9    0    0    0    0    0    0    0    0    0  386    0    0    0    0     0     0
+    0    0    0    0    0    0    0    0    0    0  928    0    0    0     0     3
-    0    0    0    0    0    0    0    0    0    0    2  755    0    0     0     0
*    0    0    0    0    0    0    0    0    0    0    0    0  952    0     0     0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  697     0     0
(    0   82    0    0    0    0    0    7    0    0    0    7    0    0  1390     0
)    0   22    0    0    0    0    0    0    0    0    0    0    0    0   458  1007
result accuracy by length:
1 ( 2%) 99.00
3 ( 2%) 75.00
5 ( 2%) 48.06
7 ( 4%) 35.81
9 ( 4%) 39.20
11 ( 3%) 33.52
13 ( 4%) 35.65
15 ( 4%) 28.71
17 ( 4%) 28.64
19 ( 4%) 25.98
21 ( 4%) 27.27
23 ( 4%) 23.41
25 ( 4%) 23.50
27 ( 4%) 27.09
29 ( 3%) 18.85
31 ( 3%) 17.86
33 ( 2%) 15.71
35 ( 2%) 13.70
37 ( 2%) 17.95
39 ( 3%) 12.50
41 ( 3%) 18.79
43 ( 2%) 12.32
45 ( 2%) 14.29
47 ( 2%) 10.61
49 ( 2%) 11.97
51 ( 2%) 13.64
53 ( 2%) 14.18
55 ( 2%) 10.92
57 ( 2%) 13.99
59 ( 2%) 13.08
61 ( 1%)  7.81
63 ( 0%) 11.43
65 ( 0%) 22.22
67 ( 0%) 33.33
result accuracy by symbol:
( (91%) 21.63
) (91%) 21.63
* (87%) 18.00
+ (84%) 21.86
- (77%) 23.91
/ (76%) 23.09
0 (52%) 23.20
1 (60%) 22.26
2 (61%) 20.47
3 (62%) 20.89
4 (61%) 20.27
5 (62%) 20.70
6 (62%) 19.73
7 (63%) 19.83
8 (64%) 19.49
9 (63%) 19.80
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 100.00
2 ( 0%) 100.00
3 ( 0%) 100.00
4 ( 0%) 100.00
5 ( 0%) 90.00
6 ( 0%) 100.00
7 ( 0%) 100.00
8 ( 0%) 100.00
9 ( 0%) 100.00
result accuracy by result:
0 (21%) 43.71
1 (10%) 49.81
2 ( 4%) 50.00
3 ( 2%) 34.81
4 ( 2%) 28.57
5 ( 2%) 43.00
6 ( 2%) 44.35
7 ( 2%) 38.94
8 ( 2%) 27.35
9 ( 1%) 50.00
result accuracy by generalization:
1 (22.45%) 49.64
2 (22.96%) 38.58
3 (22.53%)  4.98
4 (15.82%) 19.10
5 (16.24%)  7.41
error cases:
5 0 [-1] [-1] 5 0
5*9 5*9 [1, -1, 1] [1, -1, 1] 45 5
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 4
6*4 6*4 [1, -1, 1] [1, -1, 1] 24 6
9*0 9*0 [1, -1, 1] [1, -1, 1] 0 9
3*5 3*5 [1, -1, 1] [1, -1, 1] 15 3
5*5 5*5 [1, -1, 1] [1, -1, 1] 25 5
2*4 2*4 [1, -1, 1] [1, -1, 1] 8 4
5*3 5*3 [1, -1, 1] [1, -1, 1] 15 5
7*9 7*9 [1, -1, 1] [1, -1, 1] 63 7
7/2 7/2 [1, -1, 1] [1, -1, 1] 4 2
3*2 3*2 [1, -1, 1] [1, -1, 1] 6 3
8/3 8/3 [1, -1, 1] [1, -1, 1] 3 2
3*3 3*3 [1, -1, 1] [1, -1, 1] 9 3
6*3 6*3 [1, -1, 1] [1, -1, 1] 18 6
8*2 8*2 [1, -1, 1] [1, -1, 1] 16 8
7/3 7/3 [1, -1, 1] [1, -1, 1] 3 2
7*7 7*7 [1, -1, 1] [1, -1, 1] 49 7
3-2 3-4 [1, -1, 1] [1, -1, 1] 1 0
7+5 ++5 [1, -1, 1] [1, -1, 1] 12 None
val (Perception Acc=93.43, Head Acc=100.00, Result Acc=25.35)
Epoch time: 6m 15s
------------------------------
Epoch 40/99 (max_len=11, data=4683)
Train acc: 75.16 (abduce 97.03)
Hit samples:  4544  Ave length:  5.2
Symbols:  16 [(0, 1085), (1, 1248), (2, 1322), (3, 1280), (4, 1255), (5, 1201), (6, 1245), (7, 1293), (8, 1203), (9, 1204), (10, 2099), (11, 2063), (12, 1813), (13, 1813), (14, 2314), (15, 1206)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 135), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 137), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 107), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 96)]
Semantics: 16/11/3 (total/solved/learn).
Symbol-10 (int -> int -> int), Samples: 100,  [(((3, 9), 21), 2), (((4, 2), 7), 2), (((4, 2), 58), 1), (((0, 7), 35), 1), (((2, 1), 4), 1), (((4, 7), 7), 1), (((6, 9), 45), 1), (((2, 4), 23), 1), (((2, 5), 6), 1), (((2, 0), 5), 1)]
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 8), 32), 3), (((6, 0), 0), 3), (((6, 7), 42), 3), (((8, 7), 56), 3), (((0, 1), 0), 2), (((7, 5), 35), 2), (((4, 9), 36), 2), (((8, 2), 16), 2), (((6, 3), 18), 2), (((4, 4), 16), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((4, 1), 4), 6), (((7, 1), 7), 4), (((3, 1), 3), 4), (((9, 4), 3), 4), (((6, 1), 6), 3), (((7, 2), 4), 3), (((5, 2), 3), 3), (((8, 1), 8), 3), (((5, 1), 5), 3), (((9, 2), 5), 3)]
Update grammar with invented programs and set frontiers to none.
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.88
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.93
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.76
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.89
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 75.16 (abduce 84.67)
Hit samples:  3965  Ave length:  5.07
Symbols:  16 [(0, 1039), (1, 1135), (2, 1150), (3, 1086), (4, 1047), (5, 1000), (6, 1026), (7, 1088), (8, 967), (9, 986), (10, 1810), (11, 1980), (12, 1235), (13, 1534), (14, 1965), (15, 1053)]
Head:  [((-1,), 1000), ((1, -1, 1), 982), ((1, 3, 1, -1, 3), 287), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 305), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 87)]
Learn perception with 3965 samples for 100 iterations, 0.9361723297348391, 3 epochs, take 25 sec.
Epoch time: 10m 53s
------------------------------
Epoch 41/99 (max_len=11, data=4683)
Train acc: 77.69 (abduce 98.68)
Hit samples:  4621  Ave length:  5.29
Symbols:  16 [(0, 1127), (1, 1292), (2, 1335), (3, 1318), (4, 1306), (5, 1230), (6, 1276), (7, 1338), (8, 1222), (9, 1236), (10, 2124), (11, 2154), (12, 1888), (13, 1887), (14, 2455), (15, 1257)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 367), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 144), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 110), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 102)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 4), 16), 4), (((3, 8), 24), 3), (((5, 4), 20), 3), (((3, 4), 12), 3), (((4, 7), 28), 3), (((7, 4), 28), 3), (((7, 7), 49), 3), (((3, 5), 15), 2), (((4, 5), 20), 2), (((6, 9), 54), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 4), 3), 5), (((6, 1), 6), 5), (((3, 1), 3), 4), (((4, 1), 4), 4), (((9, 2), 5), 3), (((3, 2), 3), 3), (((5, 1), 5), 3), (((8, 1), 8), 3), (((6, 5), 1), 3), (((3, 2), 1), 2)]
Update grammar with invented programs and set frontiers to none.
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.90
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.93
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.78
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.90
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 77.69 (abduce 84.88)
Hit samples:  3975  Ave length:  5.08
Symbols:  16 [(0, 1049), (1, 1142), (2, 1156), (3, 1089), (4, 1050), (5, 1006), (6, 1022), (7, 1090), (8, 971), (9, 988), (10, 1806), (11, 1994), (12, 1238), (13, 1550), (14, 1996), (15, 1048)]
Head:  [((-1,), 1000), ((1, -1, 1), 982), ((1, 3, 1, -1, 3), 287), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 98), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 3975 samples for 100 iterations, 0.9345382520425848, 3 epochs, take 25 sec.
Epoch time: 10m 53s
------------------------------
Epoch 42/99 (max_len=11, data=4683)
Train acc: 79.11 (abduce 98.87)
Hit samples:  4630  Ave length:  5.3
Symbols:  16 [(0, 1137), (1, 1294), (2, 1379), (3, 1315), (4, 1300), (5, 1224), (6, 1270), (7, 1333), (8, 1220), (9, 1241), (10, 2143), (11, 2157), (12, 1886), (13, 1895), (14, 2459), (15, 1269)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 137), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 143), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 110), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 102)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 7), 56), 4), (((6, 6), 36), 4), (((2, 9), 18), 3), (((2, 6), 12), 2), (((6, 5), 30), 2), (((5, 8), 40), 2), (((5, 3), 15), 2), (((6, 2), 12), 2), (((6, 9), 54), 2), (((4, 3), 12), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((4, 1), 4), 6), (((5, 2), 3), 5), (((5, 1), 5), 4), (((9, 4), 3), 4), (((9, 2), 5), 4), (((9, 3), 3), 4), (((7, 1), 7), 3), (((8, 3), 3), 3), (((7, 3), 3), 3), (((8, 1), 8), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.91
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.79
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.90
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 79.11 (abduce 84.99)
Hit samples:  3980  Ave length:  5.08
Symbols:  16 [(0, 1050), (1, 1144), (2, 1162), (3, 1089), (4, 1051), (5, 1006), (6, 1023), (7, 1095), (8, 972), (9, 991), (10, 1813), (11, 1993), (12, 1244), (13, 1553), (14, 1998), (15, 1054)]
Head:  [((-1,), 1000), ((1, -1, 1), 982), ((1, 3, 1, -1, 3), 287), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 308), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, -1, 5, 3, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 98), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 3980 samples for 100 iterations, 0.9339361596995751, 3 epochs, take 25 sec.
Epoch time: 5m 58s
------------------------------
Epoch 43/99 (max_len=11, data=4683)
Train acc: 79.58 (abduce 98.93)
Hit samples:  4633  Ave length:  5.3
Symbols:  16 [(0, 1144), (1, 1293), (2, 1358), (3, 1320), (4, 1294), (5, 1238), (6, 1274), (7, 1334), (8, 1220), (9, 1249), (10, 2163), (11, 2151), (12, 1855), (13, 1922), (14, 2452), (15, 1284)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 136), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 142), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 111), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 103)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 8), 48), 3), (((7, 5), 35), 3), (((4, 4), 16), 3), (((3, 8), 24), 3), (((8, 7), 56), 3), (((0, 1), 0), 2), (((5, 4), 20), 2), (((2, 8), 16), 2), (((5, 9), 45), 2), (((5, 2), 10), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 6), (((6, 1), 6), 4), (((7, 3), 3), 4), (((4, 1), 4), 4), (((7, 1), 7), 3), (((3, 2), 3), 3), (((9, 2), 5), 3), (((3, 1), 3), 3), (((9, 3), 3), 3), (((9, 4), 3), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.91
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.79
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.89
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 79.58 (abduce 85.05)
Hit samples:  3983  Ave length:  5.09
Symbols:  16 [(0, 1051), (1, 1144), (2, 1164), (3, 1090), (4, 1051), (5, 1010), (6, 1026), (7, 1095), (8, 975), (9, 992), (10, 1819), (11, 1996), (12, 1241), (13, 1559), (14, 1995), (15, 1059)]
Head:  [((-1,), 1000), ((1, -1, 1), 982), ((1, 3, 1, -1, 3), 288), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 3983 samples for 100 iterations, 0.9336359599348695, 3 epochs, take 25 sec.
Epoch time: 5m 58s
------------------------------
Epoch 44/99 (max_len=11, data=4683)
Train acc: 79.85 (abduce 99.06)
Hit samples:  4639  Ave length:  5.3
Symbols:  16 [(0, 1142), (1, 1298), (2, 1372), (3, 1329), (4, 1295), (5, 1230), (6, 1271), (7, 1336), (8, 1230), (9, 1245), (10, 2167), (11, 2154), (12, 1873), (13, 1913), (14, 2452), (15, 1300)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 137), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 144), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 111), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 103)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 2), 12), 3), (((5, 2), 10), 3), (((4, 5), 20), 3), (((6, 8), 48), 2), (((2, 8), 16), 2), (((8, 5), 40), 2), (((3, 9), 27), 2), (((3, 6), 18), 2), (((5, 6), 30), 2), (((7, 5), 35), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((6, 1), 6), 6), (((9, 4), 3), 6), (((9, 1), 9), 5), (((4, 1), 4), 4), (((5, 1), 5), 3), (((7, 1), 7), 3), (((5, 2), 3), 3), (((9, 2), 5), 3), (((7, 2), 4), 2), (((8, 1), 8), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.79
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.89
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 79.85 (abduce 85.05)
Hit samples:  3983  Ave length:  5.09
Symbols:  16 [(0, 1050), (1, 1144), (2, 1165), (3, 1091), (4, 1050), (5, 1009), (6, 1023), (7, 1093), (8, 976), (9, 994), (10, 1821), (11, 1994), (12, 1239), (13, 1558), (14, 1993), (15, 1059)]
Head:  [((-1,), 1000), ((1, -1, 1), 983), ((1, 3, 1, -1, 3), 288), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 3983 samples for 100 iterations, 0.9333629498000888, 3 epochs, take 25 sec.
Epoch time: 5m 59s
------------------------------
Epoch 45/99 (max_len=11, data=4683)
Train acc: 80.02 (abduce 99.06)
Hit samples:  4639  Ave length:  5.31
Symbols:  16 [(0, 1147), (1, 1299), (2, 1378), (3, 1329), (4, 1293), (5, 1237), (6, 1268), (7, 1330), (8, 1223), (9, 1248), (10, 2174), (11, 2156), (12, 1867), (13, 1916), (14, 2462), (15, 1294)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 144), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 111), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 103)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 7), 56), 3), (((2, 8), 16), 3), (((5, 8), 40), 3), (((4, 7), 28), 3), (((0, 1), 0), 2), (((3, 8), 24), 2), (((9, 9), 81), 2), (((8, 9), 72), 2), (((4, 12), 48), 2), (((7, 7), 49), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((4, 1), 4), 5), (((6, 1), 6), 5), (((9, 1), 9), 4), (((8, 3), 3), 3), (((6, 2), 3), 3), (((5, 2), 3), 3), (((9, 4), 3), 3), (((7, 1), 7), 3), (((8, 1), 8), 3), (((9, 3), 3), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.79
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.90
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 80.02 (abduce 85.05)
Hit samples:  3983  Ave length:  5.09
Symbols:  16 [(0, 1052), (1, 1143), (2, 1166), (3, 1092), (4, 1050), (5, 1012), (6, 1023), (7, 1092), (8, 973), (9, 993), (10, 1823), (11, 1995), (12, 1238), (13, 1557), (14, 1993), (15, 1059)]
Head:  [((-1,), 1000), ((1, -1, 1), 983), ((1, 3, 1, -1, 3), 288), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 112), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 98), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 3983 samples for 100 iterations, 0.9332708158531168, 3 epochs, take 25 sec.
Epoch time: 5m 58s
------------------------------
Epoch 46/99 (max_len=11, data=4683)
Train acc: 80.09 (abduce 99.10)
Hit samples:  4641  Ave length:  5.31
Symbols:  16 [(0, 1146), (1, 1296), (2, 1367), (3, 1327), (4, 1296), (5, 1237), (6, 1265), (7, 1345), (8, 1229), (9, 1251), (10, 2163), (11, 2157), (12, 1888), (13, 1910), (14, 2464), (15, 1296)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 111), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 103)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 5), 40), 3), (((4, 3), 12), 2), (((5, 3), 15), 2), (((9, 7), 63), 2), (((7, 7), 49), 2), (((9, 4), 72), 2), (((8, 7), 56), 2), (((4, 4), 16), 2), (((9, 4), 36), 2), (((3, 8), 24), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 6), (((8, 1), 8), 5), (((5, 2), 3), 5), (((6, 2), 3), 4), (((4, 1), 4), 4), (((7, 1), 7), 4), (((3, 1), 3), 4), (((3, 2), 1), 3), (((7, 3), 3), 3), (((6, 1), 6), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.79
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.90
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 80.09 (abduce 85.10)
Hit samples:  3985  Ave length:  5.09
Symbols:  16 [(0, 1052), (1, 1144), (2, 1166), (3, 1093), (4, 1050), (5, 1013), (6, 1021), (7, 1093), (8, 977), (9, 995), (10, 1822), (11, 1996), (12, 1242), (13, 1559), (14, 1995), (15, 1061)]
Head:  [((-1,), 1000), ((1, -1, 1), 983), ((1, 3, 1, -1, 3), 288), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 3985 samples for 100 iterations, 0.9333793579565067, 3 epochs, take 25 sec.
Epoch time: 5m 58s
------------------------------
Epoch 47/99 (max_len=11, data=4683)
Train acc: 80.09 (abduce 99.15)
Hit samples:  4643  Ave length:  5.31
Symbols:  16 [(0, 1137), (1, 1295), (2, 1358), (3, 1331), (4, 1292), (5, 1241), (6, 1276), (7, 1343), (8, 1232), (9, 1260), (10, 2168), (11, 2157), (12, 1874), (13, 1923), (14, 2461), (15, 1295)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 137), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 144), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 103)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((7, 5), 35), 4), (((6, 3), 18), 3), (((7, 7), 49), 3), (((6, 6), 36), 3), (((9, 4), 36), 3), (((7, 8), 56), 2), (((4, 7), 28), 2), (((0, 1), 0), 2), (((8, 0), 0), 2), (((9, 7), 63), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((4, 1), 4), 6), (((6, 1), 6), 5), (((7, 2), 4), 4), (((3, 1), 3), 4), (((9, 2), 5), 3), (((3, 2), 1), 3), (((9, 4), 3), 3), (((7, 1), 7), 3), (((9, 3), 3), 3), (((5, 2), 3), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.79
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.90
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 80.09 (abduce 85.10)
Hit samples:  3985  Ave length:  5.09
Symbols:  16 [(0, 1053), (1, 1145), (2, 1163), (3, 1093), (4, 1047), (5, 1014), (6, 1023), (7, 1095), (8, 977), (9, 997), (10, 1822), (11, 1998), (12, 1240), (13, 1562), (14, 1996), (15, 1062)]
Head:  [((-1,), 1000), ((1, -1, 1), 982), ((1, 3, 1, -1, 3), 288), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 3985 samples for 100 iterations, 0.9336027998225465, 3 epochs, take 25 sec.
Epoch time: 6m 1s
------------------------------
Epoch 48/99 (max_len=11, data=4683)
Train acc: 80.21 (abduce 99.08)
Hit samples:  4640  Ave length:  5.31
Symbols:  16 [(0, 1144), (1, 1295), (2, 1370), (3, 1327), (4, 1292), (5, 1241), (6, 1267), (7, 1337), (8, 1222), (9, 1259), (10, 2163), (11, 2160), (12, 1885), (13, 1906), (14, 2460), (15, 1290)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 136), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 144), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 103)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((3, 9), 27), 3), (((6, 5), 30), 3), (((8, 6), 48), 3), (((0, 1), 0), 3), (((3, 8), 24), 2), (((6, 4), 24), 2), (((6, 3), 18), 2), (((9, 4), 36), 2), (((8, 7), 56), 2), (((2, 6), 12), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((5, 1), 5), 4), (((3, 2), 1), 3), (((8, 3), 3), 3), (((9, 1), 9), 3), (((7, 2), 4), 3), (((4, 1), 4), 3), (((5, 2), 3), 2), (((9, 4), 3), 2), (((9, 3), 3), 2), (((8, 1), 8), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.79
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.90
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 80.21 (abduce 85.10)
Hit samples:  3985  Ave length:  5.09
Symbols:  16 [(0, 1052), (1, 1145), (2, 1165), (3, 1093), (4, 1046), (5, 1015), (6, 1021), (7, 1096), (8, 975), (9, 999), (10, 1822), (11, 1998), (12, 1244), (13, 1558), (14, 1996), (15, 1062)]
Head:  [((-1,), 1000), ((1, -1, 1), 982), ((1, 3, 1, -1, 3), 288), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 3985 samples for 100 iterations, 0.933454921871149, 3 epochs, take 25 sec.
Epoch time: 6m 1s
------------------------------
Epoch 49/99 (max_len=11, data=4683)
Train acc: 80.17 (abduce 99.15)
Hit samples:  4643  Ave length:  5.31
Symbols:  16 [(0, 1137), (1, 1297), (2, 1361), (3, 1329), (4, 1290), (5, 1241), (6, 1274), (7, 1345), (8, 1233), (9, 1256), (10, 2166), (11, 2156), (12, 1890), (13, 1908), (14, 2464), (15, 1292)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 137), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 144), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 103)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 7), 28), 4), (((8, 6), 48), 3), (((6, 6), 36), 3), (((2, 6), 12), 2), (((6, 4), 24), 2), (((6, 2), 12), 2), (((7, 8), 56), 2), (((5, 1), 15), 2), (((7, 5), 35), 2), (((2, 8), 16), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((4, 1), 4), 6), (((9, 4), 3), 4), (((9, 1), 9), 4), (((8, 1), 8), 4), (((7, 2), 4), 4), (((6, 1), 6), 4), (((5, 1), 5), 3), (((6, 2), 3), 3), (((8, 3), 3), 3), (((3, 2), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.79
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.90
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 80.17 (abduce 85.10)
Hit samples:  3985  Ave length:  5.09
Symbols:  16 [(0, 1052), (1, 1145), (2, 1164), (3, 1093), (4, 1046), (5, 1015), (6, 1022), (7, 1096), (8, 976), (9, 998), (10, 1822), (11, 1998), (12, 1244), (13, 1558), (14, 1996), (15, 1062)]
Head:  [((-1,), 1000), ((1, -1, 1), 982), ((1, 3, 1, -1, 3), 288), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 3985 samples for 100 iterations, 0.9335535071720806, 3 epochs, take 25 sec.
Percentage of None result: 25.94
              precision    recall  f1-score   support

           0       0.97      1.00      0.98      4016
           1       0.85      0.94      0.89      5142
           2       0.99      0.97      0.98      5321
           3       0.97      0.98      0.98      5241
           4       0.95      1.00      0.97      5279
           5       1.00      0.98      0.99      5383
           6       1.00      0.97      0.99      5427
           7       0.98      0.97      0.98      5462
           8       0.99      0.97      0.98      5453
           9       0.99      0.97      0.98      5476
           +       0.99      0.99      0.99     13199
           -       0.99      1.00      0.99     10734
           *       1.00      1.00      1.00     13491
           /       1.00      1.00      1.00      9876
           (       0.75      0.95      0.84     21081
           )       0.99      0.69      0.81     21081

    accuracy                           0.94    141662
   macro avg       0.96      0.96      0.96    141662
weighted avg       0.95      0.94      0.94    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (     )
0  283    0    0    0    0    0    0    0    0    0    0    0    0    0     0     0
1    0  340    1    0    1    0    0    1    0    0    1    0    0    0    12     5
2    2    1  365    0    0    0    0    0    2    1    0    0    1    0     1     0
3    0    0    3  363    0    0    0    0    0    2    0    0    0    0     0     0
4    0    0    0    0  372    0    0    0    0    0    0    0    0    0     0     0
5    7    0    0    0    0  372    0    0    0    0    0    0    0    0     0     0
6    0    0    0    0    9    0  373    0    0    0    0    0    0    0     0     0
7    0    0    0    0    0    0    0  375    0    0   10    0    0    0     0     0
8    0    0    0   10    0    0    0    0  374    0    0    0    0    0     0     0
9    0    0    0    0   10    0    0    0    0  376    0    0    0    0     0     0
+    0    0    0    0    0    0    0    0    0    0  924    3    0    0     0     3
-    0    0    0    0    0    0    0    0    0    0    2  755    0    0     0     0
*    0    0    0    0    0    0    0    0    0    0    0    0  952    0     0     0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  697     0     0
(    0   52    0    0    0    0    0    7    0    0    0    7    0    0  1420     0
)    0    7    0    0    0    0    0    0    0    0    0    0    0    0   458  1022
result accuracy by length:
1 ( 2%) 98.00
3 ( 2%) 76.00
5 ( 2%) 48.06
7 ( 4%) 36.68
9 ( 4%) 38.69
11 ( 3%) 33.52
13 ( 4%) 37.04
15 ( 4%) 32.67
17 ( 4%) 30.58
19 ( 4%) 27.45
21 ( 4%) 29.80
23 ( 4%) 25.37
25 ( 4%) 23.50
27 ( 4%) 25.62
29 ( 3%) 21.99
31 ( 3%) 19.64
33 ( 2%) 18.57
35 ( 2%) 14.38
37 ( 2%) 22.22
39 ( 3%) 17.76
41 ( 3%) 18.79
43 ( 2%) 15.22
45 ( 2%) 19.64
47 ( 2%) 16.67
49 ( 2%) 17.61
51 ( 2%) 17.42
53 ( 2%) 16.42
55 ( 2%) 10.92
57 ( 2%) 16.08
59 ( 2%) 16.82
61 ( 1%) 12.50
63 ( 0%)  8.57
65 ( 0%) 22.22
67 ( 0%) 33.33
result accuracy by symbol:
( (91%) 23.76
) (91%) 23.76
* (87%) 19.90
+ (84%) 24.00
- (77%) 26.35
/ (76%) 25.22
0 (52%) 25.51
1 (60%) 24.10
2 (61%) 22.86
3 (62%) 23.51
4 (61%) 22.49
5 (62%) 22.69
6 (62%) 22.12
7 (63%) 21.96
8 (64%) 21.94
9 (63%) 22.03
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 90.00
2 ( 0%) 100.00
3 ( 0%) 100.00
4 ( 0%) 100.00
5 ( 0%) 90.00
6 ( 0%) 100.00
7 ( 0%) 100.00
8 ( 0%) 100.00
9 ( 0%) 100.00
result accuracy by result:
0 (21%) 48.86
1 (10%) 52.06
2 ( 4%) 50.51
3 ( 2%) 38.52
4 ( 2%) 33.08
5 ( 2%) 47.00
6 ( 2%) 45.22
7 ( 2%) 40.71
8 ( 2%) 27.35
9 ( 1%) 54.65
result accuracy by generalization:
1 (22.45%) 51.27
2 (22.96%) 40.80
3 (22.53%)  5.07
4 (15.82%) 23.74
5 (16.24%)  9.30
error cases:
1 ( [-1] [-1] 1 None
5 0 [-1] [-1] 5 0
5*9 5*9 [1, -1, 1] [1, -1, 1] 45 5
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 4
6*4 6*4 [1, -1, 1] [1, -1, 1] 24 6
9*0 9*0 [1, -1, 1] [1, -1, 1] 0 9
3*5 3*5 [1, -1, 1] [1, -1, 1] 15 3
5*5 5*5 [1, -1, 1] [1, -1, 1] 25 5
2*4 2*4 [1, -1, 1] [1, -1, 1] 8 4
5*3 5*3 [1, -1, 1] [1, -1, 1] 15 5
7*9 7*9 [1, -1, 1] [1, -1, 1] 63 7
7/2 7/2 [1, -1, 1] [1, -1, 1] 4 2
3*2 3*2 [1, -1, 1] [1, -1, 1] 6 3
8/3 8/3 [1, -1, 1] [1, -1, 1] 3 2
3*3 3*3 [1, -1, 1] [1, -1, 1] 9 3
6*3 6*3 [1, -1, 1] [1, -1, 1] 18 6
8*2 8*2 [1, -1, 1] [1, -1, 1] 16 8
7/3 7/3 [1, -1, 1] [1, -1, 1] 3 2
7*7 7*7 [1, -1, 1] [1, -1, 1] 49 7
7+5 ++5 [1, -1, 1] [1, -1, 1] 12 None
val (Perception Acc=93.70, Head Acc=100.00, Result Acc=27.29)
Epoch time: 6m 23s
------------------------------
Epoch 50/99 (max_len=11, data=4683)
Train acc: 80.32 (abduce 99.08)
Hit samples:  4640  Ave length:  5.31
Symbols:  16 [(0, 1141), (1, 1302), (2, 1401), (3, 1328), (4, 1290), (5, 1239), (6, 1270), (7, 1340), (8, 1209), (9, 1238), (10, 2164), (11, 2157), (12, 1882), (13, 1915), (14, 2461), (15, 1289)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 136), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((3, 8), 24), 4), (((3, 9), 27), 3), (((7, 7), 49), 3), (((9, 4), 36), 3), (((7, 8), 56), 3), (((8, 7), 56), 2), (((8, 4), 32), 2), (((5, 8), 40), 2), (((9, 8), 72), 2), (((3, 7), 21), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 2), 5), 5), (((3, 1), 3), 4), (((4, 1), 4), 4), (((8, 1), 8), 4), (((9, 1), 9), 4), (((5, 1), 5), 4), (((9, 3), 3), 4), (((8, 3), 3), 3), (((9, 4), 3), 3), (((7, 2), 4), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.79
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.90
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 80.32 (abduce 85.07)
Hit samples:  3984  Ave length:  5.09
Symbols:  16 [(0, 1052), (1, 1144), (2, 1170), (3, 1093), (4, 1046), (5, 1015), (6, 1022), (7, 1095), (8, 972), (9, 994), (10, 1822), (11, 1997), (12, 1242), (13, 1558), (14, 1995), (15, 1061)]
Head:  [((-1,), 1000), ((1, -1, 1), 982), ((1, 3, 1, -1, 3), 288), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 98), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 3984 samples for 100 iterations, 0.9331788144787454, 3 epochs, take 25 sec.
Epoch time: 5m 59s
------------------------------
Epoch 51/99 (max_len=11, data=4683)
Train acc: 80.32 (abduce 99.12)
Hit samples:  4642  Ave length:  5.31
Symbols:  16 [(0, 1144), (1, 1301), (2, 1389), (3, 1329), (4, 1293), (5, 1247), (6, 1268), (7, 1329), (8, 1215), (9, 1247), (10, 2162), (11, 2161), (12, 1890), (13, 1907), (14, 2464), (15, 1288)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 136), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 144), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((2, 8), 16), 4), (((9, 9), 81), 3), (((7, 7), 49), 3), (((8, 7), 56), 3), (((6, 8), 48), 3), (((6, 0), 0), 2), (((6, 7), 42), 2), (((3, 5), 15), 2), (((10, 4), 40), 2), (((7, 6), 42), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((4, 1), 4), 6), (((9, 1), 9), 5), (((9, 4), 3), 4), (((8, 1), 8), 4), (((3, 1), 3), 3), (((3, 2), 3), 3), (((8, 3), 3), 3), (((7, 3), 3), 2), (((6, 2), 3), 2), (((9, 2), 5), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.79
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.90
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 80.32 (abduce 85.10)
Hit samples:  3985  Ave length:  5.09
Symbols:  16 [(0, 1052), (1, 1145), (2, 1169), (3, 1093), (4, 1046), (5, 1015), (6, 1022), (7, 1096), (8, 974), (9, 995), (10, 1822), (11, 1998), (12, 1244), (13, 1558), (14, 1996), (15, 1062)]
Head:  [((-1,), 1000), ((1, -1, 1), 982), ((1, 3, 1, -1, 3), 288), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 3985 samples for 100 iterations, 0.9333070439197516, 3 epochs, take 25 sec.
Epoch time: 5m 59s
------------------------------
Epoch 52/99 (max_len=11, data=4683)
Train acc: 80.28 (abduce 99.08)
Hit samples:  4640  Ave length:  5.31
Symbols:  16 [(0, 1148), (1, 1297), (2, 1384), (3, 1329), (4, 1291), (5, 1236), (6, 1258), (7, 1334), (8, 1232), (9, 1244), (10, 2192), (11, 2155), (12, 1859), (13, 1907), (14, 2458), (15, 1292)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 136), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 103)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 5), 40), 4), (((7, 8), 56), 3), (((8, 6), 48), 3), (((9, 4), 72), 2), (((9, 8), 72), 2), (((4, 5), 20), 2), (((5, 3), 15), 2), (((3, 5), 15), 2), (((4, 8), 32), 2), (((2, 7), 14), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((4, 1), 4), 7), (((9, 1), 9), 6), (((5, 2), 3), 4), (((6, 1), 6), 4), (((9, 3), 3), 3), (((7, 1), 7), 3), (((6, 5), 1), 3), (((3, 2), 3), 3), (((9, 4), 3), 3), (((3, 2), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.91
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.79
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.90
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 80.28 (abduce 85.12)
Hit samples:  3986  Ave length:  5.09
Symbols:  16 [(0, 1052), (1, 1145), (2, 1170), (3, 1093), (4, 1046), (5, 1014), (6, 1021), (7, 1096), (8, 978), (9, 994), (10, 1827), (11, 1998), (12, 1240), (13, 1558), (14, 1996), (15, 1062)]
Head:  [((-1,), 1000), ((1, -1, 1), 983), ((1, 3, 1, -1, 3), 288), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 3986 samples for 100 iterations, 0.9330211927057663, 3 epochs, take 25 sec.
Epoch time: 5m 59s
------------------------------
Epoch 53/99 (max_len=11, data=4683)
Train acc: 80.34 (abduce 99.10)
Hit samples:  4641  Ave length:  5.31
Symbols:  16 [(0, 1149), (1, 1295), (2, 1374), (3, 1330), (4, 1290), (5, 1240), (6, 1270), (7, 1343), (8, 1229), (9, 1238), (10, 2193), (11, 2156), (12, 1860), (13, 1908), (14, 2461), (15, 1289)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 372), ((2, 2, 5, 2, 2, -1, 5), 136), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 0), 0), 3), (((0, 1), 0), 3), (((5, 2), 10), 3), (((4, 4), 16), 2), (((6, 7), 42), 2), (((6, 6), 36), 2), (((4, 8), 32), 2), (((7, 5), 35), 2), (((7, 7), 49), 2), (((7, 4), 28), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((4, 1), 4), 7), (((8, 1), 8), 4), (((9, 4), 3), 4), (((3, 1), 3), 3), (((9, 3), 3), 3), (((3, 2), 1), 3), (((7, 1), 7), 3), (((9, 1), 9), 3), (((5, 1), 5), 3), (((7, 3), 3), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.79
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.90
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 80.34 (abduce 85.12)
Hit samples:  3986  Ave length:  5.09
Symbols:  16 [(0, 1052), (1, 1145), (2, 1171), (3, 1093), (4, 1046), (5, 1014), (6, 1022), (7, 1096), (8, 978), (9, 992), (10, 1827), (11, 1998), (12, 1240), (13, 1558), (14, 1996), (15, 1062)]
Head:  [((-1,), 1000), ((1, -1, 1), 983), ((1, 3, 1, -1, 3), 288), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 3986 samples for 100 iterations, 0.9329226219812715, 3 epochs, take 25 sec.
Epoch time: 5m 58s
------------------------------
Epoch 54/99 (max_len=11, data=4683)
Train acc: 80.28 (abduce 99.10)
Hit samples:  4641  Ave length:  5.31
Symbols:  16 [(0, 1145), (1, 1303), (2, 1369), (3, 1330), (4, 1287), (5, 1242), (6, 1279), (7, 1343), (8, 1221), (9, 1242), (10, 2189), (11, 2159), (12, 1871), (13, 1901), (14, 2460), (15, 1292)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 137), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 103)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 7), 28), 3), (((7, 6), 42), 3), (((8, 7), 56), 2), (((1, 5), 15), 2), (((6, 5), 30), 2), (((5, 5), 25), 2), (((4, 3), 12), 2), (((6, 6), 36), 2), (((2, 8), 16), 2), (((3, 8), 24), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((4, 1), 4), 6), (((8, 1), 8), 4), (((9, 4), 3), 3), (((6, 2), 3), 3), (((7, 1), 7), 3), (((6, 1), 6), 3), (((9, 2), 5), 3), (((3, 1), 3), 3), (((9, 1), 9), 3), (((6, 5), 1), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.79
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.90
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 80.28 (abduce 85.12)
Hit samples:  3986  Ave length:  5.09
Symbols:  16 [(0, 1053), (1, 1145), (2, 1167), (3, 1093), (4, 1046), (5, 1015), (6, 1024), (7, 1096), (8, 976), (9, 994), (10, 1826), (11, 1998), (12, 1243), (13, 1556), (14, 1996), (15, 1062)]
Head:  [((-1,), 1000), ((1, -1, 1), 983), ((1, 3, 1, -1, 3), 288), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 3986 samples for 100 iterations, 0.932971907343519, 3 epochs, take 25 sec.
Epoch time: 5m 58s
------------------------------
Epoch 55/99 (max_len=11, data=4683)
Train acc: 80.36 (abduce 99.06)
Hit samples:  4639  Ave length:  5.3
Symbols:  16 [(0, 1142), (1, 1299), (2, 1368), (3, 1330), (4, 1288), (5, 1237), (6, 1279), (7, 1343), (8, 1216), (9, 1247), (10, 2172), (11, 2155), (12, 1877), (13, 1906), (14, 2458), (15, 1290)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 144), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 103)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((7, 8), 56), 5), (((8, 7), 56), 4), (((7, 6), 42), 3), (((7, 5), 35), 3), (((5, 2), 10), 3), (((8, 4), 32), 3), (((0, 1), 0), 3), (((3, 6), 18), 3), (((5, 6), 30), 2), (((3, 7), 21), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 4), (((7, 3), 3), 4), (((6, 1), 6), 4), (((4, 1), 4), 4), (((8, 1), 8), 3), (((8, 3), 3), 3), (((9, 3), 3), 3), (((5, 2), 3), 2), (((5, 1), 5), 2), (((8, 1), 16), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.79
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.90
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 80.36 (abduce 85.12)
Hit samples:  3986  Ave length:  5.09
Symbols:  16 [(0, 1053), (1, 1145), (2, 1167), (3, 1093), (4, 1046), (5, 1015), (6, 1024), (7, 1096), (8, 975), (9, 995), (10, 1825), (11, 1998), (12, 1240), (13, 1560), (14, 1996), (15, 1062)]
Head:  [((-1,), 1000), ((1, -1, 1), 983), ((1, 3, 1, -1, 3), 288), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 3986 samples for 100 iterations, 0.9330704780680138, 3 epochs, take 25 sec.
Epoch time: 5m 59s
------------------------------
Epoch 56/99 (max_len=11, data=4683)
Train acc: 80.36 (abduce 99.15)
Hit samples:  4643  Ave length:  5.31
Symbols:  16 [(0, 1151), (1, 1301), (2, 1378), (3, 1329), (4, 1292), (5, 1240), (6, 1266), (7, 1341), (8, 1217), (9, 1248), (10, 2176), (11, 2157), (12, 1880), (13, 1907), (14, 2462), (15, 1290)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 372), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 2), 12), 4), (((4, 5), 20), 3), (((4, 7), 28), 2), (((5, 5), 25), 2), (((9, 8), 72), 2), (((6, 4), 24), 2), (((0, 1), 0), 2), (((2, 7), 14), 2), (((8, 7), 56), 2), (((6, 3), 18), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 6), (((4, 1), 4), 5), (((9, 3), 3), 3), (((6, 2), 3), 3), (((3, 1), 3), 3), (((5, 2), 3), 3), (((9, 2), 5), 3), (((8, 3), 3), 3), (((8, 2), 4), 2), (((6, 5), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.79
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.90
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 80.36 (abduce 85.12)
Hit samples:  3986  Ave length:  5.09
Symbols:  16 [(0, 1053), (1, 1145), (2, 1168), (3, 1093), (4, 1046), (5, 1015), (6, 1022), (7, 1096), (8, 975), (9, 996), (10, 1825), (11, 1998), (12, 1242), (13, 1558), (14, 1996), (15, 1062)]
Head:  [((-1,), 1000), ((1, -1, 1), 983), ((1, 3, 1, -1, 3), 288), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 3986 samples for 100 iterations, 0.9330704780680138, 3 epochs, take 25 sec.
Epoch time: 6m 1s
------------------------------
Epoch 57/99 (max_len=11, data=4683)
Train acc: 80.36 (abduce 99.10)
Hit samples:  4641  Ave length:  5.31
Symbols:  16 [(0, 1140), (1, 1298), (2, 1384), (3, 1330), (4, 1289), (5, 1244), (6, 1274), (7, 1341), (8, 1216), (9, 1242), (10, 2174), (11, 2158), (12, 1875), (13, 1910), (14, 2461), (15, 1289)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 372), ((2, 2, 5, 2, 2, -1, 5), 136), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 103)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 6), 36), 4), (((6, 0), 0), 3), (((6, 4), 24), 3), (((7, 4), 28), 3), (((4, 5), 20), 3), (((4, 4), 16), 3), (((8, 5), 40), 2), (((8, 1), 0), 2), (((8, 7), 56), 2), (((2, 9), 18), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 5), (((8, 1), 8), 5), (((3, 1), 3), 4), (((7, 1), 7), 3), (((3, 2), 3), 3), (((6, 2), 3), 3), (((5, 2), 3), 3), (((9, 4), 3), 3), (((6, 1), 6), 3), (((4, 1), 4), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.79
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.90
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 80.36 (abduce 85.12)
Hit samples:  3986  Ave length:  5.09
Symbols:  16 [(0, 1053), (1, 1145), (2, 1169), (3, 1093), (4, 1046), (5, 1015), (6, 1023), (7, 1096), (8, 975), (9, 994), (10, 1825), (11, 1998), (12, 1241), (13, 1559), (14, 1996), (15, 1062)]
Head:  [((-1,), 1000), ((1, -1, 1), 983), ((1, 3, 1, -1, 3), 288), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 3986 samples for 100 iterations, 0.932971907343519, 3 epochs, take 25 sec.
Epoch time: 5m 60s
------------------------------
Epoch 58/99 (max_len=11, data=4683)
Train acc: 80.45 (abduce 99.08)
Hit samples:  4640  Ave length:  5.3
Symbols:  16 [(0, 1138), (1, 1296), (2, 1385), (3, 1331), (4, 1291), (5, 1242), (6, 1276), (7, 1352), (8, 1202), (9, 1240), (10, 2178), (11, 2156), (12, 1872), (13, 1907), (14, 2458), (15, 1290)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 137), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 103)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 7), 56), 4), (((7, 4), 28), 3), (((9, 4), 36), 3), (((4, 5), 20), 3), (((5, 6), 30), 3), (((9, 7), 63), 3), (((7, 8), 56), 3), (((9, 6), 54), 2), (((5, 4), 20), 2), (((6, 8), 48), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 5), (((6, 1), 6), 5), (((9, 4), 3), 5), (((4, 1), 4), 4), (((6, 2), 3), 4), (((8, 3), 3), 3), (((7, 3), 3), 3), (((7, 1), 7), 3), (((5, 2), 3), 3), (((7, 2), 4), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.79
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.90
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 80.45 (abduce 85.12)
Hit samples:  3986  Ave length:  5.09
Symbols:  16 [(0, 1053), (1, 1145), (2, 1169), (3, 1093), (4, 1046), (5, 1015), (6, 1024), (7, 1096), (8, 973), (9, 995), (10, 1826), (11, 1998), (12, 1241), (13, 1558), (14, 1996), (15, 1062)]
Head:  [((-1,), 1000), ((1, -1, 1), 983), ((1, 3, 1, -1, 3), 288), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 3986 samples for 100 iterations, 0.9329226219812715, 3 epochs, take 25 sec.
Epoch time: 6m 2s
------------------------------
Epoch 59/99 (max_len=11, data=4683)
Train acc: 80.41 (abduce 99.08)
Hit samples:  4640  Ave length:  5.31
Symbols:  16 [(0, 1143), (1, 1297), (2, 1389), (3, 1328), (4, 1292), (5, 1236), (6, 1280), (7, 1340), (8, 1201), (9, 1251), (10, 2183), (11, 2156), (12, 1870), (13, 1908), (14, 2460), (15, 1294)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 137), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 103)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((2, 7), 14), 3), (((9, 6), 54), 3), (((6, 0), 0), 3), (((7, 8), 56), 2), (((3, 5), 15), 2), (((7, 7), 49), 2), (((5, 2), 15), 2), (((4, 7), 28), 2), (((8, 3), 24), 2), (((4, 9), 36), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 2), 5), 5), (((6, 1), 6), 5), (((5, 2), 3), 4), (((7, 3), 3), 4), (((8, 1), 8), 4), (((3, 1), 3), 4), (((5, 1), 5), 4), (((6, 2), 3), 3), (((7, 2), 4), 3), (((7, 1), 7), 3)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.80
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.90
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 80.41 (abduce 85.12)
Hit samples:  3986  Ave length:  5.09
Symbols:  16 [(0, 1052), (1, 1145), (2, 1170), (3, 1093), (4, 1046), (5, 1014), (6, 1025), (7, 1096), (8, 973), (9, 995), (10, 1826), (11, 1998), (12, 1241), (13, 1558), (14, 1996), (15, 1062)]
Head:  [((-1,), 1000), ((1, -1, 1), 983), ((1, 3, 1, -1, 3), 288), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 3986 samples for 100 iterations, 0.932971907343519, 3 epochs, take 25 sec.
Percentage of None result: 23.57
              precision    recall  f1-score   support

           0       0.96      1.00      0.98      4016
           1       0.85      0.94      0.89      5142
           2       1.00      0.97      0.98      5321
           3       0.97      0.98      0.98      5241
           4       0.97      1.00      0.98      5279
           5       0.98      0.98      0.98      5383
           6       1.00      0.97      0.99      5427
           7       0.99      1.00      1.00      5462
           8       1.00      0.97      0.98      5453
           9       0.99      1.00      0.99      5476
           +       1.00      0.99      0.99     13199
           -       0.99      1.00      0.99     10734
           *       1.00      1.00      1.00     13491
           /       1.00      1.00      1.00      9876
           (       0.75      0.95      0.84     21081
           )       0.99      0.69      0.81     21081

    accuracy                           0.94    141662
   macro avg       0.96      0.97      0.96    141662
weighted avg       0.95      0.94      0.94    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (     )
0  283    0    0    0    0    0    0    0    0    0    0    0    0    0     0     0
1    0  342    1    0    1    0    0    1    0    0    1    0    0    0    10     5
2    2    2  363    0    1    0    0    1    1    1    0    0    1    0     1     0
3    3    0    0  363    0    0    0    0    0    2    0    0    0    0     0     0
4    0    0    0    0  372    0    0    0    0    0    0    0    0    0     0     0
5    7    0    0    0    0  372    0    0    0    0    0    0    0    0     0     0
6    0    0    0    0    9    0  373    0    0    0    0    0    0    0     0     0
7    0    0    0    0    0    0    0  385    0    0    0    0    0    0     0     0
8    0    0    0   10    0    0    0    0  374    0    0    0    0    0     0     0
9    0    0    0    0    0    0    0    0    0  386    0    0    0    0     0     0
+    0    0    0    0    0    0    0    0    0    0  924    3    0    0     0     3
-    0    0    0    0    0    0    0    0    0    0    2  755    0    0     0     0
*    0    0    0    0    0    0    0    0    0    0    0    0  952    0     0     0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  697     0     0
(    0   52    0    0    0    7    0    0    0    0    0    7    0    0  1420     0
)    0    7    0    0    0    0    0    0    0    0    0    0    0    0   458  1022
result accuracy by length:
1 ( 2%) 98.00
3 ( 2%) 77.00
5 ( 2%) 49.61
7 ( 4%) 37.12
9 ( 4%) 39.70
11 ( 3%) 34.09
13 ( 4%) 37.50
15 ( 4%) 33.17
17 ( 4%) 30.58
19 ( 4%) 28.92
21 ( 4%) 30.30
23 ( 4%) 25.85
25 ( 4%) 24.00
27 ( 4%) 26.60
29 ( 3%) 21.99
31 ( 3%) 20.24
33 ( 2%) 19.29
35 ( 2%) 15.75
37 ( 2%) 23.08
39 ( 3%) 18.42
41 ( 3%) 20.81
43 ( 2%) 15.94
45 ( 2%) 19.64
47 ( 2%) 16.67
49 ( 2%) 19.01
51 ( 2%) 19.70
53 ( 2%) 16.42
55 ( 2%) 10.92
57 ( 2%) 16.78
59 ( 2%) 17.76
61 ( 1%) 12.50
63 ( 0%)  8.57
65 ( 0%) 22.22
67 ( 0%) 33.33
result accuracy by symbol:
( (91%) 24.43
) (91%) 24.43
* (87%) 20.51
+ (84%) 24.69
- (77%) 27.11
/ (76%) 25.99
0 (52%) 26.21
1 (60%) 24.90
2 (61%) 23.55
3 (62%) 24.10
4 (61%) 23.15
5 (62%) 23.57
6 (62%) 22.84
7 (63%) 22.83
8 (64%) 22.58
9 (63%) 22.77
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 90.00
2 ( 0%) 100.00
3 ( 0%) 100.00
4 ( 0%) 100.00
5 ( 0%) 90.00
6 ( 0%) 100.00
7 ( 0%) 100.00
8 ( 0%) 100.00
9 ( 0%) 100.00
result accuracy by result:
0 (21%) 49.90
1 (10%) 52.62
2 ( 4%) 51.52
3 ( 2%) 40.74
4 ( 2%) 33.83
5 ( 2%) 48.00
6 ( 2%) 46.09
7 ( 2%) 43.36
8 ( 2%) 27.35
9 ( 1%) 54.65
result accuracy by generalization:
1 (22.45%) 52.09
2 (22.96%) 41.42
3 (22.53%)  5.62
4 (15.82%) 25.16
5 (16.24%)  9.42
error cases:
1 ( [-1] [-1] 1 None
5 0 [-1] [-1] 5 0
5*9 5*9 [1, -1, 1] [1, -1, 1] 45 5
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 4
6*4 6*4 [1, -1, 1] [1, -1, 1] 24 6
9*0 9*0 [1, -1, 1] [1, -1, 1] 0 9
3*5 3*5 [1, -1, 1] [1, -1, 1] 15 3
5*5 5*5 [1, -1, 1] [1, -1, 1] 25 5
2*4 2*4 [1, -1, 1] [1, -1, 1] 8 4
5*3 5*3 [1, -1, 1] [1, -1, 1] 15 5
7*9 7*9 [1, -1, 1] [1, -1, 1] 63 7
7/2 7/2 [1, -1, 1] [1, -1, 1] 4 2
3*2 3*2 [1, -1, 1] [1, -1, 1] 6 3
8/3 8/3 [1, -1, 1] [1, -1, 1] 3 2
3*3 3*3 [1, -1, 1] [1, -1, 1] 9 3
6*3 6*3 [1, -1, 1] [1, -1, 1] 18 6
8*2 8*2 [1, -1, 1] [1, -1, 1] 16 8
7/3 7/3 [1, -1, 1] [1, -1, 1] 3 2
7*7 7*7 [1, -1, 1] [1, -1, 1] 49 7
8*3 8*3 [1, -1, 1] [1, -1, 1] 24 8
val (Perception Acc=93.91, Head Acc=100.00, Result Acc=27.98)
Epoch time: 6m 23s
------------------------------
Epoch 60/99 (max_len=15, data=6058)
Train acc: 72.14 (abduce 96.80)
Hit samples:  5864  Ave length:  7.12
Symbols:  16 [(0, 1756), (1, 1963), (2, 2210), (3, 2093), (4, 1981), (5, 1941), (6, 1969), (7, 2051), (8, 1902), (9, 1924), (10, 3759), (11, 3660), (12, 3230), (13, 3273), (14, 5301), (15, 2749)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 370), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((0, 1), 0), 4), (((6, 0), 0), 3), (((4, 7), 28), 3), (((2, 7), 14), 2), (((4, 0), 0), 2), (((8, 6), 48), 2), (((3, 4), 12), 2), (((5, 9), 45), 2), (((2, 9), 0), 2), (((10, 2), 20), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((5, 2), 3), 5), (((8, 1), 8), 4), (((6, 1), 6), 4), (((9, 1), 9), 4), (((7, 1), 7), 4), (((9, 3), 3), 3), (((6, 2), 3), 2), (((2, 2), 2), 2), (((2, 4), 0), 2), (((8, 2), 8), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.90
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.93
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.82
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.91
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 72.14 (abduce 83.20)
Hit samples:  5040  Ave length:  6.96
Symbols:  16 [(0, 1624), (1, 1766), (2, 1850), (3, 1750), (4, 1628), (5, 1617), (6, 1621), (7, 1699), (8, 1548), (9, 1552), (10, 3155), (11, 3459), (12, 2276), (13, 2725), (14, 4475), (15, 2323)]
Head:  [((-1,), 1000), ((1, -1, 1), 983), ((1, 3, 1, -1, 3), 288), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 113), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 5040 samples for 100 iterations, 0.9270845215010836, 2 epochs, take 29 sec.
Epoch time: 6m 15s
------------------------------
Epoch 61/99 (max_len=15, data=6058)
Train acc: 73.57 (abduce 97.79)
Hit samples:  5924  Ave length:  7.2
Symbols:  16 [(0, 1770), (1, 2026), (2, 2200), (3, 2130), (4, 2027), (5, 1981), (6, 1993), (7, 2104), (8, 1944), (9, 1972), (10, 3793), (11, 3776), (12, 3282), (13, 3364), (14, 5463), (15, 2829)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 112), ((1, -1, 4, 4, 1, 4, 4), 368), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 111), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 101)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 5), 20), 3), (((2, 6), 12), 2), (((2, 7), 14), 2), (((6, 9), 54), 2), (((7, 8), 56), 2), (((4, 4), 16), 2), (((2, 8), 16), 2), (((5, 1), 0), 2), (((6, 4), 24), 2), (((1, 7), 14), 1)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((8, 1), 8), 6), (((9, 1), 9), 4), (((7, 1), 7), 4), (((4, 1), 4), 4), (((3, 1), 3), 3), (((7, 3), 3), 3), (((7, 2), 4), 3), (((6, 2), 3), 2), (((12, 5), 3), 2), (((3, 2), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.91
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.83
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.91
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 73.57 (abduce 83.43)
Hit samples:  5054  Ave length:  6.97
Symbols:  16 [(0, 1638), (1, 1778), (2, 1846), (3, 1760), (4, 1634), (5, 1628), (6, 1623), (7, 1705), (8, 1557), (9, 1559), (10, 3166), (11, 3462), (12, 2297), (13, 2749), (14, 4498), (15, 2338)]
Head:  [((-1,), 1000), ((1, -1, 1), 984), ((1, 3, 1, -1, 3), 288), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 305), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 114), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5054 samples for 100 iterations, 0.926953856632045, 2 epochs, take 29 sec.
Epoch time: 6m 13s
------------------------------
Epoch 62/99 (max_len=15, data=6058)
Train acc: 74.59 (abduce 98.37)
Hit samples:  5959  Ave length:  7.23
Symbols:  16 [(0, 1826), (1, 2061), (2, 2215), (3, 2132), (4, 2044), (5, 1984), (6, 2013), (7, 2129), (8, 1931), (9, 1985), (10, 3829), (11, 3824), (12, 3294), (13, 3410), (14, 5538), (15, 2860)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 144), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 112), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 4), 16), 3), (((2, 1), 2), 3), (((4, 3), 12), 3), (((0, 1), 0), 3), (((7, 6), 42), 3), (((7, 8), 56), 2), (((5, 8), 40), 2), (((2, 9), 18), 2), (((8, 0), 0), 2), (((4, 8), 32), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 5), (((6, 1), 6), 5), (((4, 1), 4), 4), (((5, 2), 3), 3), (((9, 3), 3), 3), (((3, 2), 1), 2), (((5, 1), 10), 2), (((4, 8), 3), 2), (((7, 3), 3), 2), (((10, 4), 3), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.91
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.83
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.91
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 74.59 (abduce 83.48)
Hit samples:  5057  Ave length:  6.97
Symbols:  16 [(0, 1650), (1, 1781), (2, 1850), (3, 1759), (4, 1631), (5, 1629), (6, 1622), (7, 1711), (8, 1548), (9, 1558), (10, 3167), (11, 3461), (12, 2297), (13, 2757), (14, 4509), (15, 2337)]
Head:  [((-1,), 1000), ((1, -1, 1), 984), ((1, 3, 1, -1, 3), 288), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 5057 samples for 100 iterations, 0.9262766892562452, 2 epochs, take 29 sec.
Epoch time: 6m 13s
------------------------------
Epoch 63/99 (max_len=15, data=6058)
Train acc: 75.32 (abduce 98.37)
Hit samples:  5959  Ave length:  7.23
Symbols:  16 [(0, 1800), (1, 2047), (2, 2209), (3, 2137), (4, 2039), (5, 1992), (6, 2022), (7, 2128), (8, 1947), (9, 2006), (10, 3817), (11, 3813), (12, 3311), (13, 3427), (14, 5533), (15, 2881)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 363), ((1, -1, 3, 1, 3), 112), ((1, -1, 4, 4, 1, 4, 4), 370), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 112), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 102)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 0), 0), 2), (((8, 8), 64), 2), (((9, 7), 63), 2), (((4, 0), 0), 2), (((7, 7), 49), 2), (((7, 5), 35), 2), (((3, 5), 15), 2), (((6, 5), 30), 2), (((5, 8), 40), 2), (((8, 5), 40), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((4, 1), 4), 4), (((3, 1), 3), 3), (((9, 1), 9), 3), (((7, 1), 7), 3), (((2, 2), 5), 2), (((12, 5), 3), 2), (((5, 2), 1), 2), (((7, 3), 3), 2), (((3, 2), 1), 2), (((8, 3), 3), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.83
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.91
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 75.32 (abduce 83.51)
Hit samples:  5059  Ave length:  6.98
Symbols:  16 [(0, 1644), (1, 1781), (2, 1849), (3, 1758), (4, 1634), (5, 1630), (6, 1624), (7, 1712), (8, 1553), (9, 1568), (10, 3167), (11, 3460), (12, 2306), (13, 2761), (14, 4516), (15, 2342)]
Head:  [((-1,), 1000), ((1, -1, 1), 984), ((1, 3, 1, -1, 3), 288), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 5059 samples for 100 iterations, 0.9260727942217816, 2 epochs, take 29 sec.
Epoch time: 6m 13s
------------------------------
Epoch 64/99 (max_len=15, data=6058)
Train acc: 75.43 (abduce 98.37)
Hit samples:  5959  Ave length:  7.23
Symbols:  16 [(0, 1790), (1, 2044), (2, 2217), (3, 2139), (4, 2036), (5, 2001), (6, 2014), (7, 2127), (8, 1954), (9, 1997), (10, 3830), (11, 3811), (12, 3302), (13, 3415), (14, 5528), (15, 2876)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 368), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 103)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((7, 6), 42), 4), (((6, 9), 54), 3), (((3, 7), 21), 3), (((6, 2), 12), 3), (((0, 1), 0), 2), (((7, 4), 56), 2), (((14, 2), 28), 2), (((8, 2), 32), 2), (((6, 3), 18), 2), (((4, 4), 16), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((8, 1), 8), 6), (((8, 3), 3), 3), (((9, 1), 9), 3), (((6, 2), 3), 3), (((7, 1), 7), 3), (((6, 5), 1), 2), (((7, 2), 4), 2), (((5, 1), 10), 2), (((9, 2), 5), 2), (((3, 2), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.83
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.91
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 75.43 (abduce 83.53)
Hit samples:  5060  Ave length:  6.98
Symbols:  16 [(0, 1638), (1, 1785), (2, 1848), (3, 1759), (4, 1635), (5, 1634), (6, 1626), (7, 1710), (8, 1557), (9, 1567), (10, 3167), (11, 3464), (12, 2303), (13, 2765), (14, 4519), (15, 2341)]
Head:  [((-1,), 1000), ((1, -1, 1), 984), ((1, 3, 1, -1, 3), 288), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, -1, 5, 3, 5), 72), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 5060 samples for 100 iterations, 0.9261849481850615, 2 epochs, take 29 sec.
Epoch time: 6m 12s
------------------------------
Epoch 65/99 (max_len=15, data=6058)
Train acc: 75.60 (abduce 98.48)
Hit samples:  5966  Ave length:  7.24
Symbols:  16 [(0, 1816), (1, 2053), (2, 2231), (3, 2146), (4, 2047), (5, 2000), (6, 2006), (7, 2136), (8, 1946), (9, 1977), (10, 3839), (11, 3813), (12, 3308), (13, 3430), (14, 5541), (15, 2881)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 369), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 103)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 4), 24), 2), (((9, 2), 18), 2), (((0, 2), 0), 2), (((8, 0), 0), 2), (((9, 3), 27), 2), (((2, 7), 14), 2), (((7, 8), 56), 2), (((3, 7), 21), 2), (((8, 8), 64), 2), (((4, 8), 32), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((8, 1), 8), 6), (((9, 1), 9), 6), (((6, 1), 6), 4), (((8, 3), 3), 4), (((4, 1), 4), 3), (((5, 1), 5), 3), (((7, 5), 1), 2), (((5, 2), 5), 2), (((9, 2), 5), 2), (((6, 2), 3), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.94
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.84
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.91
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 75.60 (abduce 83.54)
Hit samples:  5061  Ave length:  6.98
Symbols:  16 [(0, 1642), (1, 1783), (2, 1851), (3, 1760), (4, 1636), (5, 1633), (6, 1622), (7, 1717), (8, 1557), (9, 1561), (10, 3172), (11, 3459), (12, 2304), (13, 2766), (14, 4520), (15, 2342)]
Head:  [((-1,), 1000), ((1, -1, 1), 984), ((1, 3, 1, -1, 3), 288), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5061 samples for 100 iterations, 0.925859872611465, 2 epochs, take 29 sec.
Epoch time: 6m 11s
------------------------------
Epoch 66/99 (max_len=15, data=6058)
Train acc: 75.91 (abduce 98.51)
Hit samples:  5968  Ave length:  7.24
Symbols:  16 [(0, 1803), (1, 2049), (2, 2223), (3, 2145), (4, 2046), (5, 2013), (6, 2023), (7, 2139), (8, 1962), (9, 1970), (10, 3849), (11, 3815), (12, 3301), (13, 3438), (14, 5544), (15, 2888)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 368), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 103)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 8), 32), 3), (((8, 0), 0), 2), (((3, 4), 12), 2), (((6, 4), 24), 2), (((4, 5), 20), 2), (((8, 9), 72), 2), (((2, 5), 20), 2), (((4, 7), 28), 2), (((0, 1), 0), 2), (((9, 4), 72), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 5), (((4, 1), 4), 4), (((7, 1), 7), 3), (((6, 2), 3), 3), (((7, 3), 3), 3), (((12, 5), 3), 2), (((5, 2), 5), 2), (((1, 0), 1), 2), (((5, 1), 5), 2), (((8, 1), 8), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.84
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.91
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 75.91 (abduce 83.59)
Hit samples:  5064  Ave length:  6.98
Symbols:  16 [(0, 1643), (1, 1782), (2, 1850), (3, 1762), (4, 1637), (5, 1636), (6, 1630), (7, 1719), (8, 1560), (9, 1557), (10, 3177), (11, 3461), (12, 2303), (13, 2771), (14, 4523), (15, 2347)]
Head:  [((-1,), 1000), ((1, -1, 1), 984), ((1, 3, 1, -1, 3), 289), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5064 samples for 100 iterations, 0.9256179648170145, 2 epochs, take 29 sec.
Epoch time: 6m 13s
------------------------------
Epoch 67/99 (max_len=15, data=6058)
Train acc: 75.91 (abduce 98.53)
Hit samples:  5969  Ave length:  7.24
Symbols:  16 [(0, 1819), (1, 2053), (2, 2216), (3, 2145), (4, 2052), (5, 2011), (6, 2007), (7, 2129), (8, 1975), (9, 1969), (10, 3839), (11, 3812), (12, 3308), (13, 3445), (14, 5544), (15, 2891)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 369), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 112), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 102)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 5), 30), 3), (((0, 1), 0), 3), (((6, 9), 54), 2), (((4, 7), 28), 2), (((4, 8), 32), 2), (((9, 3), 27), 2), (((3, 3), 0), 2), (((2, 8), 16), 2), (((3, 6), 18), 2), (((12, 5), 60), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 6), (((6, 2), 3), 4), (((1, 0), 1), 3), (((7, 1), 7), 3), (((8, 1), 8), 2), (((5, 4), 8), 2), (((5, 2), 3), 2), (((8, 2), 3), 2), (((3, 1), 3), 2), (((8, 3), 3), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.83
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.91
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 75.91 (abduce 83.61)
Hit samples:  5065  Ave length:  6.98
Symbols:  16 [(0, 1645), (1, 1785), (2, 1852), (3, 1761), (4, 1637), (5, 1637), (6, 1625), (7, 1717), (8, 1563), (9, 1557), (10, 3179), (11, 3460), (12, 2302), (13, 2773), (14, 4523), (15, 2345)]
Head:  [((-1,), 1000), ((1, -1, 1), 984), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5065 samples for 100 iterations, 0.9253980373858205, 2 epochs, take 29 sec.
Epoch time: 6m 12s
------------------------------
Epoch 68/99 (max_len=15, data=6058)
Train acc: 75.98 (abduce 98.61)
Hit samples:  5974  Ave length:  7.24
Symbols:  16 [(0, 1799), (1, 2065), (2, 2225), (3, 2145), (4, 2058), (5, 2008), (6, 2014), (7, 2133), (8, 1966), (9, 1981), (10, 3850), (11, 3806), (12, 3303), (13, 3459), (14, 5550), (15, 2894)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 103)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((7, 4), 28), 2), (((8, 7), 56), 2), (((4, 6), 24), 2), (((4, 8), 32), 2), (((2, 8), 16), 2), (((5, 8), 40), 2), (((9, 3), 27), 2), (((4, 4), 16), 2), (((8, 0), 0), 2), (((8, 3), 24), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((7, 1), 7), 5), (((1, 0), 1), 4), (((6, 1), 6), 4), (((4, 1), 4), 3), (((7, 2), 4), 3), (((9, 1), 9), 2), (((8, 2), 3), 2), (((3, 2), 3), 2), (((3, 2), 1), 2), (((8, 1), 8), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.83
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.91
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 75.98 (abduce 83.62)
Hit samples:  5066  Ave length:  6.98
Symbols:  16 [(0, 1642), (1, 1786), (2, 1856), (3, 1761), (4, 1636), (5, 1636), (6, 1627), (7, 1716), (8, 1562), (9, 1560), (10, 3177), (11, 3463), (12, 2301), (13, 2775), (14, 4522), (15, 2346)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5066 samples for 100 iterations, 0.925408584516202, 2 epochs, take 29 sec.
Epoch time: 6m 12s
------------------------------
Epoch 69/99 (max_len=15, data=6058)
Train acc: 75.91 (abduce 98.45)
Hit samples:  5964  Ave length:  7.23
Symbols:  16 [(0, 1810), (1, 2050), (2, 2216), (3, 2150), (4, 2053), (5, 2004), (6, 2017), (7, 2113), (8, 1955), (9, 1978), (10, 3831), (11, 3797), (12, 3300), (13, 3452), (14, 5529), (15, 2883)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 102)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 0), 0), 4), (((5, 0), 0), 3), (((3, 8), 24), 3), (((7, 3), 21), 2), (((6, 6), 36), 2), (((7, 4), 28), 2), (((7, 5), 35), 2), (((10, 4), 40), 2), (((7, 7), 49), 2), (((2, 8), 16), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((8, 1), 8), 4), (((9, 1), 9), 4), (((6, 1), 6), 4), (((5, 2), 3), 3), (((5, 1), 5), 3), (((7, 1), 7), 3), (((1, 0), 1), 3), (((9, 7), 1), 2), (((3, 1), 3), 2), (((8, 3), 3), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.83
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.91
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 75.91 (abduce 83.62)
Hit samples:  5066  Ave length:  6.98
Symbols:  16 [(0, 1645), (1, 1784), (2, 1855), (3, 1764), (4, 1636), (5, 1637), (6, 1628), (7, 1711), (8, 1562), (9, 1560), (10, 3177), (11, 3465), (12, 2298), (13, 2776), (14, 4522), (15, 2346)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5066 samples for 100 iterations, 0.9252954815359384, 2 epochs, take 29 sec.
Percentage of None result: 32.69
              precision    recall  f1-score   support

           0       0.97      1.00      0.98      4016
           1       0.76      0.94      0.84      5142
           2       0.99      0.98      0.99      5321
           3       1.00      0.99      1.00      5241
           4       1.00      0.99      0.99      5279
           5       0.97      0.98      0.98      5383
           6       1.00      1.00      1.00      5427
           7       0.99      0.97      0.98      5462
           8       1.00      1.00      1.00      5453
           9       0.98      0.97      0.98      5476
           +       0.99      0.99      0.99     13199
           -       0.99      1.00      0.99     10734
           *       1.00      1.00      1.00     13491
           /       1.00      1.00      1.00      9876
           (       0.75      0.93      0.83     21081
           )       0.99      0.69      0.81     21081

    accuracy                           0.94    141662
   macro avg       0.96      0.96      0.96    141662
weighted avg       0.95      0.94      0.94    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (     )
0  283    0    0    0    0    0    0    0    0    0    0    0    0    0     0     0
1    0  341    3    0    0    0    0    2    0    0    1    0    0    0     7     6
2    2    1  368    0    0    0    1    1    0    0    0    0    0    0     1     0
3    0    0    0  367    0    0    0    0    0    2    0    0    0    0     0     0
4    0    0    0    0  368    0    0    0    0    4    0    0    0    0     0     0
5    7    0    0    0    0  372    0    0    0    0    0    0    0    0     0     0
6    0    0    0    0    0    0  383    0    0    0    0    0    0    0     0     0
7    0    0    0    0    0    0    0  375    0    0   10    0    0    0     0     0
8    0    0    0    0    0    0    0    0  384    0    0    0    0    0     0     0
9    0    0    0    0    0   10    0    0    0  376    0    0    0    0     0     0
+    0    0    0    0    0    0    0    0    0    0  924    3    0    0     0     3
-    0    0    0    0    0    0    0    0    0    0    2  755    0    0     0     0
*    0    0    0    0    0    0    0    0    0    0    0    0  952    0     0     0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  697     0     0
(    0   96    0    0    0    0    0    0    0    0    0    7    0    0  1383     0
)    0    7    0    0    0    0    0    0    0    0    0    0    0    0   458  1022
result accuracy by length:
1 ( 2%) 97.00
3 ( 2%) 76.00
5 ( 2%) 48.06
7 ( 4%) 36.68
9 ( 4%) 38.19
11 ( 3%) 31.25
13 ( 4%) 35.65
15 ( 4%) 30.69
17 ( 4%) 29.61
19 ( 4%) 26.96
21 ( 4%) 24.24
23 ( 4%) 23.41
25 ( 4%) 23.50
27 ( 4%) 23.65
29 ( 3%) 18.32
31 ( 3%) 17.86
33 ( 2%) 15.00
35 ( 2%) 12.33
37 ( 2%) 17.09
39 ( 3%) 17.11
41 ( 3%) 19.46
43 ( 2%) 14.49
45 ( 2%) 13.39
47 ( 2%) 12.88
49 ( 2%)  9.15
51 ( 2%) 17.42
53 ( 2%) 11.19
55 ( 2%)  6.72
57 ( 2%) 13.99
59 ( 2%) 13.08
61 ( 1%) 10.94
63 ( 0%)  8.57
65 ( 0%) 22.22
67 ( 0%)  0.00
result accuracy by symbol:
( (91%) 21.39
) (91%) 21.39
* (87%) 17.72
+ (84%) 21.74
- (77%) 23.75
/ (76%) 22.64
0 (52%) 22.38
1 (60%) 21.42
2 (61%) 20.40
3 (62%) 21.61
4 (61%) 20.07
5 (62%) 20.48
6 (62%) 19.44
7 (63%) 20.02
8 (64%) 19.43
9 (63%) 19.22
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 100.00
2 ( 0%) 100.00
3 ( 0%) 100.00
4 ( 0%) 90.00
5 ( 0%) 90.00
6 ( 0%) 100.00
7 ( 0%) 100.00
8 ( 0%) 100.00
9 ( 0%) 90.00
result accuracy by result:
0 (21%) 43.24
1 (10%) 49.06
2 ( 4%) 50.00
3 ( 2%) 34.81
4 ( 2%) 29.32
5 ( 2%) 42.00
6 ( 2%) 40.00
7 ( 2%) 39.82
8 ( 2%) 27.35
9 ( 1%) 48.84
result accuracy by generalization:
1 (22.45%) 49.18
2 (22.96%) 37.69
3 (22.53%)  4.98
4 (15.82%) 20.00
5 (16.24%)  7.16
error cases:
4 9 [-1] [-1] 4 9
9 5 [-1] [-1] 9 5
5 0 [-1] [-1] 5 0
5*9 5*9 [1, -1, 1] [1, -1, 1] 45 5
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 4
6*4 6*4 [1, -1, 1] [1, -1, 1] 24 6
9*0 9*0 [1, -1, 1] [1, -1, 1] 0 9
3*5 3*5 [1, -1, 1] [1, -1, 1] 15 3
5*5 5*5 [1, -1, 1] [1, -1, 1] 25 5
2*4 2*4 [1, -1, 1] [1, -1, 1] 8 4
5*3 5*3 [1, -1, 1] [1, -1, 1] 15 5
7*9 7*9 [1, -1, 1] [1, -1, 1] 63 7
7/2 7/2 [1, -1, 1] [1, -1, 1] 4 2
3*2 3*2 [1, -1, 1] [1, -1, 1] 6 3
8/3 8/3 [1, -1, 1] [1, -1, 1] 3 2
3*3 3*3 [1, -1, 1] [1, -1, 1] 9 3
6*3 6*3 [1, -1, 1] [1, -1, 1] 18 6
8*2 8*2 [1, -1, 1] [1, -1, 1] 16 8
7/3 7/3 [1, -1, 1] [1, -1, 1] 3 2
7*7 7*7 [1, -1, 1] [1, -1, 1] 49 7
val (Perception Acc=93.55, Head Acc=100.00, Result Acc=25.14)
Epoch time: 6m 37s
------------------------------
Epoch 70/99 (max_len=15, data=6058)
Train acc: 75.83 (abduce 98.33)
Hit samples:  5957  Ave length:  7.23
Symbols:  16 [(0, 1803), (1, 2058), (2, 2225), (3, 2140), (4, 2039), (5, 1989), (6, 2017), (7, 2102), (8, 1958), (9, 1975), (10, 3835), (11, 3797), (12, 3294), (13, 3421), (14, 5520), (15, 2868)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 372), ((2, 2, 5, 2, 2, -1, 5), 137), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 112), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 102)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((6, 8), 48), 2), (((0, 2), 0), 2), (((12, 0), 0), 2), (((3, 8), 24), 2), (((9, 10), 90), 2), (((7, 8), 56), 2), (((5, 9), 45), 2), (((6, 6), 36), 2), (((4, 8), 32), 2), (((7, 6), 42), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((4, 1), 4), 3), (((6, 2), 3), 3), (((5, 1), 5), 3), (((3, 1), 3), 3), (((9, 1), 9), 3), (((3, 2), 3), 2), (((2, 2), 3), 2), (((5, 3), 1), 2), (((9, 3), 3), 2), (((7, 1), 7), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.83
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.91
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 75.83 (abduce 83.54)
Hit samples:  5061  Ave length:  6.97
Symbols:  16 [(0, 1643), (1, 1786), (2, 1853), (3, 1760), (4, 1636), (5, 1630), (6, 1627), (7, 1705), (8, 1558), (9, 1559), (10, 3173), (11, 3459), (12, 2301), (13, 2763), (14, 4510), (15, 2336)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5061 samples for 100 iterations, 0.9253803223887362, 2 epochs, take 29 sec.
Epoch time: 6m 15s
------------------------------
Epoch 71/99 (max_len=15, data=6058)
Train acc: 75.81 (abduce 98.32)
Hit samples:  5956  Ave length:  7.23
Symbols:  16 [(0, 1810), (1, 2057), (2, 2233), (3, 2143), (4, 2036), (5, 1994), (6, 2022), (7, 2104), (8, 1942), (9, 1959), (10, 3844), (11, 3772), (12, 3299), (13, 3422), (14, 5524), (15, 2881)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 370), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 144), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 112), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 103)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 4), 16), 4), (((9, 8), 72), 3), (((9, 4), 72), 2), (((8, 0), 0), 2), (((6, 6), 36), 2), (((2, 1), 2), 2), (((4, 8), 32), 2), (((0, 2), 0), 2), (((4, 5), 20), 2), (((6, 4), 24), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 5), (((4, 1), 4), 5), (((5, 1), 5), 3), (((7, 3), 3), 3), (((5, 2), 3), 3), (((3, 2), 3), 2), (((8, 1), 8), 2), (((3, 1), 3), 2), (((6, 2), 3), 2), (((2, 1), 7), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.83
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.91
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 75.81 (abduce 83.58)
Hit samples:  5063  Ave length:  6.98
Symbols:  16 [(0, 1644), (1, 1786), (2, 1855), (3, 1760), (4, 1635), (5, 1631), (6, 1630), (7, 1709), (8, 1557), (9, 1557), (10, 3175), (11, 3458), (12, 2304), (13, 2764), (14, 4515), (15, 2345)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5063 samples for 100 iterations, 0.9249823071479123, 2 epochs, take 29 sec.
Epoch time: 6m 14s
------------------------------
Epoch 72/99 (max_len=15, data=6058)
Train acc: 76.01 (abduce 98.46)
Hit samples:  5965  Ave length:  7.23
Symbols:  16 [(0, 1805), (1, 2064), (2, 2223), (3, 2146), (4, 2047), (5, 2003), (6, 2020), (7, 2105), (8, 1960), (9, 1977), (10, 3850), (11, 3808), (12, 3303), (13, 3422), (14, 5533), (15, 2883)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 369), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 103)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((7, 7), 49), 2), (((4, 8), 32), 2), (((7, 3), 21), 2), (((6, 0), 0), 2), (((2, 7), 14), 2), (((2, 8), 16), 2), (((4, 6), 24), 2), (((0, 1), 0), 2), (((0, 2), 0), 2), (((4, 5), 20), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((8, 1), 8), 5), (((5, 1), 5), 3), (((6, 2), 3), 3), (((6, 1), 6), 3), (((7, 3), 3), 3), (((5, 2), 3), 2), (((8, 3), 3), 2), (((4, 1), 4), 2), (((5, 2), 1), 2), (((1, 0), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.83
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.91
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 76.01 (abduce 83.61)
Hit samples:  5065  Ave length:  6.98
Symbols:  16 [(0, 1645), (1, 1788), (2, 1854), (3, 1761), (4, 1636), (5, 1632), (6, 1629), (7, 1710), (8, 1562), (9, 1560), (10, 3180), (11, 3461), (12, 2302), (13, 2769), (14, 4519), (15, 2345)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 90)]
Learn perception with 5065 samples for 100 iterations, 0.9251265804882188, 2 epochs, take 29 sec.
Epoch time: 6m 13s
------------------------------
Epoch 73/99 (max_len=15, data=6058)
Train acc: 76.06 (abduce 98.51)
Hit samples:  5968  Ave length:  7.24
Symbols:  16 [(0, 1829), (1, 2065), (2, 2219), (3, 2143), (4, 2053), (5, 1984), (6, 2019), (7, 2104), (8, 1977), (9, 1975), (10, 3834), (11, 3801), (12, 3318), (13, 3445), (14, 5539), (15, 2889)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 112), ((1, -1, 4, 4, 1, 4, 4), 370), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 102)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((0, 1), 0), 3), (((6, 6), 36), 3), (((9, 2), 18), 2), (((0, 2), 0), 2), (((2, 7), 14), 2), (((7, 7), 49), 2), (((9, 3), 27), 2), (((5, 1), 15), 2), (((3, 9), 27), 2), (((5, 6), 30), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((6, 2), 3), 4), (((8, 1), 8), 4), (((3, 1), 3), 3), (((5, 1), 5), 3), (((7, 2), 4), 2), (((6, 1), 6), 2), (((7, 5), 1), 2), (((4, 1), 4), 2), (((5, 2), 3), 2), (((6, 5), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.83
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.91
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 76.06 (abduce 83.62)
Hit samples:  5066  Ave length:  6.98
Symbols:  16 [(0, 1648), (1, 1788), (2, 1856), (3, 1762), (4, 1638), (5, 1628), (6, 1630), (7, 1709), (8, 1564), (9, 1561), (10, 3179), (11, 3462), (12, 2303), (13, 2774), (14, 4524), (15, 2348)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 89)]
Learn perception with 5066 samples for 100 iterations, 0.9251427602193701, 2 epochs, take 29 sec.
Epoch time: 6m 13s
------------------------------
Epoch 74/99 (max_len=15, data=6058)
Train acc: 75.99 (abduce 98.45)
Hit samples:  5964  Ave length:  7.24
Symbols:  16 [(0, 1811), (1, 2060), (2, 2229), (3, 2144), (4, 2036), (5, 1986), (6, 2028), (7, 2106), (8, 1956), (9, 1994), (10, 3846), (11, 3799), (12, 3312), (13, 3429), (14, 5530), (15, 2890)]
Head:  [((-1,), 1000), ((1, -1, 1), 1168), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 143), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 8), 32), 3), (((7, 8), 56), 3), (((6, 2), 12), 3), (((2, 9), 18), 3), (((6, 9), 54), 2), (((0, 2), 0), 2), (((7, 7), 49), 2), (((4, 4), 16), 2), (((7, 3), 21), 2), (((3, 7), 21), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((4, 1), 4), 7), (((6, 1), 6), 4), (((5, 2), 3), 4), (((9, 1), 9), 3), (((7, 1), 7), 3), (((9, 3), 3), 3), (((9, 4), 3), 3), (((7, 2), 4), 3), (((8, 1), 8), 2), (((7, 3), 3), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.83
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.91
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 75.99 (abduce 83.67)
Hit samples:  5069  Ave length:  6.98
Symbols:  16 [(0, 1646), (1, 1787), (2, 1860), (3, 1765), (4, 1636), (5, 1630), (6, 1632), (7, 1712), (8, 1568), (9, 1563), (10, 3182), (11, 3463), (12, 2308), (13, 2777), (14, 4524), (15, 2352)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 5069 samples for 100 iterations, 0.9252083039118768, 2 epochs, take 29 sec.
Epoch time: 6m 13s
------------------------------
Epoch 75/99 (max_len=15, data=6058)
Train acc: 76.04 (abduce 98.68)
Hit samples:  5978  Ave length:  7.25
Symbols:  16 [(0, 1828), (1, 2072), (2, 2229), (3, 2156), (4, 2037), (5, 1986), (6, 2023), (7, 2120), (8, 1973), (9, 1995), (10, 3876), (11, 3800), (12, 3322), (13, 3443), (14, 5553), (15, 2905)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 144), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 112), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((5, 9), 45), 3), (((4, 8), 32), 3), (((3, 4), 12), 2), (((9, 3), 27), 2), (((8, 2), 16), 2), (((5, 7), 35), 2), (((6, 6), 36), 2), (((3, 7), 21), 2), (((2, 3), 24), 2), (((5, 8), 40), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((7, 1), 7), 5), (((9, 1), 9), 4), (((9, 4), 3), 3), (((4, 1), 4), 3), (((9, 2), 5), 2), (((6, 5), 1), 2), (((9, 3), 3), 2), (((8, 2), 3), 2), (((5, 2), 1), 2), (((2, 2), 3), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.83
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.91
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 76.04 (abduce 83.69)
Hit samples:  5070  Ave length:  6.99
Symbols:  16 [(0, 1648), (1, 1787), (2, 1861), (3, 1765), (4, 1639), (5, 1627), (6, 1629), (7, 1714), (8, 1570), (9, 1564), (10, 3187), (11, 3460), (12, 2309), (13, 2778), (14, 4523), (15, 2353)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 5070 samples for 100 iterations, 0.9250861241316993, 2 epochs, take 29 sec.
Epoch time: 6m 12s
------------------------------
Epoch 76/99 (max_len=15, data=6058)
Train acc: 76.19 (abduce 98.66)
Hit samples:  5977  Ave length:  7.25
Symbols:  16 [(0, 1803), (1, 2073), (2, 2220), (3, 2157), (4, 2044), (5, 2000), (6, 2028), (7, 2134), (8, 1965), (9, 1994), (10, 3881), (11, 3810), (12, 3289), (13, 3459), (14, 5555), (15, 2901)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 370), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 144), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((0, 2), 0), 4), (((4, 7), 28), 2), (((5, 1), 0), 2), (((5, 1), 15), 2), (((5, 11), 55), 2), (((7, 5), 35), 2), (((3, 9), 27), 2), (((8, 4), 32), 2), (((3, 5), 15), 2), (((4, 5), 20), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 5), (((3, 2), 3), 3), (((7, 2), 4), 3), (((8, 1), 8), 3), (((6, 2), 3), 3), (((4, 1), 4), 3), (((6, 1), 6), 3), (((9, 4), 3), 2), (((5, 2), 1), 2), (((7, 3), 3), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.83
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.91
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 76.19 (abduce 83.71)
Hit samples:  5071  Ave length:  6.99
Symbols:  16 [(0, 1645), (1, 1789), (2, 1858), (3, 1765), (4, 1638), (5, 1630), (6, 1632), (7, 1718), (8, 1570), (9, 1564), (10, 3194), (11, 3461), (12, 2301), (13, 2782), (14, 4527), (15, 2355)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 5071 samples for 100 iterations, 0.9249202630613339, 2 epochs, take 29 sec.
Epoch time: 6m 13s
------------------------------
Epoch 77/99 (max_len=15, data=6058)
Train acc: 76.22 (abduce 98.68)
Hit samples:  5978  Ave length:  7.25
Symbols:  16 [(0, 1802), (1, 2073), (2, 2238), (3, 2147), (4, 2043), (5, 2006), (6, 2022), (7, 2133), (8, 1965), (9, 1991), (10, 3882), (11, 3805), (12, 3301), (13, 3454), (14, 5551), (15, 2905)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((7, 7), 49), 4), (((7, 6), 42), 3), (((3, 8), 24), 2), (((6, 8), 48), 2), (((8, 0), 0), 2), (((3, 7), 21), 2), (((6, 6), 36), 2), (((6, 3), 18), 2), (((3, 4), 12), 2), (((7, 4), 28), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((4, 1), 4), 5), (((7, 1), 7), 5), (((9, 1), 9), 4), (((8, 1), 8), 4), (((7, 2), 4), 3), (((3, 1), 3), 3), (((6, 2), 3), 3), (((9, 2), 5), 2), (((6, 5), 1), 2), (((2, 2), 5), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.83
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.91
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 76.22 (abduce 83.71)
Hit samples:  5071  Ave length:  6.99
Symbols:  16 [(0, 1644), (1, 1791), (2, 1861), (3, 1764), (4, 1638), (5, 1633), (6, 1631), (7, 1716), (8, 1567), (9, 1564), (10, 3193), (11, 3460), (12, 2304), (13, 2781), (14, 4527), (15, 2355)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 5071 samples for 100 iterations, 0.9248355866662903, 2 epochs, take 29 sec.
Epoch time: 6m 11s
------------------------------
Epoch 78/99 (max_len=15, data=6058)
Train acc: 76.26 (abduce 98.66)
Hit samples:  5977  Ave length:  7.24
Symbols:  16 [(0, 1796), (1, 2066), (2, 2220), (3, 2151), (4, 2054), (5, 2003), (6, 2017), (7, 2136), (8, 1975), (9, 1994), (10, 3881), (11, 3813), (12, 3292), (13, 3449), (14, 5548), (15, 2904)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 0), 0), 3), (((4, 4), 16), 3), (((2, 7), 14), 2), (((1, 5), 15), 2), (((7, 8), 56), 2), (((8, 5), 40), 2), (((7, 6), 42), 2), (((4, 0), 0), 2), (((5, 6), 30), 2), (((6, 0), 0), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((5, 2), 3), 4), (((8, 1), 8), 3), (((7, 1), 7), 3), (((9, 4), 3), 3), (((9, 1), 9), 3), (((4, 1), 4), 3), (((8, 3), 3), 2), (((6, 5), 1), 2), (((7, 3), 21), 2), (((9, 3), 3), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.83
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.91
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 76.26 (abduce 83.71)
Hit samples:  5071  Ave length:  6.99
Symbols:  16 [(0, 1644), (1, 1791), (2, 1858), (3, 1765), (4, 1640), (5, 1632), (6, 1628), (7, 1717), (8, 1571), (9, 1563), (10, 3195), (11, 3465), (12, 2298), (13, 2780), (14, 4527), (15, 2355)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 5071 samples for 100 iterations, 0.9247791357362612, 2 epochs, take 29 sec.
Epoch time: 6m 12s
------------------------------
Epoch 79/99 (max_len=15, data=6058)
Train acc: 76.29 (abduce 98.66)
Hit samples:  5977  Ave length:  7.25
Symbols:  16 [(0, 1808), (1, 2064), (2, 2227), (3, 2152), (4, 2047), (5, 2005), (6, 2016), (7, 2119), (8, 1979), (9, 2000), (10, 3883), (11, 3815), (12, 3284), (13, 3456), (14, 5550), (15, 2906)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 369), ((2, 2, 5, 2, 2, -1, 5), 138), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((2, 8), 16), 3), (((6, 4), 24), 3), (((5, 6), 30), 3), (((8, 0), 0), 3), (((0, 2), 0), 2), (((0, 1), 0), 2), (((7, 5), 35), 2), (((3, 5), 15), 2), (((7, 7), 49), 2), (((9, 2), 54), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((7, 1), 7), 5), (((4, 1), 4), 5), (((3, 1), 3), 3), (((6, 2), 3), 3), (((8, 1), 8), 3), (((7, 2), 4), 3), (((9, 1), 9), 3), (((9, 3), 3), 2), (((4, 8), 3), 2), (((6, 1), 6), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.83
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.91
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 76.29 (abduce 83.71)
Hit samples:  5071  Ave length:  6.99
Symbols:  16 [(0, 1645), (1, 1791), (2, 1858), (3, 1765), (4, 1637), (5, 1632), (6, 1628), (7, 1715), (8, 1571), (9, 1567), (10, 3194), (11, 3464), (12, 2299), (13, 2781), (14, 4527), (15, 2355)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 5071 samples for 100 iterations, 0.9249484885263485, 2 epochs, take 29 sec.
Percentage of None result: 18.88
              precision    recall  f1-score   support

           0       0.97      1.00      0.98      4016
           1       0.89      0.95      0.92      5142
           2       0.99      0.98      0.99      5321
           3       1.00      0.99      1.00      5241
           4       0.97      0.99      0.98      5279
           5       0.97      0.98      0.98      5383
           6       1.00      0.97      0.99      5427
           7       1.00      0.97      0.99      5462
           8       1.00      1.00      1.00      5453
           9       0.98      0.97      0.97      5476
           +       0.98      1.00      0.99     13199
           -       0.99      0.99      0.99     10734
           *       1.00      1.00      1.00     13491
           /       1.00      1.00      1.00      9876
           (       0.76      0.97      0.85     21081
           )       0.99      0.70      0.82     21081

    accuracy                           0.94    141662
   macro avg       0.97      0.97      0.97    141662
weighted avg       0.95      0.94      0.94    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (     )
0  283    0    0    0    0    0    0    0    0    0    0    0    0    0     0     0
1    0  345    2    0    0    0    0    0    0    0    1    0    0    0     7     5
2    1    3  368    0    0    0    0    0    0    1    0    0    0    0     1     0
3    0    0    0  366    0    0    0    0    0    3    0    0    0    0     0     0
4    0    0    0    0  368    0    0    0    0    4    0    0    0    0     0     0
5    7    0    0    0    0  372    0    0    0    0    0    0    0    0     0     0
6    0    0    0    0    9    0  373    0    0    0    0    0    0    0     0     0
7    0    0    0    0    0    0    0  375    0    0   10    0    0    0     0     0
8    0    0    0    0    0    0    0    0  384    0    0    0    0    0     0     0
9    0    0    0    0    0   10    0    0    0  376    0    0    0    0     0     0
+    0    0    0    0    0    0    0    0    0    0  928    0    0    0     0     3
-    0    0    0    0    0    0    0    0    0    0    5  752    0    0     0     0
*    0    0    0    0    0    0    0    0    0    0    0    0  952    0     0     0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  697     0     0
(    0   37    0    0    0    0    0    0    0    0    0    7    0    0  1443     0
)    0    0    0    0    0    0    0    0    0    0    0    0    0    0   450  1037
result accuracy by length:
1 ( 2%) 97.00
3 ( 2%) 76.00
5 ( 2%) 47.29
7 ( 4%) 37.55
9 ( 4%) 39.70
11 ( 3%) 34.66
13 ( 4%) 38.89
15 ( 4%) 33.66
17 ( 4%) 31.55
19 ( 4%) 32.84
21 ( 4%) 31.82
23 ( 4%) 26.83
25 ( 4%) 26.50
27 ( 4%) 28.57
29 ( 3%) 26.70
31 ( 3%) 22.02
33 ( 2%) 19.29
35 ( 2%) 19.18
37 ( 2%) 25.64
39 ( 3%) 21.05
41 ( 3%) 20.81
43 ( 2%) 19.57
45 ( 2%) 21.43
47 ( 2%) 20.45
49 ( 2%) 19.72
51 ( 2%) 24.24
53 ( 2%) 20.90
55 ( 2%) 14.29
57 ( 2%) 21.68
59 ( 2%) 21.50
61 ( 1%) 18.75
63 ( 0%) 14.29
65 ( 0%) 22.22
67 ( 0%) 33.33
result accuracy by symbol:
( (91%) 26.64
) (91%) 26.64
* (87%) 22.51
+ (84%) 27.03
- (77%) 29.48
/ (76%) 28.58
0 (52%) 28.83
1 (60%) 27.84
2 (61%) 26.15
3 (62%) 26.59
4 (61%) 25.74
5 (62%) 26.14
6 (62%) 24.70
7 (63%) 24.90
8 (64%) 24.68
9 (63%) 24.97
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 100.00
2 ( 0%) 100.00
3 ( 0%) 100.00
4 ( 0%) 90.00
5 ( 0%) 90.00
6 ( 0%) 100.00
7 ( 0%) 100.00
8 ( 0%) 100.00
9 ( 0%) 90.00
result accuracy by result:
0 (21%) 53.71
1 (10%) 58.99
2 ( 4%) 56.06
3 ( 2%) 43.70
4 ( 2%) 33.83
5 ( 2%) 51.00
6 ( 2%) 48.70
7 ( 2%) 46.02
8 ( 2%) 31.62
9 ( 1%) 53.49
result accuracy by generalization:
1 (22.45%) 53.55
2 (22.96%) 43.38
3 (22.53%)  6.25
4 (15.82%) 29.68
5 (16.24%) 11.31
error cases:
4 9 [-1] [-1] 4 9
9 5 [-1] [-1] 9 5
5 0 [-1] [-1] 5 0
5*9 5*9 [1, -1, 1] [1, -1, 1] 45 5
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 4
6*4 6*4 [1, -1, 1] [1, -1, 1] 24 6
9*0 9*0 [1, -1, 1] [1, -1, 1] 0 9
3*5 3*5 [1, -1, 1] [1, -1, 1] 15 3
5*5 5*5 [1, -1, 1] [1, -1, 1] 25 5
2*4 2*4 [1, -1, 1] [1, -1, 1] 8 4
5*3 5*3 [1, -1, 1] [1, -1, 1] 15 5
7*9 7*9 [1, -1, 1] [1, -1, 1] 63 7
7/2 7/2 [1, -1, 1] [1, -1, 1] 4 2
3*2 3*2 [1, -1, 1] [1, -1, 1] 6 3
8/3 8/3 [1, -1, 1] [1, -1, 1] 3 2
3*3 3*3 [1, -1, 1] [1, -1, 1] 9 3
6*3 6*3 [1, -1, 1] [1, -1, 1] 18 6
8*2 8*2 [1, -1, 1] [1, -1, 1] 16 8
7/3 7/3 [1, -1, 1] [1, -1, 1] 3 2
7*7 7*7 [1, -1, 1] [1, -1, 1] 49 7
val (Perception Acc=94.26, Head Acc=100.00, Result Acc=29.92)
Epoch time: 6m 36s
------------------------------
Epoch 80/99 (max_len=inf, data=11170)
Train acc: 59.82 (abduce 94.31)
Hit samples:  10534  Ave length:  14.39
Symbols:  16 [(0, 5413), (1, 6315), (2, 6804), (3, 6346), (4, 6163), (5, 5995), (6, 5981), (7, 6128), (8, 5879), (9, 5915), (10, 13643), (11, 13273), (12, 11625), (13, 11856), (14, 26468), (15, 13790)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 364), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 370), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((0, 1), 0), 4), (((6, 6), 36), 3), (((4, 5), 20), 3), (((0, 2), 0), 2), (((4, 0), 0), 2), (((2, 1), 4), 2), (((5, 9), 45), 2), (((7, 0), 0), 2), (((3, 8), 24), 2), (((5, 7), 35), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((8, 3), 3), 3), (((9, 1), 9), 3), (((4, 1), 4), 2), (((5, 1), 5), 2), (((2, 1), 0), 2), (((5, 2), 3), 2), (((6, 1), 6), 2), (((3, 1), 1), 2), (((2, 1), 4), 1), (((3, 6), 2), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.89
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 59.82 (abduce 79.02)
Hit samples:  8826  Ave length:  14.14
Symbols:  16 [(0, 4826), (1, 5476), (2, 5567), (3, 5182), (4, 4963), (5, 4923), (6, 4819), (7, 4939), (8, 4784), (9, 4706), (10, 11019), (11, 11927), (12, 8827), (13, 9586), (14, 21906), (15, 11392)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 99), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 8826 samples for 100 iterations, 0.9179603018215023, 1 epochs, take 51 sec.
Epoch time: 8m 3s
------------------------------
Epoch 81/99 (max_len=inf, data=11170)
Train acc: 61.06 (abduce 95.87)
Hit samples:  10709  Ave length:  14.55
Symbols:  16 [(0, 5590), (1, 6524), (2, 6865), (3, 6492), (4, 6284), (5, 6202), (6, 6115), (7, 6241), (8, 6099), (9, 6097), (10, 13991), (11, 13640), (12, 11975), (13, 12186), (14, 27264), (15, 14234)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 368), ((2, 2, 5, 2, 2, -1, 5), 139), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 103)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 0), 0), 5), (((0, 1), 0), 3), (((4, 0), 0), 3), (((0, 2), 0), 2), (((9, 0), 0), 2), (((9, 2), 18), 2), (((1, 4), 1), 2), (((6, 1), 12), 1), (((8, 2), 72), 1), (((3, 5), 45), 1)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((4, 1), 4), 4), (((2, 1), 3), 2), (((6, 1), 6), 2), (((5, 7), 0), 2), (((9, 6), 1), 2), (((4, 2), 4), 2), (((7, 2), 4), 2), (((0, 2), 1), 2), (((2, 2), 2), 2), (((7, 1), 7), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.89
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 61.06 (abduce 79.61)
Hit samples:  8892  Ave length:  14.21
Symbols:  16 [(0, 4930), (1, 5535), (2, 5560), (3, 5230), (4, 4998), (5, 5009), (6, 4867), (7, 4969), (8, 4889), (9, 4775), (10, 11147), (11, 12005), (12, 8936), (13, 9782), (14, 22181), (15, 11585)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 306), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 8892 samples for 100 iterations, 0.9184955458155983, 1 epochs, take 52 sec.
Epoch time: 8m 11s
------------------------------
Epoch 82/99 (max_len=inf, data=11170)
Train acc: 61.78 (abduce 96.88)
Hit samples:  10822  Ave length:  14.63
Symbols:  16 [(0, 5721), (1, 6725), (2, 6941), (3, 6593), (4, 6387), (5, 6310), (6, 6192), (7, 6313), (8, 6195), (9, 6094), (10, 14180), (11, 13860), (12, 12251), (13, 12356), (14, 27736), (15, 14474)]
Head:  [((-1,), 1000), ((1, -1, 1), 1169), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 368), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 103)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((3, 0), 0), 3), (((2, 8), 16), 3), (((0, 1), 0), 3), (((9, 0), 0), 2), (((1, 2), 1), 2), (((4, 12), 48), 1), (((1, 9), 0), 1), (((7, 1), 0), 1), (((2, 11), 60), 1), (((12, 0), 0), 1)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((3, 1), 3), 4), (((7, 5), 1), 2), (((4, 1), 4), 2), (((9, 2), 5), 2), (((5, 9), 2), 2), (((9, 4), 3), 2), (((4, 1), 8), 2), (((2, 2), 4), 2), (((15, 6), 3), 1), (((18, 11), 3), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.92
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.89
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 61.78 (abduce 79.83)
Hit samples:  8917  Ave length:  14.24
Symbols:  16 [(0, 4967), (1, 5595), (2, 5572), (3, 5256), (4, 5026), (5, 5032), (6, 4887), (7, 4993), (8, 4902), (9, 4750), (10, 11150), (11, 12099), (12, 9018), (13, 9796), (14, 22300), (15, 11636)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 307), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 8917 samples for 100 iterations, 0.9187109679553312, 1 epochs, take 52 sec.
Epoch time: 8m 5s
------------------------------
Epoch 83/99 (max_len=inf, data=11170)
Train acc: 62.34 (abduce 97.55)
Hit samples:  10896  Ave length:  14.68
Symbols:  16 [(0, 5778), (1, 6777), (2, 6943), (3, 6653), (4, 6431), (5, 6382), (6, 6237), (7, 6385), (8, 6278), (9, 6210), (10, 14368), (11, 14009), (12, 12342), (13, 12457), (14, 28044), (15, 14654)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 372), ((2, 2, 5, 2, 2, -1, 5), 140), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 113), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 102)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((0, 1), 0), 5), (((0, 2), 0), 5), (((3, 0), 0), 2), (((4, 0), 0), 2), (((7, 0), 0), 2), (((8, 0), 0), 2), (((8, 9), 72), 2), (((6, 2), 12), 2), (((2, 8), 0), 2), (((16, 3), 51), 1)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((3, 1), 3), 4), (((7, 1), 7), 3), (((5, 1), 5), 3), (((5, 2), 3), 2), (((1, 6), 0), 2), (((4, 1), 4), 2), (((8, 3), 3), 2), (((8, 7), 1), 1), (((2, 1), 28), 1), (((7, 7), 3), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.89
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 62.34 (abduce 80.13)
Hit samples:  8950  Ave length:  14.28
Symbols:  16 [(0, 5021), (1, 5606), (2, 5585), (3, 5281), (4, 5049), (5, 5067), (6, 4896), (7, 5013), (8, 4948), (9, 4805), (10, 11264), (11, 12162), (12, 9023), (13, 9872), (14, 22454), (15, 11720)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 308), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 8950 samples for 100 iterations, 0.918429003021148, 1 epochs, take 53 sec.
Epoch time: 7m 58s
------------------------------
Epoch 84/99 (max_len=inf, data=11170)
Train acc: 62.54 (abduce 97.33)
Hit samples:  10872  Ave length:  14.67
Symbols:  16 [(0, 5749), (1, 6752), (2, 6937), (3, 6585), (4, 6418), (5, 6373), (6, 6233), (7, 6403), (8, 6247), (9, 6198), (10, 14239), (11, 13989), (12, 12319), (13, 12474), (14, 27940), (15, 14608)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 369), ((2, 2, 5, 2, 2, -1, 5), 140), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 102)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((8, 0), 0), 5), (((0, 2), 0), 4), (((7, 3), 21), 2), (((6, 8), 0), 2), (((11, 0), 0), 2), (((6, 7), 42), 2), (((3, 0), 0), 2), (((6, 3), 18), 2), (((5, 0), 0), 2), (((2, 2), 60), 1)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((4, 1), 4), 5), (((7, 1), 7), 3), (((3, 1), 3), 2), (((2, 2), 2), 2), (((8, 1), 8), 2), (((5, 2), 1), 2), (((11, 10), 1), 1), (((11, 1), 11), 1), (((9, 4), 3), 1), (((6, 3), 12), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.89
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 62.54 (abduce 80.07)
Hit samples:  8944  Ave length:  14.26
Symbols:  16 [(0, 5004), (1, 5597), (2, 5584), (3, 5260), (4, 5037), (5, 5064), (6, 4900), (7, 5023), (8, 4942), (9, 4791), (10, 11207), (11, 12149), (12, 9014), (13, 9888), (14, 22416), (15, 11710)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 307), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 8944 samples for 100 iterations, 0.917851488407819, 1 epochs, take 53 sec.
Epoch time: 7m 57s
------------------------------
Epoch 85/99 (max_len=inf, data=11170)
Train acc: 62.84 (abduce 97.94)
Hit samples:  10940  Ave length:  14.72
Symbols:  16 [(0, 5791), (1, 6807), (2, 7003), (3, 6660), (4, 6450), (5, 6429), (6, 6299), (7, 6408), (8, 6336), (9, 6272), (10, 14339), (11, 14092), (12, 12453), (13, 12631), (14, 28273), (15, 14767)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 372), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 103)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((5, 0), 0), 4), (((7, 0), 0), 3), (((6, 0), 0), 3), (((0, 1), 0), 3), (((8, 0), 0), 2), (((3, 8), 24), 2), (((9, 9), 81), 2), (((1, 2), 14), 1), (((4, 2), 14), 1), (((2, 11), 30), 1)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 4), (((6, 1), 6), 3), (((3, 1), 3), 3), (((5, 7), 0), 2), (((7, 1), 7), 2), (((5, 3), 1), 1), (((5, 6), 0), 1), (((4, 1), 4), 1), (((4, 5), 0), 1), (((8, 5), 1), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.89
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 62.84 (abduce 80.29)
Hit samples:  8968  Ave length:  14.29
Symbols:  16 [(0, 5021), (1, 5631), (2, 5604), (3, 5288), (4, 5055), (5, 5080), (6, 4918), (7, 5023), (8, 4976), (9, 4823), (10, 11251), (11, 12185), (12, 9073), (13, 9942), (14, 22535), (15, 11773)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 308), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 8968 samples for 100 iterations, 0.9174585342258422, 1 epochs, take 53 sec.
Epoch time: 7m 59s
------------------------------
Epoch 86/99 (max_len=inf, data=11170)
Train acc: 63.34 (abduce 98.31)
Hit samples:  10981  Ave length:  14.75
Symbols:  16 [(0, 5816), (1, 6844), (2, 7049), (3, 6705), (4, 6507), (5, 6447), (6, 6343), (7, 6437), (8, 6390), (9, 6280), (10, 14396), (11, 14159), (12, 12523), (13, 12759), (14, 28450), (15, 14896)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 372), ((2, 2, 5, 2, 2, -1, 5), 141), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 145), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 105)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((0, 2), 0), 4), (((2, 1), 2), 2), (((3, 0), 0), 2), (((4, 4), 16), 2), (((4, 8), 32), 2), (((5, 6), 30), 2), (((8, 0), 0), 2), (((5, 2), 15), 2), (((0, 1), 0), 2), (((10, 7), 70), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((5, 1), 5), 4), (((9, 1), 9), 4), (((7, 1), 7), 2), (((5, 2), 1), 2), (((9, 2), 5), 2), (((6, 2), 3), 2), (((1, 0), 1), 2), (((4, 2), 0), 2), (((4, 1), 4), 2), (((7, 3), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.89
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 63.34 (abduce 80.38)
Hit samples:  8979  Ave length:  14.3
Symbols:  16 [(0, 5022), (1, 5637), (2, 5607), (3, 5305), (4, 5070), (5, 5082), (6, 4927), (7, 5043), (8, 4996), (9, 4823), (10, 11273), (11, 12190), (12, 9067), (13, 10003), (14, 22580), (15, 11808)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 308), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 8979 samples for 100 iterations, 0.9172331098705161, 1 epochs, take 53 sec.
Epoch time: 7m 58s
------------------------------
Epoch 87/99 (max_len=inf, data=11170)
Train acc: 63.52 (abduce 98.30)
Hit samples:  10980  Ave length:  14.74
Symbols:  16 [(0, 5782), (1, 6886), (2, 7050), (3, 6667), (4, 6468), (5, 6447), (6, 6359), (7, 6447), (8, 6394), (9, 6282), (10, 14386), (11, 14159), (12, 12495), (13, 12762), (14, 28449), (15, 14863)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 374), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((0, 2), 0), 5), (((6, 0), 0), 5), (((8, 0), 0), 4), (((5, 0), 0), 3), (((7, 8), 56), 2), (((2, 8), 16), 2), (((6, 8), 48), 2), (((8, 4), 32), 2), (((8, 9), 72), 2), (((6, 9), 54), 1)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 3), (((4, 1), 4), 3), (((6, 1), 6), 3), (((7, 1), 7), 2), (((0, 1), 1), 2), (((5, 4), 8), 2), (((2, 3), 2), 2), (((4, 3), 1), 2), (((7, 0), 7), 2), (((1, 2), 0), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.89
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 63.52 (abduce 80.34)
Hit samples:  8974  Ave length:  14.3
Symbols:  16 [(0, 5014), (1, 5648), (2, 5602), (3, 5295), (4, 5053), (5, 5079), (6, 4938), (7, 5037), (8, 4986), (9, 4822), (10, 11248), (11, 12191), (12, 9053), (13, 10008), (14, 22564), (15, 11790)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 308), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 8974 samples for 100 iterations, 0.9170562932485505, 1 epochs, take 53 sec.
Epoch time: 7m 57s
------------------------------
Epoch 88/99 (max_len=inf, data=11170)
Train acc: 63.62 (abduce 98.43)
Hit samples:  10995  Ave length:  14.76
Symbols:  16 [(0, 5788), (1, 6916), (2, 7037), (3, 6676), (4, 6443), (5, 6453), (6, 6375), (7, 6480), (8, 6416), (9, 6333), (10, 14371), (11, 14189), (12, 12541), (13, 12821), (14, 28521), (15, 14915)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 372), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((0, 2), 0), 5), (((7, 0), 0), 4), (((0, 1), 0), 3), (((4, 0), 0), 2), (((7, 8), 56), 2), (((1, 1), 2), 1), (((3, 2), 21), 1), (((2, 5), 20), 1), (((9, 8), 72), 1), (((1, 3), 0), 1)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((3, 1), 3), 3), (((9, 1), 9), 3), (((6, 1), 6), 3), (((7, 1), 7), 3), (((8, 3), 3), 2), (((8, 2), 4), 2), (((8, 1), 8), 2), (((7, 4), 3), 2), (((5, 1), 10), 1), (((13, 3), 5), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.89
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 63.62 (abduce 80.36)
Hit samples:  8976  Ave length:  14.3
Symbols:  16 [(0, 5016), (1, 5653), (2, 5597), (3, 5287), (4, 5045), (5, 5078), (6, 4936), (7, 5043), (8, 4990), (9, 4835), (10, 11222), (11, 12184), (12, 9085), (13, 10013), (14, 22563), (15, 11789)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 308), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 8976 samples for 100 iterations, 0.9167108215933175, 1 epochs, take 53 sec.
Epoch time: 7m 55s
------------------------------
Epoch 89/99 (max_len=inf, data=11170)
Train acc: 63.75 (abduce 98.28)
Hit samples:  10978  Ave length:  14.75
Symbols:  16 [(0, 5780), (1, 6899), (2, 7034), (3, 6643), (4, 6465), (5, 6441), (6, 6351), (7, 6466), (8, 6384), (9, 6317), (10, 14290), (11, 14172), (12, 12544), (13, 12796), (14, 28459), (15, 14865)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 371), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((0, 1), 0), 5), (((4, 0), 0), 3), (((2, 3), 0), 3), (((7, 7), 49), 2), (((1, 5), 0), 2), (((7, 4), 0), 2), (((3, 8), 24), 2), (((6, 0), 0), 2), (((0, 2), 0), 2), (((5, 0), 0), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((7, 1), 7), 6), (((9, 1), 9), 4), (((5, 7), 0), 2), (((9, 2), 5), 2), (((6, 8), 3), 1), (((7, 1), 4), 1), (((7, 6), 0), 1), (((11, 2), 6), 1), (((5, 2), 1), 1), (((5, 1), 5), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.89
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 63.75 (abduce 80.31)
Hit samples:  8971  Ave length:  14.29
Symbols:  16 [(0, 5015), (1, 5646), (2, 5596), (3, 5278), (4, 5049), (5, 5074), (6, 4937), (7, 5041), (8, 4975), (9, 4825), (10, 11193), (11, 12183), (12, 9069), (13, 10020), (14, 22545), (15, 11767)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 308), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 8971 samples for 100 iterations, 0.9165685226927067, 1 epochs, take 53 sec.
Percentage of None result: 26.16
              precision    recall  f1-score   support

           0       0.97      1.00      0.99      4016
           1       0.82      0.96      0.88      5142
           2       1.00      0.99      0.99      5321
           3       1.00      1.00      1.00      5241
           4       1.00      1.00      1.00      5279
           5       0.97      0.98      0.98      5383
           6       1.00      1.00      1.00      5427
           7       1.00      0.97      0.99      5462
           8       1.00      1.00      1.00      5453
           9       1.00      0.97      0.99      5476
           +       0.99      1.00      0.99     13199
           -       0.99      1.00      0.99     10734
           *       1.00      1.00      1.00     13491
           /       1.00      1.00      1.00      9876
           (       0.76      0.94      0.84     21081
           )       0.99      0.70      0.82     21081

    accuracy                           0.94    141662
   macro avg       0.97      0.97      0.97    141662
weighted avg       0.95      0.94      0.94    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (     )
0  283    0    0    0    0    0    0    0    0    0    0    0    0    0     0     0
1    0  349    1    0    0    0    0    0    0    0    1    0    0    0     6     4
2    0    2  371    0    0    0    0    0    0    0    0    0    0    0     1     0
3    0    0    0  369    0    0    0    0    0    0    0    0    0    0     0     0
4    0    0    0    0  372    0    0    0    0    0    0    0    0    0     0     0
5    7    0    0    0    0  372    0    0    0    0    0    0    0    0     0     0
6    0    0    0    0    0    0  383    0    0    0    0    0    0    0     0     0
7    0    0    0    0    0    0    0  375    0    0   10    0    0    0     0     0
8    0    0    0    0    0    0    0    0  384    0    0    0    0    0     0     0
9    0    0    0    0    0   10    0    0    0  376    0    0    0    0     0     0
+    0    0    0    0    0    0    0    0    0    0  928    0    0    0     0     3
-    0    0    0    0    0    0    0    0    0    0    2  755    0    0     0     0
*    0    0    0    0    0    0    0    0    0    0    0    0  952    0     0     0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  697     0     0
(    0   74    0    0    0    0    0    0    0    0    0    7    0    0  1405     0
)    0    0    0    0    0    0    0    0    0    0    0    0    0    0   443  1044
result accuracy by length:
1 ( 2%) 98.00
3 ( 2%) 76.00
5 ( 2%) 48.84
7 ( 4%) 37.12
9 ( 4%) 39.70
11 ( 3%) 33.52
13 ( 4%) 38.43
15 ( 4%) 31.68
17 ( 4%) 30.58
19 ( 4%) 30.88
21 ( 4%) 30.30
23 ( 4%) 25.37
25 ( 4%) 26.00
27 ( 4%) 26.60
29 ( 3%) 23.56
31 ( 3%) 20.83
33 ( 2%) 15.71
35 ( 2%) 16.44
37 ( 2%) 21.37
39 ( 3%) 19.08
41 ( 3%) 20.13
43 ( 2%) 18.12
45 ( 2%) 17.86
47 ( 2%) 16.67
49 ( 2%) 14.08
51 ( 2%) 18.94
53 ( 2%) 16.42
55 ( 2%) 11.76
57 ( 2%) 17.48
59 ( 2%) 15.89
61 ( 1%) 14.06
63 ( 0%)  2.86
65 ( 0%) 22.22
67 ( 0%) 33.33
result accuracy by symbol:
( (91%) 24.29
) (91%) 24.29
* (87%) 20.18
+ (84%) 24.69
- (77%) 26.88
/ (76%) 25.97
0 (52%) 25.86
1 (60%) 24.93
2 (61%) 23.55
3 (62%) 24.03
4 (61%) 23.18
5 (62%) 23.57
6 (62%) 22.48
7 (63%) 22.34
8 (64%) 21.88
9 (63%) 22.54
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 100.00
2 ( 0%) 100.00
3 ( 0%) 100.00
4 ( 0%) 100.00
5 ( 0%) 90.00
6 ( 0%) 100.00
7 ( 0%) 100.00
8 ( 0%) 100.00
9 ( 0%) 90.00
result accuracy by result:
0 (21%) 48.10
1 (10%) 54.68
2 ( 4%) 54.04
3 ( 2%) 40.00
4 ( 2%) 32.33
5 ( 2%) 47.00
6 ( 2%) 47.83
7 ( 2%) 45.13
8 ( 2%) 29.91
9 ( 1%) 53.49
result accuracy by generalization:
1 (22.45%) 51.91
2 (22.96%) 41.33
3 (22.53%)  5.98
4 (15.82%) 24.39
5 (16.24%)  9.17
error cases:
9 5 [-1] [-1] 9 5
5 0 [-1] [-1] 5 0
5*9 5*9 [1, -1, 1] [1, -1, 1] 45 5
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 4
6*4 6*4 [1, -1, 1] [1, -1, 1] 24 6
9*0 9*0 [1, -1, 1] [1, -1, 1] 0 9
3*5 3*5 [1, -1, 1] [1, -1, 1] 15 3
5*5 5*5 [1, -1, 1] [1, -1, 1] 25 5
2*4 2*4 [1, -1, 1] [1, -1, 1] 8 4
5*3 5*3 [1, -1, 1] [1, -1, 1] 15 5
7*9 7*9 [1, -1, 1] [1, -1, 1] 63 7
7/2 7/2 [1, -1, 1] [1, -1, 1] 4 2
3*2 3*2 [1, -1, 1] [1, -1, 1] 6 3
8/3 8/3 [1, -1, 1] [1, -1, 1] 3 2
3*3 3*3 [1, -1, 1] [1, -1, 1] 9 3
6*3 6*3 [1, -1, 1] [1, -1, 1] 18 6
8*2 8*2 [1, -1, 1] [1, -1, 1] 16 8
7/3 7/3 [1, -1, 1] [1, -1, 1] 3 2
7*7 7*7 [1, -1, 1] [1, -1, 1] 49 7
7+5 ++5 [1, -1, 1] [1, -1, 1] 12 None
val (Perception Acc=94.23, Head Acc=100.00, Result Acc=27.84)
Epoch time: 8m 17s
------------------------------
Epoch 90/99 (max_len=inf, data=11170)
Train acc: 63.85 (abduce 98.49)
Hit samples:  11001  Ave length:  14.76
Symbols:  16 [(0, 5806), (1, 6923), (2, 7036), (3, 6659), (4, 6481), (5, 6461), (6, 6374), (7, 6493), (8, 6424), (9, 6307), (10, 14308), (11, 14154), (12, 12596), (13, 12905), (14, 28550), (15, 14918)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((0, 1), 0), 5), (((0, 2), 0), 3), (((6, 3), 18), 2), (((9, 0), 0), 2), (((2, 3), 12), 2), (((4, 3), 12), 2), (((6, 2), 12), 2), (((2, 2), 4), 2), (((5, 11), 55), 2), (((7, 0), 0), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((4, 1), 4), 3), (((9, 1), 9), 3), (((6, 1), 6), 2), (((5, 3), 1), 2), (((6, 2), 3), 2), (((12, 1), 12), 2), (((1, 0), 1), 2), (((4, 1), 16), 1), (((4, 2), 4), 1), (((9, 9), 3), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.89
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 63.85 (abduce 80.40)
Hit samples:  8981  Ave length:  14.31
Symbols:  16 [(0, 5020), (1, 5667), (2, 5594), (3, 5284), (4, 5051), (5, 5079), (6, 4958), (7, 5049), (8, 4998), (9, 4834), (10, 11198), (11, 12212), (12, 9105), (13, 10038), (14, 22598), (15, 11794)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 308), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 8981 samples for 100 iterations, 0.9163754387876618, 1 epochs, take 53 sec.
Epoch time: 7m 52s
------------------------------
Epoch 91/99 (max_len=inf, data=11170)
Train acc: 64.02 (abduce 98.61)
Hit samples:  11015  Ave length:  14.77
Symbols:  16 [(0, 5757), (1, 6917), (2, 7053), (3, 6693), (4, 6467), (5, 6487), (6, 6393), (7, 6537), (8, 6443), (9, 6328), (10, 14326), (11, 14182), (12, 12632), (13, 12920), (14, 28598), (15, 14958)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 374), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((0, 2), 0), 3), (((5, 2), 10), 2), (((6, 2), 12), 2), (((4, 0), 0), 2), (((9, 3), 27), 2), (((2, 1), 4), 2), (((3, 0), 0), 2), (((7, 7), 49), 2), (((9, 0), 0), 2), (((6, 6), 36), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 4), (((5, 2), 1), 3), (((3, 1), 3), 3), (((8, 1), 16), 2), (((6, 0), 6), 2), (((6, 2), 3), 2), (((4, 1), 4), 2), (((12, 1), 6), 2), (((8, 4), 1), 2), (((2, 1), 3), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.89
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 64.02 (abduce 80.47)
Hit samples:  8988  Ave length:  14.31
Symbols:  16 [(0, 5010), (1, 5663), (2, 5593), (3, 5297), (4, 5049), (5, 5095), (6, 4948), (7, 5069), (8, 5003), (9, 4854), (10, 11215), (11, 12221), (12, 9129), (13, 10028), (14, 22613), (15, 11825)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 308), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 8988 samples for 100 iterations, 0.9164152645165303, 1 epochs, take 53 sec.
Epoch time: 7m 53s
------------------------------
Epoch 92/99 (max_len=inf, data=11170)
Train acc: 63.99 (abduce 98.52)
Hit samples:  11005  Ave length:  14.77
Symbols:  16 [(0, 5760), (1, 6889), (2, 7065), (3, 6687), (4, 6462), (5, 6465), (6, 6379), (7, 6545), (8, 6442), (9, 6309), (10, 14234), (11, 14209), (12, 12630), (13, 12925), (14, 28579), (15, 14925)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 105)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((0, 1), 0), 6), (((4, 0), 0), 4), (((0, 2), 0), 3), (((9, 0), 0), 3), (((7, 8), 56), 3), (((2, 7), 14), 2), (((10, 2), 20), 2), (((8, 0), 0), 2), (((1, 9), 0), 1), (((6, 6), 36), 1)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((6, 1), 6), 4), (((3, 1), 3), 3), (((4, 1), 4), 2), (((8, 3), 3), 2), (((9, 1), 9), 2), (((5, 2), 3), 2), (((2, 2), 3), 2), (((1, 7), 2), 2), (((8, 2), 3), 2), (((8, 7), 1), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.89
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 63.99 (abduce 80.47)
Hit samples:  8988  Ave length:  14.31
Symbols:  16 [(0, 5004), (1, 5659), (2, 5605), (3, 5297), (4, 5052), (5, 5085), (6, 4954), (7, 5073), (8, 5008), (9, 4851), (10, 11193), (11, 12230), (12, 9117), (13, 10060), (14, 22628), (15, 11812)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 308), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 8988 samples for 100 iterations, 0.916068041172995, 1 epochs, take 53 sec.
Epoch time: 7m 55s
------------------------------
Epoch 93/99 (max_len=inf, data=11170)
Train acc: 64.00 (abduce 98.75)
Hit samples:  11030  Ave length:  14.78
Symbols:  16 [(0, 5800), (1, 6898), (2, 7054), (3, 6711), (4, 6485), (5, 6490), (6, 6423), (7, 6537), (8, 6453), (9, 6364), (10, 14330), (11, 14228), (12, 12686), (13, 12941), (14, 28684), (15, 14990)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((0, 1), 0), 3), (((0, 2), 0), 3), (((4, 0), 0), 2), (((3, 0), 0), 2), (((4, 2), 1), 2), (((6, 8), 48), 2), (((1, 5), 15), 2), (((9, 3), 27), 1), (((5, 10), 0), 1), (((9, 9), 0), 1)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((4, 1), 4), 5), (((5, 1), 5), 3), (((3, 1), 3), 3), (((8, 2), 4), 2), (((8, 1), 8), 2), (((2, 2), 3), 2), (((7, 1), 7), 2), (((8, 2), 8), 1), (((23, 9), 3), 1), (((6, 1), 0), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.89
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 64.00 (abduce 80.49)
Hit samples:  8991  Ave length:  14.31
Symbols:  16 [(0, 5014), (1, 5647), (2, 5605), (3, 5298), (4, 5058), (5, 5087), (6, 4960), (7, 5070), (8, 5008), (9, 4862), (10, 11216), (11, 12218), (12, 9147), (13, 10037), (14, 22652), (15, 11820)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 308), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 8991 samples for 100 iterations, 0.9160754939820822, 1 epochs, take 53 sec.
Epoch time: 7m 55s
------------------------------
Epoch 94/99 (max_len=inf, data=11170)
Train acc: 64.23 (abduce 98.88)
Hit samples:  11045  Ave length:  14.8
Symbols:  16 [(0, 5805), (1, 6908), (2, 7060), (3, 6726), (4, 6516), (5, 6506), (6, 6433), (7, 6558), (8, 6450), (9, 6380), (10, 14387), (11, 14234), (12, 12710), (13, 12966), (14, 28745), (15, 15029)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 375), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 7), 28), 3), (((8, 6), 48), 3), (((9, 0), 0), 3), (((0, 2), 0), 3), (((6, 0), 0), 3), (((6, 6), 36), 2), (((4, 0), 0), 2), (((8, 7), 56), 2), (((7, 7), 49), 2), (((4, 3), 12), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 7), (((5, 1), 5), 3), (((7, 2), 4), 2), (((9, 2), 5), 2), (((7, 1), 7), 2), (((6, 1), 6), 2), (((4, 1), 4), 2), (((9, 2), 6), 1), (((9, 3), 3), 1), (((3, 13), 0), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.89
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 64.23 (abduce 80.56)
Hit samples:  8999  Ave length:  14.32
Symbols:  16 [(0, 5018), (1, 5665), (2, 5608), (3, 5307), (4, 5070), (5, 5095), (6, 4963), (7, 5083), (8, 5013), (9, 4865), (10, 11252), (11, 12238), (12, 9131), (13, 10067), (14, 22685), (15, 11843)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 308), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 8999 samples for 100 iterations, 0.9162471005329589, 1 epochs, take 53 sec.
Epoch time: 7m 54s
------------------------------
Epoch 95/99 (max_len=inf, data=11170)
Train acc: 64.17 (abduce 98.89)
Hit samples:  11046  Ave length:  14.8
Symbols:  16 [(0, 5790), (1, 6899), (2, 7097), (3, 6728), (4, 6516), (5, 6508), (6, 6417), (7, 6569), (8, 6463), (9, 6371), (10, 14243), (11, 14291), (12, 12733), (13, 13045), (14, 28757), (15, 15047)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 374), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 105)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((4, 0), 0), 3), (((3, 0), 0), 2), (((6, 6), 36), 2), (((1, 1), 0), 2), (((2, 2), 0), 2), (((0, 2), 0), 2), (((0, 1), 0), 2), (((8, 9), 72), 2), (((2, 3), 0), 2), (((7, 0), 0), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((8, 1), 8), 5), (((6, 1), 6), 4), (((8, 3), 3), 3), (((1, 0), 1), 3), (((5, 2), 3), 3), (((7, 6), 1), 2), (((5, 3), 1), 2), (((2, 1), 0), 2), (((2, 6), 0), 2), (((8, 7), 1), 2)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.90
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 64.17 (abduce 80.53)
Hit samples:  8995  Ave length:  14.32
Symbols:  16 [(0, 5011), (1, 5658), (2, 5607), (3, 5301), (4, 5060), (5, 5092), (6, 4960), (7, 5079), (8, 5010), (9, 4871), (10, 11196), (11, 12236), (12, 9136), (13, 10086), (14, 22657), (15, 11833)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 308), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 8995 samples for 100 iterations, 0.9159193434425784, 1 epochs, take 53 sec.
Epoch time: 7m 51s
------------------------------
Epoch 96/99 (max_len=inf, data=11170)
Train acc: 64.21 (abduce 98.87)
Hit samples:  11044  Ave length:  14.8
Symbols:  16 [(0, 5811), (1, 6903), (2, 7096), (3, 6723), (4, 6500), (5, 6505), (6, 6410), (7, 6551), (8, 6463), (9, 6376), (10, 14216), (11, 14335), (12, 12720), (13, 13023), (14, 28745), (15, 15041)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((0, 1), 0), 8), (((0, 2), 0), 7), (((4, 0), 0), 3), (((1, 3), 0), 3), (((9, 0), 0), 3), (((4, 4), 16), 2), (((9, 4), 36), 2), (((4, 8), 32), 2), (((6, 2), 12), 2), (((3, 0), 0), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((5, 2), 3), 3), (((8, 3), 3), 2), (((8, 1), 8), 2), (((9, 7), 1), 2), (((3, 5), 3), 2), (((9, 2), 3), 1), (((13, 1), 12), 1), (((7, 1), 4), 1), (((6, 2), 0), 1), (((8, 5), 1), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.90
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 64.21 (abduce 80.53)
Hit samples:  8995  Ave length:  14.32
Symbols:  16 [(0, 5019), (1, 5653), (2, 5611), (3, 5294), (4, 5062), (5, 5094), (6, 4957), (7, 5079), (8, 5011), (9, 4868), (10, 11184), (11, 12264), (12, 9124), (13, 10081), (14, 22662), (15, 11832)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 308), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 8995 samples for 100 iterations, 0.915982763306029, 1 epochs, take 53 sec.
Epoch time: 7m 54s
------------------------------
Epoch 97/99 (max_len=inf, data=11170)
Train acc: 64.38 (abduce 98.80)
Hit samples:  11036  Ave length:  14.79
Symbols:  16 [(0, 5808), (1, 6910), (2, 7058), (3, 6714), (4, 6488), (5, 6488), (6, 6377), (7, 6551), (8, 6479), (9, 6390), (10, 14209), (11, 14325), (12, 12714), (13, 12979), (14, 28695), (15, 15015)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((0, 1), 0), 5), (((5, 0), 0), 4), (((7, 0), 0), 3), (((8, 4), 32), 2), (((2, 8), 16), 2), (((8, 9), 72), 2), (((0, 2), 0), 2), (((4, 0), 0), 1), (((7, 7), 63), 1), (((6, 6), 66), 1)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((9, 1), 9), 4), (((8, 1), 8), 3), (((8, 2), 4), 2), (((9, 2), 9), 2), (((6, 2), 3), 2), (((5, 2), 1), 2), (((3, 1), 3), 2), (((8, 7), 1), 2), (((8, 2), 3), 2), (((8, 0), 8), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.89
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 64.38 (abduce 80.49)
Hit samples:  8991  Ave length:  14.32
Symbols:  16 [(0, 5003), (1, 5655), (2, 5603), (3, 5290), (4, 5052), (5, 5094), (6, 4947), (7, 5084), (8, 5017), (9, 4876), (10, 11171), (11, 12268), (12, 9111), (13, 10080), (14, 22644), (15, 11832)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 308), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 8991 samples for 100 iterations, 0.9158451606888998, 1 epochs, take 53 sec.
Epoch time: 7m 51s
------------------------------
Epoch 98/99 (max_len=inf, data=11170)
Train acc: 64.38 (abduce 98.59)
Hit samples:  11013  Ave length:  14.77
Symbols:  16 [(0, 5832), (1, 6922), (2, 7033), (3, 6680), (4, 6428), (5, 6466), (6, 6378), (7, 6542), (8, 6454), (9, 6334), (10, 14141), (11, 14265), (12, 12693), (13, 12957), (14, 28615), (15, 14955)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 373), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((0, 1), 0), 4), (((0, 2), 0), 4), (((2, 2), 4), 3), (((9, 2), 18), 3), (((6, 0), 0), 3), (((7, 5), 35), 3), (((4, 9), 36), 2), (((4, 0), 0), 2), (((9, 0), 0), 2), (((3, 0), 0), 2)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((5, 2), 3), 3), (((3, 1), 3), 3), (((9, 1), 9), 3), (((8, 3), 3), 3), (((6, 2), 3), 3), (((6, 1), 18), 2), (((4, 1), 4), 2), (((8, 2), 3), 2), (((2, 9), 11), 1), (((6, 8), 84), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.90
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 64.38 (abduce 80.40)
Hit samples:  8981  Ave length:  14.3
Symbols:  16 [(0, 5015), (1, 5662), (2, 5584), (3, 5280), (4, 5021), (5, 5079), (6, 4940), (7, 5076), (8, 5010), (9, 4852), (10, 11145), (11, 12224), (12, 9093), (13, 10076), (14, 22597), (15, 11797)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 308), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 8981 samples for 100 iterations, 0.9156254135818328, 1 epochs, take 53 sec.
Epoch time: 7m 55s
------------------------------
Epoch 99/99 (max_len=inf, data=11170)
Train acc: 64.21 (abduce 98.63)
Hit samples:  11017  Ave length:  14.77
Symbols:  16 [(0, 5815), (1, 6895), (2, 7047), (3, 6693), (4, 6423), (5, 6499), (6, 6372), (7, 6541), (8, 6469), (9, 6340), (10, 14163), (11, 14240), (12, 12710), (13, 12964), (14, 28620), (15, 14958)]
Head:  [((-1,), 1000), ((1, -1, 1), 1170), ((1, 3, 1, -1, 3), 365), ((1, -1, 3, 1, 3), 113), ((1, -1, 4, 4, 1, 4, 4), 374), ((2, 2, 5, 2, 2, -1, 5), 142), ((1, 3, 1, -1, 5, 3, 5), 92), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 146), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 114), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 104)]
Semantics: 16/12/2 (total/solved/learn).
Symbol-12 (int -> int -> int), Samples: 100,  [(((0, 1), 0), 7), (((0, 2), 0), 5), (((4, 7), 28), 2), (((5, 5), 75), 2), (((3, 7), 21), 2), (((9, 2), 22), 1), (((2, 5), 0), 1), (((8, 2), 16), 1), (((5, 7), 0), 1), (((6, 8), 54), 1)]
Symbol-13 (int -> int -> int), Samples: 100,  [(((6, 5), 1), 3), (((8, 1), 8), 3), (((9, 1), 9), 2), (((9, 4), 3), 2), (((5, 1), 5), 2), (((7, 1), 7), 2), (((4, 2), 4), 2), (((6, 1), 18), 1), (((6, 1), 6), 1), (((5, 3), 4), 1)]
0.000000	t0	$_
0.000000	int	0
0.000000	int -> int	incr
0.000000	int -> int	decr0
0.000000	t0 -> t0 -> t0 -> t0	if0
0.000000	t0 -> t1 -> ((t0 -> t1 -> t2) -> t0 -> t1 -> t2) -> t2	fix2
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0))))))))))
0.000000	int -> int -> int	#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0)))))))))
Rescoring 2 frontiers...
Symbol-00: 0 0 1.00
Symbol-01: 1 (incr 0) 1.00
Symbol-02: 2 (incr (incr 0)) 1.00
Symbol-03: 3 (incr (incr (incr 0))) 1.00
Symbol-04: 4 (incr (incr (incr (incr 0)))) 1.00
Symbol-05: 5 (incr (incr (incr (incr (incr 0))))) 1.00
Symbol-06: 6 (incr (incr (incr (incr (incr (incr 0)))))) 1.00
Symbol-07: 7 (incr (incr (incr (incr (incr (incr (incr 0))))))) 1.00
Symbol-08: 8 (incr (incr (incr (incr (incr (incr (incr (incr 0)))))))) 1.00
Symbol-09: 9 (incr (incr (incr (incr (incr (incr (incr (incr (incr 0))))))))) 1.00
Symbol-10: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 (incr ($2 $1 (decr0 $0)))))))))) 0.93
Symbol-11: fn (lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) 0.95
Symbol-12: fn (lambda (lambda (if0 (decr0 (decr0 (if0 $1 $0 $1))) $0 $1))) 0.90
Symbol-13: fn (lambda (lambda (if0 $1 0 (incr (if0 (decr0 (#(lambda (lambda (fix2 $1 $0 (lambda (lambda (lambda (if0 $0 $1 ($2 (decr0 $1) (decr0 $0))))))))) (incr $1) $0)) 0 (incr 0)))))) 0.94
Symbol-14: None 1.00
Symbol-15: None 1.00
Train acc: 64.21 (abduce 80.45)
Hit samples:  8986  Ave length:  14.31
Symbols:  16 [(0, 5012), (1, 5654), (2, 5589), (3, 5293), (4, 5025), (5, 5094), (6, 4945), (7, 5075), (8, 5016), (9, 4864), (10, 11152), (11, 12237), (12, 9118), (13, 10074), (14, 22620), (15, 11812)]
Head:  [((-1,), 1000), ((1, -1, 1), 985), ((1, 3, 1, -1, 3), 290), ((1, -1, 3, 1, 3), 99), ((1, -1, 4, 4, 1, 4, 4), 308), ((2, 2, 5, 2, 2, -1, 5), 100), ((1, 3, 1, 5, 3, -1, 5), 73), ((1, 3, 1, -1, 6, 6, 3, 6, 6), 115), ((1, -1, 6, 4, 6, 4, 1, 6, 6), 99), ((1, 7, 4, 4, 1, 4, 4, -1, 7), 91)]
Learn perception with 8986 samples for 100 iterations, 0.915632291180588, 1 epochs, take 53 sec.
Percentage of None result: 32.10
              precision    recall  f1-score   support

           0       0.96      1.00      0.98      4016
           1       0.79      0.95      0.86      5142
           2       0.98      0.98      0.98      5321
           3       1.00      1.00      1.00      5241
           4       0.99      0.98      0.98      5279
           5       1.00      1.00      1.00      5383
           6       1.00      0.95      0.97      5427
           7       1.00      0.95      0.97      5462
           8       1.00      1.00      1.00      5453
           9       0.99      1.00      0.99      5476
           +       0.97      1.00      0.99     13199
           -       0.98      0.99      0.99     10734
           *       1.00      1.00      1.00     13491
           /       1.00      1.00      1.00      9876
           (       0.75      0.94      0.83     21081
           )       0.99      0.68      0.81     21081

    accuracy                           0.94    141662
   macro avg       0.96      0.96      0.96    141662
weighted avg       0.95      0.94      0.93    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (     )
0  283    0    0    0    0    0    0    0    0    0    0    0    0    0     0     0
1    1  344    4    0    1    0    0    0    0    0    1    0    0    0     5     4
2    1    2  368    0    1    0    0    1    0    0    0    0    0    0     1     0
3    0    0    0  369    0    0    0    0    0    0    0    0    0    0     0     0
4    0    0    4    0  363    0    0    0    0    4    0    0    0    0     0     0
5    0    0    0    0    0  379    0    0    0    0    0    0    0    0     0     0
6    9    0    0    0    0    0  364    0    0    0    0    9    0    0     0     0
7    0    0    0    0    0    0    0  364    0    0   20    0    0    0     0     0
8    0    0    0    0    0    0    0    0  384    0    0    0    0    0     0     0
9    0    0    0    0    0    0    0    0    0  386    0    0    0    0     0     0
+    0    0    0    0    0    0    0    0    0    0  928    0    0    0     0     3
-    0    0    0    0    0    0    0    0    0    0    2  752    2    0     0     0
*    0    0    0    0    0    0    0    0    0    0    0    0  952    0     0     0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  697     0     0
(    0   82    0    0    0    0    0    0    0    0    0    7    0    0  1398     0
)    0    7    0    0    0    0    0    0    0    0    0    0    0    0   465  1014
result accuracy by length:
1 ( 2%) 97.00
3 ( 2%) 73.00
5 ( 2%) 48.06
7 ( 4%) 36.24
9 ( 4%) 37.19
11 ( 3%) 33.52
13 ( 4%) 35.19
15 ( 4%) 30.69
17 ( 4%) 29.61
19 ( 4%) 30.88
21 ( 4%) 26.77
23 ( 4%) 22.93
25 ( 4%) 22.50
27 ( 4%) 25.12
29 ( 3%) 21.47
31 ( 3%) 20.24
33 ( 2%) 15.00
35 ( 2%) 14.38
37 ( 2%) 17.09
39 ( 3%) 17.76
41 ( 3%) 18.12
43 ( 2%) 14.49
45 ( 2%) 14.29
47 ( 2%) 17.42
49 ( 2%) 11.27
51 ( 2%) 14.39
53 ( 2%) 12.69
55 ( 2%) 10.92
57 ( 2%) 11.89
59 ( 2%) 17.76
61 ( 1%) 12.50
63 ( 0%)  5.71
65 ( 0%) 22.22
67 ( 0%) 33.33
result accuracy by symbol:
( (91%) 22.35
) (91%) 22.35
* (87%) 18.46
+ (84%) 22.67
- (77%) 24.65
/ (76%) 23.75
0 (52%) 24.18
1 (60%) 22.52
2 (61%) 21.50
3 (62%) 21.97
4 (61%) 21.00
5 (62%) 22.14
6 (62%) 20.06
7 (63%) 20.41
8 (64%) 20.16
9 (63%) 20.53
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 100.00
2 ( 0%) 100.00
3 ( 0%) 100.00
4 ( 0%) 90.00
5 ( 0%) 100.00
6 ( 0%) 80.00
7 ( 0%) 100.00
8 ( 0%) 100.00
9 ( 0%) 100.00
result accuracy by result:
0 (21%) 45.52
1 (10%) 50.37
2 ( 4%) 48.99
3 ( 2%) 34.81
4 ( 2%) 28.57
5 ( 2%) 45.00
6 ( 2%) 41.74
7 ( 2%) 40.71
8 ( 2%) 30.77
9 ( 1%) 50.00
result accuracy by generalization:
1 (22.45%) 49.91
2 (22.96%) 38.40
3 (22.53%)  5.62
4 (15.82%) 21.16
5 (16.24%)  7.91
error cases:
6 0 [-1] [-1] 6 0
6 - [-1] [-1] 6 None
4 9 [-1] [-1] 4 9
5*9 5*9 [1, -1, 1] [1, -1, 1] 45 5
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 4
6*4 6*4 [1, -1, 1] [1, -1, 1] 24 6
9*0 9*0 [1, -1, 1] [1, -1, 1] 0 9
3*5 3*5 [1, -1, 1] [1, -1, 1] 15 3
5*5 5*5 [1, -1, 1] [1, -1, 1] 25 5
2*4 2*4 [1, -1, 1] [1, -1, 1] 8 4
5*3 5*3 [1, -1, 1] [1, -1, 1] 15 5
3-9 3*9 [1, -1, 1] [1, -1, 1] 0 3
7*9 7*9 [1, -1, 1] [1, -1, 1] 63 7
7/2 7/2 [1, -1, 1] [1, -1, 1] 4 2
3*2 3*2 [1, -1, 1] [1, -1, 1] 6 3
8/3 8/3 [1, -1, 1] [1, -1, 1] 3 2
3*3 3*3 [1, -1, 1] [1, -1, 1] 9 3
6*3 6*3 [1, -1, 1] [1, -1, 1] 18 6
8*2 8*2 [1, -1, 1] [1, -1, 1] 16 8
7/3 7/3 [1, -1, 1] [1, -1, 1] 3 2
val (Perception Acc=93.54, Head Acc=100.00, Result Acc=25.92)
Epoch time: 8m 15s
Percentage of None result: 7.86
              precision    recall  f1-score   support

           0       0.96      1.00      0.98      4016
           1       0.91      0.97      0.94      5142
           2       0.98      0.98      0.98      5321
           3       1.00      1.00      1.00      5241
           4       0.99      0.98      0.98      5279
           5       1.00      1.00      1.00      5383
           6       1.00      0.97      0.98      5427
           7       0.99      0.99      0.99      5462
           8       1.00      1.00      1.00      5453
           9       0.99      1.00      0.99      5476
           +       0.99      1.00      0.99     13199
           -       0.99      0.99      0.99     10734
           *       1.00      1.00      1.00     13491
           /       1.00      1.00      1.00      9876
           (       0.76      0.97      0.85     21081
           )       0.99      0.69      0.81     21081

    accuracy                           0.94    141662
   macro avg       0.97      0.97      0.97    141662
weighted avg       0.95      0.94      0.94    141662

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (     )
0  283    0    0    0    0    0    0    0    0    0    0    0    0    0     0     0
1    1  350    4    0    1    0    0    0    0    0    0    0    0    0     2     2
2    1    2  368    0    1    0    0    1    0    0    0    0    0    0     0     0
3    0    0    0  369    0    0    0    0    0    0    0    0    0    0     0     0
4    0    0    4    0  363    0    0    0    0    4    0    0    0    0     0     0
5    0    0    0    0    0  379    0    0    0    0    0    0    0    0     0     0
6    9    0    0    0    0    0  371    0    0    0    0    2    0    0     0     0
7    0    0    0    0    0    0    0  381    0    0    3    0    0    0     0     0
8    0    0    0    0    0    0    0    0  384    0    0    0    0    0     0     0
9    0    0    0    0    0    0    0    0    0  386    0    0    0    0     0     0
+    0    0    0    0    0    0    0    0    0    0  928    0    0    0     0     3
-    0    0    0    0    0    0    0    0    0    0    2  752    2    0     0     0
*    0    0    0    0    0    0    0    0    0    0    0    0  952    0     0     0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  697     0     0
(    0   29    0    0    0    0    0    0    0    0    0    5    0    0  1450     3
)    0    1    0    0    0    0    0    0    0    0    0    0    0    0   465  1021
result accuracy by length:
1 ( 2%) 98.00
3 ( 2%) 75.00
5 ( 2%) 51.16
7 ( 4%) 38.86
9 ( 4%) 42.71
11 ( 3%) 38.07
13 ( 4%) 40.74
15 ( 4%) 36.63
17 ( 4%) 37.86
19 ( 4%) 37.75
21 ( 4%) 35.35
23 ( 4%) 32.20
25 ( 4%) 30.50
27 ( 4%) 36.45
29 ( 3%) 29.84
31 ( 3%) 29.17
33 ( 2%) 22.86
35 ( 2%) 26.03
37 ( 2%) 28.21
39 ( 3%) 29.61
41 ( 3%) 25.50
43 ( 2%) 21.74
45 ( 2%) 25.00
47 ( 2%) 24.24
49 ( 2%) 24.65
51 ( 2%) 28.79
53 ( 2%) 24.63
55 ( 2%) 19.33
57 ( 2%) 25.17
59 ( 2%) 26.17
61 ( 1%) 26.56
63 ( 0%) 14.29
65 ( 0%) 22.22
67 ( 0%) 33.33
result accuracy by symbol:
( (91%) 31.03
) (91%) 31.03
* (87%) 26.39
+ (84%) 31.40
- (77%) 34.09
/ (76%) 33.10
0 (52%) 33.55
1 (60%) 32.63
2 (61%) 31.10
3 (62%) 30.69
4 (61%) 29.95
5 (62%) 30.47
6 (62%) 29.01
7 (63%) 29.45
8 (64%) 28.95
9 (63%) 28.90
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 100.00
2 ( 0%) 100.00
3 ( 0%) 100.00
4 ( 0%) 90.00
5 ( 0%) 100.00
6 ( 0%) 90.00
7 ( 0%) 100.00
8 ( 0%) 100.00
9 ( 0%) 100.00
result accuracy by result:
0 (21%) 61.43
1 (10%) 66.29
2 ( 4%) 63.13
3 ( 2%) 46.67
4 ( 2%) 38.35
5 ( 2%) 55.00
6 ( 2%) 49.57
7 ( 2%) 56.64
8 ( 2%) 37.61
9 ( 1%) 60.47
result accuracy by generalization:
1 (22.45%) 58.55
2 (22.96%) 49.16
3 (22.53%)  7.25
4 (15.82%) 35.87
5 (16.24%) 14.20
error cases:
6 0 [-1] [-1] 6 0
4 9 [-1] [-1] 4 9
5*9 5*9 [1, -1, 1] [1, -1, 1] 45 5
4*6 4*6 [1, -1, 1] [1, -1, 1] 24 4
6*4 6*4 [1, -1, 1] [1, -1, 1] 24 6
9*0 9*0 [1, -1, 1] [1, -1, 1] 0 9
3*5 3*5 [1, -1, 1] [1, -1, 1] 15 3
5*5 5*5 [1, -1, 1] [1, -1, 1] 25 5
2*4 2*4 [1, -1, 1] [1, -1, 1] 8 4
5*3 5*3 [1, -1, 1] [1, -1, 1] 15 5
3-9 3*9 [1, -1, 1] [1, -1, 1] 0 3
7*9 7*9 [1, -1, 1] [1, -1, 1] 63 7
7/2 7/2 [1, -1, 1] [1, -1, 1] 4 2
3*2 3*2 [1, -1, 1] [1, -1, 1] 6 3
8/3 8/3 [1, -1, 1] [1, -1, 1] 3 2
3*3 3*3 [1, -1, 1] [1, -1, 1] 9 3
6*3 6*3 [1, -1, 1] [1, -1, 1] 18 6
8*2 8*2 [1, -1, 1] [1, -1, 1] 16 8
7/3 7/3 [1, -1, 1] [1, -1, 1] 3 2
4+9 2+9 [1, -1, 1] [1, -1, 1] 13 11
val (Perception Acc=94.42, Head Acc=100.00, Result Acc=34.04)
------------------------------
Evaluate on test set...
Percentage of None result: 8.35
              precision    recall  f1-score   support

           0       0.95      0.99      0.97     39465
           1       0.88      0.95      0.91     51797
           2       0.98      0.97      0.98     52546
           3       0.97      0.99      0.98     52953
           4       0.97      0.99      0.98     53234
           5       1.00      0.99      0.99     53430
           6       0.99      0.98      0.99     53860
           7       0.98      0.96      0.97     54695
           8       0.99      0.97      0.98     54671
           9       0.99      0.98      0.99     54909
           +       0.99      0.99      0.99    131914
           -       1.00      1.00      1.00    108556
           *       1.00      0.98      0.99    132837
           /       0.99      1.00      0.99     99343
           (       0.75      0.98      0.85    210691
           )       0.99      0.67      0.80    210691

    accuracy                           0.94   1415592
   macro avg       0.96      0.96      0.96   1415592
weighted avg       0.95      0.94      0.94   1415592

     0    1    2    3    4    5    6    7    8    9    +    -    *    /     (    )
0  277    0    0    0    0    0    0    0    0    0    0    0    0    0     0    0
1    2  347    4    0    0    0    0    2    0    0    0    0    0    0     4    2
2    1    4  361    0    0    0    0    0    0    0    0    0    0    0     0    0
3    0    1    0  370    0    0    0    0    0    0    0    0    0    0     0    0
4    0    1    0    0  371    0    0    0    0    2    0    0    0    0     0    0
5    0    0    0    0    0  374    1    0    0    0    0    0    0    0     1    0
6    2    0    2    0    2    0  373    0    0    0    0    0    0    0     0    0
7    2    7    0    2    0    0    0  369    0    0    4    0    0    0     0    0
8    5    0    0    5    2    0    0    0  373    0    0    0    0    0     0    0
9    0    0    0    5    0    0    0    0    2  380    0    0    0    0     0    0
+    0    1    0    0    0    0    0    0    0    0  925    1    1    0     0    0
-    0    0    0    0    0    0    0    0    0    0    0  764    0    0     0    0
*    0    3    0    0    0    0    0    0    0    0    7    0  920    5     0    0
/    0    0    0    0    0    0    0    0    0    0    0    0    0  701     0    0
(    0   16    0    0    1    0    0    0    0    0    0    1    0    0  1464    3
)    0   10    0    0    0    0    0    1    0    0    0    0    0    0   484  990
result accuracy by length:
1 ( 2%) 97.60
3 ( 2%) 74.36
5 ( 2%) 51.42
7 ( 4%) 44.42
9 ( 4%) 39.98
11 ( 4%) 36.90
13 ( 4%) 38.25
15 ( 4%) 37.54
17 ( 4%) 35.46
19 ( 4%) 35.80
21 ( 4%) 34.35
23 ( 4%) 35.02
25 ( 4%) 32.87
27 ( 4%) 32.84
29 ( 3%) 31.56
31 ( 3%) 30.66
33 ( 2%) 27.99
35 ( 2%) 24.88
37 ( 2%) 26.45
39 ( 2%) 27.36
41 ( 2%) 24.61
43 ( 2%) 24.00
45 ( 2%) 25.06
47 ( 2%) 23.89
49 ( 2%) 25.34
51 ( 2%) 23.93
53 ( 2%) 23.27
55 ( 2%) 22.20
57 ( 2%) 23.68
59 ( 2%) 22.54
61 ( 1%) 22.93
63 ( 0%) 19.66
65 ( 0%) 23.97
67 ( 0%) 24.14
69 ( 0%) 36.36
71 ( 0%)  0.00
result accuracy by symbol:
( (91%) 30.69
) (91%) 30.69
* (87%) 26.45
+ (84%) 30.94
- (78%) 33.72
/ (77%) 33.11
0 (51%) 32.74
1 (60%) 31.73
2 (61%) 30.52
3 (62%) 30.44
4 (62%) 29.69
5 (62%) 29.69
6 (62%) 29.44
7 (63%) 29.28
8 (63%) 29.11
9 (63%) 28.78
result accuracy by digit:
0 ( 0%) 100.00
1 ( 0%) 95.00
2 ( 0%) 98.00
3 ( 0%) 98.00
4 ( 0%) 98.00
5 ( 0%) 99.00
6 ( 0%) 98.00
7 ( 0%) 96.00
8 ( 0%) 96.00
9 ( 0%) 98.00
result accuracy by result:
0 (21%) 61.62
1 (11%) 66.75
2 ( 3%) 60.73
3 ( 3%) 41.21
4 ( 2%) 44.26
5 ( 2%) 50.14
6 ( 2%) 46.89
7 ( 2%) 55.20
8 ( 2%) 50.28
9 ( 2%) 50.00
result accuracy by generalization:
1 (22.84%) 57.47
2 (23.00%) 48.55
3 (22.36%)  8.81
4 (15.84%) 35.45
5 (15.95%) 12.74
error cases:
7 + [-1] [-1] 7 None
7 0 [-1] [-1] 7 0
7 1 [-1] [-1] 7 1
7 3 [-1] [-1] 7 3
1 7 [-1] [-1] 1 7
1 0 [-1] [-1] 1 0
1 7 [-1] [-1] 1 7
1 0 [-1] [-1] 1 0
1 2 [-1] [-1] 1 2
6 2 [-1] [-1] 6 2
6 0 [-1] [-1] 6 0
4 1 [-1] [-1] 4 1
4 9 [-1] [-1] 4 9
3 4 [-1] [-1] 3 4
3 1 [-1] [-1] 3 1
9 3 [-1] [-1] 9 3
9 3 [-1] [-1] 9 3
2 1 [-1] [-1] 2 1
2 1 [-1] [-1] 2 1
5 6 [-1] [-1] 5 6
test (Perception Acc=93.67, Head Acc=100.00, Result Acc=33.91)
